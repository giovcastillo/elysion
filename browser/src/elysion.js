
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
var Elysion = (function () {


  // See also:
  // http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
  // but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
  // with userland code which might access the derived class in a 'classic' way.
  function JisonParserError(msg, hash) {
      Object.defineProperty(this, 'name', {
          enumerable: false,
          writable: false,
          value: 'JisonParserError'
      });
  
      if (msg == null) msg = '???';
  
      Object.defineProperty(this, 'message', {
          enumerable: false,
          writable: true,
          value: msg
      });
  
      this.hash = hash;
  
      var stacktrace;
      if (hash && hash.exception instanceof Error) {
          var ex2 = hash.exception;
          this.message = ex2.message || msg;
          stacktrace = ex2.stack;
      }
      if (!stacktrace) {
          if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
              Error.captureStackTrace(this, this.constructor);
          } else {
              stacktrace = (new Error(msg)).stack;
          }
      }
      if (stacktrace) {
          Object.defineProperty(this, 'stack', {
              enumerable: false,
              writable: false,
              value: stacktrace
          });
      }
  }
  
  if (typeof Object.setPrototypeOf === 'function') {
      Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
  } else {
      JisonParserError.prototype = Object.create(Error.prototype);
  }
  JisonParserError.prototype.constructor = JisonParserError;
  JisonParserError.prototype.name = 'JisonParserError';
  
  
  
  
          // helper: reconstruct the productions[] table
          function bp(s) {
              var rv = [];
              var p = s.pop;
              var r = s.rule;
              for (var i = 0, l = p.length; i < l; i++) {
                  rv.push([
                      p[i],
                      r[i]
                  ]);
              }
              return rv;
          }
      
  
  
          // helper: reconstruct the defaultActions[] table
          function bda(s) {
              var rv = {};
              var d = s.idx;
              var g = s.goto;
              for (var i = 0, l = d.length; i < l; i++) {
                  var j = d[i];
                  rv[j] = g[i];
              }
              return rv;
          }
      
  
  
          // helper: reconstruct the 'goto' table
          function bt(s) {
              var rv = [];
              var d = s.len;
              var y = s.symbol;
              var t = s.type;
              var a = s.state;
              var m = s.mode;
              var g = s.goto;
              for (var i = 0, l = d.length; i < l; i++) {
                  var n = d[i];
                  var q = {};
                  for (var j = 0; j < n; j++) {
                      var z = y.shift();
                      switch (t.shift()) {
                      case 2:
                          q[z] = [
                              m.shift(),
                              g.shift()
                          ];
                          break;
  
                      case 0:
                          q[z] = a.shift();
                          break;
  
                      default:
                          // type === 1: accept
                          q[z] = [
                              3
                          ];
                      }
                  }
                  rv.push(q);
              }
              return rv;
          }
      
  
  
          // helper: runlength encoding with increment step: code, length: step (default step = 0)
          // `this` references an array
          function s(c, l, a) {
              a = a || 0;
              for (var i = 0; i < l; i++) {
                  this.push(c);
                  c += a;
              }
          }
  
          // helper: duplicate sequence from *relative* offset and length.
          // `this` references an array
          function c(i, l) {
              i = this.length - i;
              for (l += i; i < l; i++) {
                  this.push(this[i]);
              }
          }
  
          // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
          function u(a) {
              var rv = [];
              for (var i = 0, l = a.length; i < l; i++) {
                  var e = a[i];
                  // Is this entry a helper function?
                  if (typeof e === 'function') {
                      i++;
                      e.apply(rv, a[i]);
                  } else {
                      rv.push(e);
                  }
              }
              return rv;
          }
      
  
  var parser = {
      // Code Generator Information Report
      // ---------------------------------
      //
      // Options:
      //
      //   default action mode: ............. ["classic","merge"]
      //   test-compile action mode: ........ "parser:*,lexer:*"
      //   try..catch: ...................... true
      //   default resolve on conflict: ..... true
      //   on-demand look-ahead: ............ false
      //   error recovery token skip maximum: 3
      //   yyerror in parse actions is: ..... NOT recoverable,
      //   yyerror in lexer actions and other non-fatal lexer are:
      //   .................................. NOT recoverable,
      //   debug grammar/output: ............ false
      //   has partial LR conflict upgrade:   true
      //   rudimentary token-stack support:   false
      //   parser table compression mode: ... 2
      //   export debug tables: ............. false
      //   export *all* tables: ............. false
      //   module type: ..................... commonjs
      //   parser engine type: .............. lalr
      //   output main() in the module: ..... true
      //   has user-specified main(): ....... false
      //   has user-specified require()/import modules for main():
      //   .................................. false
      //   number of expected conflicts: .... 0
      //
      //
      // Parser Analysis flags:
      //
      //   no significant actions (parser is a language matcher only):
      //   .................................. false
      //   uses yyleng: ..................... false
      //   uses yylineno: ................... false
      //   uses yytext: ..................... false
      //   uses yylloc: ..................... false
      //   uses ParseError API: ............. false
      //   uses YYERROR: .................... false
      //   uses YYRECOVERING: ............... false
      //   uses YYERROK: .................... false
      //   uses YYCLEARIN: .................. false
      //   tracks rule values: .............. true
      //   assigns rule values: ............. true
      //   uses location tracking: .......... true
      //   assigns location: ................ true
      //   uses yystack: .................... false
      //   uses yysstack: ................... false
      //   uses yysp: ....................... true
      //   uses yyrulelength: ............... false
      //   uses yyMergeLocationInfo API: .... true
      //   has error recovery: .............. false
      //   has error reporting: ............. false
      //
      // --------- END OF REPORT -----------
  
  trace: function no_op_trace() { },
  JisonParserError: JisonParserError,
  yy: {},
  options: {
    type: "lalr",
    hasPartialLrUpgradeOnConflict: true,
    errorRecoveryTokenDiscardCount: 3
  },
  symbols_: {
    "!": 7,
    "!=": 64,
    "!==": 62,
    "$accept": 0,
    "$end": 1,
    "%": 9,
    "&": 14,
    "&&": 72,
    "(": 21,
    ")": 22,
    ")>": 134,
    "*": 8,
    "**": 55,
    "+": 4,
    "++": 51,
    ",": 15,
    "-": 5,
    "--": 52,
    ".": 23,
    "...": 78,
    ":": 20,
    "::": 27,
    ";": 18,
    "<": 12,
    "<(": 133,
    "<<": 58,
    "<=": 66,
    "==": 63,
    "===": 61,
    ">": 11,
    ">=": 65,
    ">>": 59,
    ">>>": 60,
    "?": 19,
    "??": 73,
    "@": 3,
    "AND": 69,
    "ARGUMENT": 141,
    "AS": 138,
    "ASYNC": 33,
    "AT": 139,
    "AWAIT": 37,
    "Access": 239,
    "AlphaNum": 215,
    "Arg": 176,
    "ArgList": 175,
    "Arguments": 174,
    "Array": 241,
    "ArrayArg": 245,
    "ArrayList": 243,
    "Assign": 232,
    "AssignKeyword": 234,
    "Assignable": 235,
    "Assignment": 233,
    "BOOL": 119,
    "BREAK": 92,
    "Block": 179,
    "BlockExpression": 191,
    "Body": 157,
    "CALL_END": 77,
    "CALL_START": 76,
    "CASE": 94,
    "CATCH": 103,
    "CHAIN": 45,
    "CLASS": 79,
    "COMPOUND_AND": 50,
    "COMPOUND_OR": 93,
    "CONST": 151,
    "CONTINUE": 143,
    "Case": 186,
    "Cases": 185,
    "Catch": 195,
    "Class": 178,
    "Clause": 167,
    "Clauses": 187,
    "Code": 161,
    "Compare": 171,
    "DEFAULT": 90,
    "DEFAULTS": 116,
    "DIVISION": 57,
    "DO": 34,
    "Declaration": 270,
    "DeclarationKeyword": 268,
    "Declarations": 269,
    "Declare": 267,
    "EITHER": 46,
    "EITHER_OR": 49,
    "ELSE": 108,
    "EOF": 1,
    "EXISTS": 41,
    "EXPORT": 154,
    "EXTENDS": 80,
    "Else": 199,
    "ElseOtherwise": 202,
    "Export": 274,
    "ExportList": 277,
    "ExportName": 279,
    "ExportNames": 278,
    "Exportable": 280,
    "Expression": 159,
    "FINALLY": 102,
    "FOR": 83,
    "FOR_AS": 98,
    "FOR_AT": 97,
    "FOR_FROM": 96,
    "FOR_IN": 87,
    "FOR_OF": 86,
    "FROM": 140,
    "FUNCTION": 131,
    "FUNC_DIRECTIVE": 28,
    "FUNC_EXISTS": 75,
    "Finally": 194,
    "For": 182,
    "ForAny": 189,
    "ForAssignable": 183,
    "ForExpression": 180,
    "FuncBody": 225,
    "FuncHeader": 227,
    "FuncSpecifiers": 226,
    "Function": 224,
    "GET": 136,
    "IDENTIFIER": 142,
    "IF": 95,
    "IMPORT": 153,
    "IN": 67,
    "INCLUDES": 43,
    "INDENT": 38,
    "INDEX_END": 114,
    "INDEX_START": 113,
    "INFINITY": 118,
    "INSTANCEOF": 68,
    "INTERFACE": 145,
    "INTERPOLATION_END": 127,
    "INTERPOLATION_START": 126,
    "IS": 47,
    "ISNT": 48,
    "Identifier": 237,
    "Identifier?": 254,
    "If": 190,
    "IfBlock": 200,
    "IfUnless": 201,
    "Import": 272,
    "Import(FROM)": 273,
    "ImportList": 276,
    "ImportName": 282,
    "ImportNames": 281,
    "Interface": 249,
    "InterfaceBody": 250,
    "InterfaceKeyword?": 253,
    "InterfaceProperties": 251,
    "InterfaceProperty": 252,
    "Interpolation": 219,
    "Interpolations": 218,
    "Invocation": 173,
    "JointExpression": 181,
    "LET": 150,
    "LOOP": 106,
    "Label": 160,
    "Line": 158,
    "Literal": 214,
    "Logical": 172,
    "Loop": 198,
    "MATH_BIN": 44,
    "MathPostfix": 169,
    "MathPrefix": 168,
    "Multicheck": 163,
    "MulticheckClauses": 166,
    "MulticheckCombinations": 165,
    "Multicondition": 164,
    "NAN": 121,
    "NEW": 111,
    "NEWLINE": 26,
    "NOT": 54,
    "NULL": 120,
    "NUMBER": 122,
    "New": 204,
    "OR": 70,
    "OTHERWISE": 109,
    "OUDENT": 155,
    "OUTDENT": 39,
    "Object": 209,
    "Operation": 162,
    "Operator": 170,
    "OptComma": 177,
    "OptDefault": 275,
    "OptVoids": 246,
    "PARAM_END": 31,
    "PARAM_START": 30,
    "PLUS": 56,
    "POSTCASE": 91,
    "POSTFOR": 88,
    "POSTIF": 99,
    "POSTUNLESS": 100,
    "PROPERTY": 112,
    "Param": 231,
    "ParamArray": 240,
    "ParamArrayArg": 244,
    "ParamArrayList": 242,
    "ParamAssignable": 236,
    "ParamIdentifier": 238,
    "ParamList": 230,
    "ParamObject": 208,
    "ParamPropList": 211,
    "ParamPropObj": 213,
    "Params": 229,
    "Parenthetical": 207,
    "PropList": 210,
    "PropObj": 212,
    "READONLY": 146,
    "REGEX": 128,
    "REGEX_END": 130,
    "REGEX_START": 129,
    "RETURN": 152,
    "Regex": 220,
    "RegexInterpolation": 223,
    "RegexInterpolations": 222,
    "RegexWithInterpolations": 221,
    "Return": 271,
    "Root": 156,
    "SET": 137,
    "STATIC": 135,
    "STRING": 123,
    "STRING_END": 125,
    "STRING_START": 124,
    "SUCH": 110,
    "SUPER": 74,
    "SWITCH": 89,
    "SYMBOL_EXISTS": 42,
    "Statement": 248,
    "String": 216,
    "StringWithInterpolations": 217,
    "Super": 205,
    "Switch": 184,
    "TAG": 148,
    "THEN": 32,
    "THIS": 115,
    "THROW": 144,
    "TRY": 101,
    "TYPE": 147,
    "TYPEOF": 36,
    "This": 206,
    "Try": 193,
    "TryBlock": 192,
    "Type": 255,
    "TypeArgument": 261,
    "TypeArguments": 260,
    "TypeArguments?": 228,
    "TypeArray": 265,
    "TypeArrayItems": 266,
    "TypeDeclaration": 256,
    "TypeObjProp": 264,
    "TypeObjProps": 263,
    "TypeObject": 262,
    "TypeSentence": 257,
    "TypeValue": 258,
    "TypeWithArguments": 259,
    "UNDEFINED": 117,
    "UNLESS": 107,
    "UNTIL": 105,
    "VAR": 149,
    "Value": 203,
    "Voids": 247,
    "WHEN": 84,
    "WHETHER": 35,
    "WHILE": 104,
    "WHILST": 85,
    "WITH": 132,
    "WITHIN": 29,
    "When": 188,
    "While": 196,
    "WhileUntil": 197,
    "YIELD": 40,
    "[": 24,
    "]": 25,
    "^": 10,
    "error": 2,
    "{": 16,
    "{{": 81,
    "|": 13,
    "||": 71,
    "}": 17,
    "}}": 82,
    "~": 6,
    "~~": 53
  },
  terminals_: {
    1: "EOF",
    2: "error",
    3: "@",
    4: "+",
    5: "-",
    6: "~",
    7: "!",
    8: "*",
    9: "%",
    10: "^",
    11: ">",
    12: "<",
    13: "|",
    14: "&",
    15: ",",
    16: "{",
    17: "}",
    18: ";",
    19: "?",
    20: ":",
    21: "(",
    22: ")",
    23: ".",
    24: "[",
    25: "]",
    26: "NEWLINE",
    27: "::",
    28: "FUNC_DIRECTIVE",
    29: "WITHIN",
    30: "PARAM_START",
    31: "PARAM_END",
    32: "THEN",
    33: "ASYNC",
    34: "DO",
    35: "WHETHER",
    36: "TYPEOF",
    37: "AWAIT",
    38: "INDENT",
    39: "OUTDENT",
    40: "YIELD",
    41: "EXISTS",
    42: "SYMBOL_EXISTS",
    43: "INCLUDES",
    44: "MATH_BIN",
    45: "CHAIN",
    46: "EITHER",
    47: "IS",
    48: "ISNT",
    49: "EITHER_OR",
    50: "COMPOUND_AND",
    51: "++",
    52: "--",
    53: "~~",
    54: "NOT",
    55: "**",
    56: "PLUS",
    57: "DIVISION",
    58: "<<",
    59: ">>",
    60: ">>>",
    61: "===",
    62: "!==",
    63: "==",
    64: "!=",
    65: ">=",
    66: "<=",
    67: "IN",
    68: "INSTANCEOF",
    69: "AND",
    70: "OR",
    71: "||",
    72: "&&",
    73: "??",
    74: "SUPER",
    75: "FUNC_EXISTS",
    76: "CALL_START",
    77: "CALL_END",
    78: "...",
    79: "CLASS",
    80: "EXTENDS",
    81: "{{",
    82: "}}",
    83: "FOR",
    84: "WHEN",
    85: "WHILST",
    86: "FOR_OF",
    87: "FOR_IN",
    88: "POSTFOR",
    89: "SWITCH",
    90: "DEFAULT",
    91: "POSTCASE",
    92: "BREAK",
    93: "COMPOUND_OR",
    94: "CASE",
    95: "IF",
    96: "FOR_FROM",
    97: "FOR_AT",
    98: "FOR_AS",
    99: "POSTIF",
    100: "POSTUNLESS",
    101: "TRY",
    102: "FINALLY",
    103: "CATCH",
    104: "WHILE",
    105: "UNTIL",
    106: "LOOP",
    107: "UNLESS",
    108: "ELSE",
    109: "OTHERWISE",
    110: "SUCH",
    111: "NEW",
    112: "PROPERTY",
    113: "INDEX_START",
    114: "INDEX_END",
    115: "THIS",
    116: "DEFAULTS",
    117: "UNDEFINED",
    118: "INFINITY",
    119: "BOOL",
    120: "NULL",
    121: "NAN",
    122: "NUMBER",
    123: "STRING",
    124: "STRING_START",
    125: "STRING_END",
    126: "INTERPOLATION_START",
    127: "INTERPOLATION_END",
    128: "REGEX",
    129: "REGEX_START",
    130: "REGEX_END",
    131: "FUNCTION",
    132: "WITH",
    133: "<(",
    134: ")>",
    135: "STATIC",
    136: "GET",
    137: "SET",
    138: "AS",
    139: "AT",
    140: "FROM",
    141: "ARGUMENT",
    142: "IDENTIFIER",
    143: "CONTINUE",
    144: "THROW",
    145: "INTERFACE",
    146: "READONLY",
    147: "TYPE",
    148: "TAG",
    149: "VAR",
    150: "LET",
    151: "CONST",
    152: "RETURN",
    153: "IMPORT",
    154: "EXPORT",
    155: "OUDENT"
  },
  TERROR: 2,
      EOF: 1,
  
      // internals: defined here so the object *structure* doesn't get modified by parse() et al,
      // thus helping JIT compilers like Chrome V8.
      originalQuoteName: null,
      originalParseError: null,
      cleanupAfterParse: null,
      constructParseErrorInfo: null,
      yyMergeLocationInfo: null,
  
  
  
      __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
      __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
  
      // APIs which will be set up depending on user action code analysis:
      //yyRecovering: 0,
      //yyErrOk: 0,
      //yyClearIn: 0,
  
      // Helper APIs
      // -----------
  
      // Helper function which can be overridden by user code later on: put suitable quotes around
      // literal IDs in a description string.
      quoteName: function parser_quoteName(id_str) {
          return '"' + id_str + '"';
      },
  
      // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
      //
      // Return NULL when the symbol is unknown to the parser.
      getSymbolName: function parser_getSymbolName(symbol) {
          if (this.terminals_[symbol]) {
              return this.terminals_[symbol];
          }
  
          // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
          //
          // An example of this may be where a rule's action code contains a call like this:
          //
          //      parser.getSymbolName(#$)
          //
          // to obtain a human-readable name of the current grammar rule.
          var s = this.symbols_;
          for (var key in s) {
              if (s[key] === symbol) {
                  return key;
              }
          }
          return null;
      },
  
      // Return a more-or-less human-readable description of the given symbol, when available,
      // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
      //
      // Return NULL when the symbol is unknown to the parser.
      describeSymbol: function parser_describeSymbol(symbol) {
          if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
              return this.terminal_descriptions_[symbol];
          }
          else if (symbol === this.EOF) {
              return 'end of input';
          }
          var id = this.getSymbolName(symbol);
          if (id) {
              return this.quoteName(id);
          }
          return null;
      },
  
      // Produce a (more or less) human-readable list of expected tokens at the point of failure.
      //
      // The produced list may contain token or token set descriptions instead of the tokens
      // themselves to help turning this output into something that easier to read by humans
      // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
      // expected terminals and nonterminals is produced.
      //
      // The returned list (array) will not contain any duplicate entries.
      collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
          var TERROR = this.TERROR;
          var tokenset = [];
          var check = {};
          // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
          // If so, use that one instead of the less palatable token set.
          if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
              return [
                  this.state_descriptions_[state]
              ];
          }
          for (var p in this.table[state]) {
              p = +p;
              if (p !== TERROR) {
                  var d = do_not_describe ? p : this.describeSymbol(p);
                  if (d && !check[d]) {
                      tokenset.push(d);
                      check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                  }
              }
          }
          return tokenset;
      },
  productions_: bp({
    pop: u([
    156,
    156,
    s,
    [157, 3],
    158,
    158,
    s,
    [159, 11],
    s,
    [160, 3],
    s,
    [161, 15],
    s,
    [162, 21],
    163,
    164,
    165,
    165,
    166,
    166,
    s,
    [167, 3],
    s,
    [168, 8],
    169,
    169,
    s,
    [170, 11],
    s,
    [171, 12],
    s,
    [172, 7],
    s,
    [173, 7],
    s,
    [174, 3],
    s,
    [175, 4],
    s,
    [176, 3],
    177,
    177,
    s,
    [178, 11],
    s,
    [179, 6],
    180,
    180,
    181,
    181,
    s,
    [182, 22],
    183,
    183,
    s,
    [184, 4],
    185,
    185,
    s,
    [186, 10],
    s,
    [187, 3],
    s,
    [188, 3],
    s,
    [189, 3],
    s,
    [190, 9],
    191,
    191,
    s,
    [192, 3],
    193,
    193,
    194,
    194,
    s,
    [195, 5],
    s,
    [196, 7],
    197,
    197,
    198,
    198,
    s,
    [199, 4],
    s,
    [200, 8],
    201,
    201,
    s,
    [202, 3],
    s,
    [203, 9],
    204,
    205,
    205,
    206,
    s,
    [207, 3],
    208,
    208,
    s,
    [209, 3],
    s,
    [210, 4],
    s,
    [211, 5],
    s,
    [212, 17],
    s,
    [213, 7],
    s,
    [214, 7],
    215,
    215,
    216,
    216,
    217,
    218,
    218,
    219,
    219,
    220,
    220,
    221,
    222,
    222,
    223,
    223,
    s,
    [224, 13],
    s,
    [225, 3],
    s,
    [226, 7],
    s,
    [227, 9],
    s,
    [228, 3],
    229,
    229,
    s,
    [230, 4],
    231,
    232,
    s,
    [233, 4],
    s,
    [234, 3],
    s,
    [235, 5],
    s,
    [236, 5],
    237,
    s,
    [238, 8],
    239,
    239,
    240,
    240,
    s,
    [241, 3],
    s,
    [242, 3],
    s,
    [243, 4],
    244,
    244,
    s,
    [245, 4],
    246,
    246,
    s,
    [247, 3],
    s,
    [248, 12],
    249,
    249,
    s,
    [250, 3],
    s,
    [251, 4],
    s,
    [252, 3],
    s,
    [253, 3],
    254,
    254,
    s,
    [255, 3],
    s,
    [256, 3],
    s,
    [257, 7],
    s,
    [258, 6],
    s,
    [259, 4],
    s,
    [260, 4],
    s,
    [261, 3],
    262,
    262,
    s,
    [263, 4],
    s,
    [264, 5],
    265,
    265,
    s,
    [266, 4],
    267,
    267,
    s,
    [268, 3],
    s,
    [269, 4],
    270,
    270,
    s,
    [271, 4],
    s,
    [272, 8],
    273,
    s,
    [274, 8],
    s,
    [275, 3],
    s,
    [276, 3],
    277,
    277,
    s,
    [278, 3],
    s,
    [279, 6],
    280,
    280,
    s,
    [281, 3],
    s,
    [282, 6]
  ]),
    rule: u([
    0,
    1,
    3,
    2,
    s,
    [1, 14],
    s,
    [3, 3],
    2,
    5,
    5,
    4,
    5,
    4,
    6,
    5,
    6,
    c,
    [6, 3],
    5,
    s,
    [2, 4],
    3,
    s,
    [2, 5],
    4,
    2,
    4,
    c,
    [11, 3],
    c,
    [32, 4],
    c,
    [37, 3],
    c,
    [23, 5],
    1,
    4,
    1,
    c,
    [62, 15],
    s,
    [1, 26],
    c,
    [59, 4],
    c,
    [74, 4],
    4,
    6,
    1,
    3,
    c,
    [4, 3],
    2,
    2,
    s,
    [0, 5, 1],
    2,
    3,
    c,
    [102, 3],
    4,
    3,
    c,
    [102, 3],
    c,
    [5, 3],
    3,
    c,
    [127, 4],
    7,
    8,
    8,
    c,
    [3, 3],
    5,
    5,
    s,
    [6, 4],
    5,
    5,
    c,
    [13, 3],
    7,
    9,
    9,
    8,
    8,
    2,
    1,
    5,
    4,
    7,
    c,
    [58, 3],
    c,
    [68, 3],
    c,
    [124, 5],
    c,
    [43, 3],
    c,
    [8, 5],
    c,
    [90, 5],
    5,
    3,
    7,
    s,
    [3, 4],
    1,
    3,
    c,
    [82, 3],
    s,
    [2, 6],
    3,
    s,
    [4, 4],
    5,
    3,
    3,
    4,
    c,
    [40, 3],
    c,
    [17, 6],
    c,
    [18, 3],
    c,
    [205, 3],
    6,
    6,
    c,
    [149, 15],
    3,
    4,
    c,
    [72, 3],
    5,
    c,
    [54, 3],
    4,
    5,
    c,
    [151, 3],
    5,
    c,
    [271, 3],
    c,
    [9, 4],
    c,
    [18, 3],
    3,
    5,
    5,
    7,
    5,
    c,
    [55, 3],
    c,
    [185, 5],
    2,
    c,
    [38, 4],
    c,
    [158, 4],
    c,
    [293, 9],
    c,
    [58, 3],
    c,
    [7, 9],
    c,
    [93, 4],
    3,
    6,
    4,
    7,
    2,
    5,
    6,
    c,
    [145, 3],
    s,
    [2, 4],
    c,
    [35, 5],
    c,
    [215, 3],
    c,
    [173, 5],
    0,
    c,
    [222, 3],
    c,
    [156, 3],
    c,
    [244, 3],
    1,
    3,
    5,
    c,
    [145, 4],
    c,
    [122, 6],
    c,
    [62, 4],
    c,
    [94, 6],
    c,
    [22, 3],
    c,
    [264, 3],
    c,
    [351, 4],
    c,
    [283, 4],
    1,
    c,
    [75, 3],
    c,
    [69, 4],
    1,
    c,
    [289, 3],
    c,
    [95, 4],
    c,
    [9, 3],
    c,
    [48, 5],
    4,
    1,
    1,
    4,
    6,
    c,
    [303, 3],
    c,
    [162, 4],
    6,
    3,
    4,
    c,
    [29, 3],
    c,
    [321, 3],
    4,
    c,
    [87, 3],
    c,
    [172, 5],
    4,
    c,
    [31, 3],
    s,
    [1, 5],
    5,
    c,
    [105, 4],
    c,
    [197, 5],
    c,
    [110, 5],
    c,
    [47, 5],
    c,
    [432, 3],
    5,
    1,
    c,
    [271, 3],
    c,
    [68, 4],
    c,
    [153, 4],
    5,
    c,
    [80, 5],
    4,
    5,
    s,
    [7, 3],
    9,
    c,
    [350, 3],
    c,
    [71, 4],
    5,
    c,
    [127, 4],
    0,
    c,
    [168, 4],
    5,
    c,
    [52, 5],
    c,
    [281, 6],
    c,
    [46, 5],
    c,
    [11, 3],
    c,
    [10, 3]
  ])
  }),
  performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {
  
            /* this == yyval */
  
            // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
            var yy = this.yy;
            var yyparser = yy.parser;
            var yylexer = yy.lexer;
  
            
  
            switch (yystate) {
  case 0:
      /*! Production::    $accept : Root $end */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
      this.$ = yyvstack[yysp - 1];
      this._$ = yylstack[yysp - 1];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
      break;
  
  case 1:
      /*! Production::    Root : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      return this.$ = Object.assign(new yy["Root"]("", ...['EMPTY']), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 2:
      /*! Production::    Root : Body */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      return this.$ = new yy["Root"]("Body", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 3:
      /*! Production::    Body : Body NEWLINE Line */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-):
      this.$ = yyvstack[yysp - 2];
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-)
      
      
      (yyvstack[yysp - 2][1] = [...yyvstack[yysp - 2][1], Object.assign(yyvstack[yysp], { lineCount: yyvstack[yysp - 1] })]) && Object.assign(yyvstack[yysp - 2], { loc: { first_line: yylstack[yysp - 2].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 2].first_column, last_column: yylstack[yysp].last_column } })
      break;
  
  case 4:
      /*! Production::    Body : Body NEWLINE */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(yyvstack[yysp - 1][1][yyvstack[yysp - 1][1].length - 1], { lineCount: yyvstack[yysp] }) && Object.assign(yyvstack[yysp - 1], { loc: { first_line: yylstack[yysp - 1].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 1].first_column, last_column: yylstack[yysp].last_column } })
      break;
  
  case 5:
      /*! Production::    Body : Line */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Body"]("Line", ...[[yyvstack[yysp]]]), { rule: "Line", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 6:
      /*! Production::    Line : Expression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Line"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 7:
      /*! Production::    Line : Statement */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Line"]("Statement", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 8:
      /*! Production::    Expression : Code */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Code", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 9:
      /*! Production::    Expression : Value */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Value", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 10:
      /*! Production::    Expression : Operation */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Operation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 11:
      /*! Production::    Expression : If */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("If", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 12:
      /*! Production::    Expression : While */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("While", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 13:
      /*! Production::    Expression : For */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("For", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 14:
      /*! Production::    Expression : Switch */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Switch", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 15:
      /*! Production::    Expression : TryBlock */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("TryBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 16:
      /*! Production::    Expression : Assign */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Assign", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 17:
      /*! Production::    Expression : Class */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 18:
      /*! Production::    Expression : Label */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Expression"]("Label", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 19:
      /*! Production::    Label : Identifier "::" Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Label"]("Identifier :: Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Identifier :: Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 20:
      /*! Production::    Label : Identifier "::" Statement */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Label"]("Identifier :: Statement", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Identifier :: Statement", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 21:
      /*! Production::    Label : Identifier "::" Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Label"]("Identifier :: Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier :: Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 22:
      /*! Production::    Code : FUNC_DIRECTIVE Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 23:
      /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Block", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 24:
      /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 25:
      /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Block", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 26:
      /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 27:
      /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 28:
      /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Block", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp - 1]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 29:
      /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Expression", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 30:
      /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Expression", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 31:
      /*! Production::    Code : WITHIN PARAM_START PARAM_END Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 32:
      /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 33:
      /*! Production::    Code : WITHIN PARAM_START PARAM_END Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 34:
      /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 35:
      /*! Production::    Code : WITHIN Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("WITHIN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 36:
      /*! Production::    Code : ASYNC Code */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Code"]("ASYNC Code", ...[...yyvstack[yysp].contents]), { rule: "ASYNC Code", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"async":true}, { generated: undefined })
      break;
  
  case 37:
      /*! Production::    Operation : MathPrefix Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("MathPrefix Expression", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "MathPrefix Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 38:
      /*! Production::    Operation : Expression MathPostfix */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression MathPostfix", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MathPostfix", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 39:
      /*! Production::    Operation : Expression Operator Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression Operator Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Operator Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 40:
      /*! Production::    Operation : "@" Value */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("@ Value", ...[yyvstack[yysp]]), { rule: "@ Value", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 41:
      /*! Production::    Operation : DO Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("DO Expression", ...[yyvstack[yysp]]), { rule: "DO Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 42:
      /*! Production::    Operation : WHETHER Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("WHETHER Expression", ...[yyvstack[yysp]]), { rule: "WHETHER Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 43:
      /*! Production::    Operation : TYPEOF Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("TYPEOF Expression", ...[yyvstack[yysp]]), { rule: "TYPEOF Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 44:
      /*! Production::    Operation : AWAIT Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("AWAIT Expression", ...[yyvstack[yysp]]), { rule: "AWAIT Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 45:
      /*! Production::    Operation : AWAIT INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("AWAIT INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "AWAIT INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 46:
      /*! Production::    Operation : YIELD Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("YIELD Expression", ...[yyvstack[yysp]]), { rule: "YIELD Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 47:
      /*! Production::    Operation : YIELD INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("YIELD INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "YIELD INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 48:
      /*! Production::    Operation : Expression EXISTS */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression EXISTS", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 49:
      /*! Production::    Operation : Expression SYMBOL_EXISTS */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression SYMBOL_EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression SYMBOL_EXISTS", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 50:
      /*! Production::    Operation : Expression Compare Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression Compare Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Compare Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 51:
      /*! Production::    Operation : Expression Logical Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression Logical Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Logical Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 52:
      /*! Production::    Operation : Expression INCLUDES Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression INCLUDES Expression", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Expression INCLUDES Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 53:
      /*! Production::    Operation : Expression MATH_BIN Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression MATH_BIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MATH_BIN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 54:
      /*! Production::    Operation : Expression Multicheck */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression Multicheck", ...[yyvstack[yysp - 1], yyvstack[yysp].contents]), { rule: "Expression Multicheck", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 55:
      /*! Production::    Operation : Multicondition */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Multicondition", ...[null, yyvstack[yysp].contents]), { rule: "Multicondition", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 56:
      /*! Production::    Operation : Expression CHAIN Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 57:
      /*! Production::    Operation : Expression CHAIN Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 58:
      /*! Production::    Multicheck : MulticheckCombinations MulticheckClauses */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Multicheck"]("MulticheckCombinations MulticheckClauses", ...[yyvstack[yysp - 1].rule, yyvstack[yysp]]), { rule: "MulticheckCombinations MulticheckClauses", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 59:
      /*! Production::    Multicondition : EITHER MulticheckClauses */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Multicondition"]("EITHER MulticheckClauses", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "EITHER MulticheckClauses", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 60:
      /*! Production::    MulticheckCombinations : IS EITHER */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MulticheckCombinations"]("IS EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type })
      break;
  
  case 61:
      /*! Production::    MulticheckCombinations : ISNT EITHER */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MulticheckCombinations"]("ISNT EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type })
      break;
  
  case 62:
      /*! Production::    MulticheckClauses : MulticheckClauses EITHER_OR Clause */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["MulticheckClauses"]("MulticheckClauses EITHER_OR Clause", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "MulticheckClauses EITHER_OR Clause", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 63:
      /*! Production::    MulticheckClauses : Clause */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["MulticheckClauses"]("Clause", ...[yyvstack[yysp]]), { rule: "Clause", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 64:
      /*! Production::    Clause : Clause COMPOUND_AND Compare Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Clause"]("Clause COMPOUND_AND Compare Expression", ...[...yyvstack[yysp - 3].contents, [yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Clause COMPOUND_AND Compare Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 65:
      /*! Production::    Clause : Expression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Clause"]("Expression", ...[[yyvstack[yysp]]]), { rule: "Expression", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 66:
      /*! Production::    Clause : Compare Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Clause"]("Compare Expression", ...[[yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Compare Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 67:
      /*! Production::    MathPrefix : "++" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 68:
      /*! Production::    MathPrefix : "--" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 69:
      /*! Production::    MathPrefix : "+" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 70:
      /*! Production::    MathPrefix : "-" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 71:
      /*! Production::    MathPrefix : "~" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 72:
      /*! Production::    MathPrefix : "~~" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("~~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 73:
      /*! Production::    MathPrefix : NOT */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("NOT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 74:
      /*! Production::    MathPrefix : "!" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPrefix"]("!", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 75:
      /*! Production::    MathPostfix : "++" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPostfix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 76:
      /*! Production::    MathPostfix : "--" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["MathPostfix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 77:
      /*! Production::    Operator : "*" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("*", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 78:
      /*! Production::    Operator : "**" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("**", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 79:
      /*! Production::    Operator : "+" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 80:
      /*! Production::    Operator : PLUS */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("PLUS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 81:
      /*! Production::    Operator : "-" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 82:
      /*! Production::    Operator : DIVISION */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("DIVISION", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 83:
      /*! Production::    Operator : "%" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("%", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 84:
      /*! Production::    Operator : "<<" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("<<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 85:
      /*! Production::    Operator : ">>" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"](">>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 86:
      /*! Production::    Operator : ">>>" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"](">>>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 87:
      /*! Production::    Operator : "^" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Operator"]("^", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 88:
      /*! Production::    Compare : IS */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("IS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 89:
      /*! Production::    Compare : "===" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("===", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 90:
      /*! Production::    Compare : ISNT */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("ISNT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 91:
      /*! Production::    Compare : "!==" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("!==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 92:
      /*! Production::    Compare : "==" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 93:
      /*! Production::    Compare : "!=" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("!=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 94:
      /*! Production::    Compare : ">=" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"](">=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 95:
      /*! Production::    Compare : "<=" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("<=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 96:
      /*! Production::    Compare : ">" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"](">", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 97:
      /*! Production::    Compare : "<" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 98:
      /*! Production::    Compare : IN */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("IN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 99:
      /*! Production::    Compare : INSTANCEOF */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Compare"]("INSTANCEOF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 100:
      /*! Production::    Logical : AND */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("AND", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 101:
      /*! Production::    Logical : OR */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 102:
      /*! Production::    Logical : "||" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("||", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 103:
      /*! Production::    Logical : "&&" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("&&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 104:
      /*! Production::    Logical : "|" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("|", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 105:
      /*! Production::    Logical : "&" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 106:
      /*! Production::    Logical : "??" */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Logical"]("??", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 107:
      /*! Production::    Invocation : Value Arguments */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("Value Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Arguments", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 108:
      /*! Production::    Invocation : SUPER Arguments */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("SUPER Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "SUPER Arguments", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 109:
      /*! Production::    Invocation : Value FUNC_EXISTS Arguments */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Value FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined })
      break;
  
  case 110:
      /*! Production::    Invocation : SUPER FUNC_EXISTS Arguments */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("SUPER FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "SUPER FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined })
      break;
  
  case 111:
      /*! Production::    Invocation : "@" SUPER */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("@ SUPER", ...[yyvstack[yysp], new yy.Arguments(null)]), { rule: "@ SUPER", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 112:
      /*! Production::    Invocation : Value String */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("Value String", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value String", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"templ":true}, { generated: undefined })
      break;
  
  case 113:
      /*! Production::    Invocation : Value FUNC_EXISTS String */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS String", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Value FUNC_EXISTS String", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"templ":true,"soak":true}, { generated: undefined })
      break;
  
  case 114:
      /*! Production::    Arguments : CALL_START CALL_END */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Arguments"]("CALL_START CALL_END", ...[/* */]), { rule: "CALL_START CALL_END", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 115:
      /*! Production::    Arguments : CALL_START ArgList OptComma CALL_END */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Arguments"]("CALL_START ArgList OptComma CALL_END", ...[yyvstack[yysp - 2]]), { rule: "CALL_START ArgList OptComma CALL_END", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 116:
      /*! Production::    Arguments : CALL_START INDENT ArgList OptComma OUTDENT CALL_END */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Arguments"]("CALL_START INDENT ArgList OptComma OUTDENT CALL_END", ...[yyvstack[yysp - 3]]), { rule: "CALL_START INDENT ArgList OptComma OUTDENT CALL_END", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined })
      break;
  
  case 117:
      /*! Production::    ArgList : Arg */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ArgList"]("Arg", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 118:
      /*! Production::    ArgList : ArgList "," Arg */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ArgList"]("ArgList , Arg", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "ArgList , Arg", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 119:
      /*! Production::    ArgList : ArgList OptComma NEWLINE Arg */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma NEWLINE Arg", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp]]), { rule: "ArgList OptComma NEWLINE Arg", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 120:
      /*! Production::    ArgList : ArgList OptComma INDENT ArgList OptComma OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma INDENT ArgList OptComma OUTDENT", ...[...yyvstack[yysp - 5].contents, false, ...yyvstack[yysp - 2].contents]), { rule: "ArgList OptComma INDENT ArgList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 121:
      /*! Production::    Arg : Expression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Arg"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 122:
      /*! Production::    Arg : "..." Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Arg"]("... Expression", ...[yyvstack[yysp]]), { rule: "... Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
      break;
  
  case 123:
      /*! Production::    Arg : Expression "..." */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Arg"]("Expression ...", ...[yyvstack[yysp - 1]]), { rule: "Expression ...", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
      break;
  
  case 124:
      /*! Production::    OptComma : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["OptComma"]("", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 125:
      /*! Production::    OptComma : "," */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["OptComma"](",", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 126:
      /*! Production::    Class : CLASS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Identifier", ...[yyvstack[yysp], false, false]), { rule: "CLASS Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 127:
      /*! Production::    Class : CLASS Identifier Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Identifier Block", ...[yyvstack[yysp - 1], false, yyvstack[yysp][1]]), { rule: "CLASS Identifier Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 128:
      /*! Production::    Class : CLASS Identifier THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Identifier THEN Block", ...[yyvstack[yysp - 2], false, yyvstack[yysp][1]]), { rule: "CLASS Identifier THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 129:
      /*! Production::    Class : CLASS Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Block", ...[undefined, false, yyvstack[yysp][1]]), { rule: "CLASS Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 130:
      /*! Production::    Class : CLASS THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS THEN Block", ...[undefined, false, yyvstack[yysp][1]]), { rule: "CLASS THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 131:
      /*! Production::    Class : CLASS Identifier EXTENDS Value Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Identifier EXTENDS Value Block", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp][1]]), { rule: "CLASS Identifier EXTENDS Value Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 132:
      /*! Production::    Class : CLASS Identifier EXTENDS Value THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Identifier EXTENDS Value THEN Block", ...[yyvstack[yysp - 4], yyvstack[yysp - 2], yyvstack[yysp][1]]), { rule: "CLASS Identifier EXTENDS Value THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 133:
      /*! Production::    Class : CLASS EXTENDS Value Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS EXTENDS Value Block", ...[undefined, yyvstack[yysp - 1], yyvstack[yysp][1]]), { rule: "CLASS EXTENDS Value Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 134:
      /*! Production::    Class : CLASS Identifier EXTENDS Value */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS Identifier EXTENDS Value", ...[yyvstack[yysp - 2], yyvstack[yysp],false]), { rule: "CLASS Identifier EXTENDS Value", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 135:
      /*! Production::    Class : CLASS EXTENDS Value */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS EXTENDS Value", ...[undefined, yyvstack[yysp],false]), { rule: "CLASS EXTENDS Value", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 136:
      /*! Production::    Class : CLASS EXTENDS Value THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Class"]("CLASS EXTENDS Value THEN Block", ...[undefined, yyvstack[yysp - 2], yyvstack[yysp][1]]), { rule: "CLASS EXTENDS Value THEN Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 137:
      /*! Production::    Block : "{{" "}}" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Block"]("{{ }}", ...[yy.Block.wrap()]), { rule: "{{ }}", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 138:
      /*! Production::    Block : INDENT OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Block"]("INDENT OUTDENT", ...[yy.Block.wrap()]), { rule: "INDENT OUTDENT", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 139:
      /*! Production::    Block : "{{" INDENT OUTDENT "}}" */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Block"]("{{ INDENT OUTDENT }}", ...[yy.Block.wrap()]), { rule: "{{ INDENT OUTDENT }}", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 140:
      /*! Production::    Block : INDENT Body OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Block"]("INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 141:
      /*! Production::    Block : "{{" INDENT Body OUTDENT "}}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Block"]("{{ INDENT Body OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT Body OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 142:
      /*! Production::    Block : "{" Body "}" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Block"]("{ Body }", ...[yyvstack[yysp - 1]]), { rule: "{ Body }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 143:
      /*! Production::    ForExpression : JointExpression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ForExpression"]("JointExpression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 144:
      /*! Production::    ForExpression : Declare */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ForExpression"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 145:
      /*! Production::    JointExpression : Expression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["JointExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 146:
      /*! Production::    JointExpression : JointExpression "," Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["JointExpression"]("JointExpression , Expression", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "JointExpression , Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 147:
      /*! Production::    For : FOR ForExpression ";" Expression ";" Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 148:
      /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 149:
      /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression ; Expression ; Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 150:
      /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 151:
      /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 152:
      /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 153:
      /*! Production::    For : FOR ForAssignable FOR_OF Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_OF Expression Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 154:
      /*! Production::    For : FOR ForAssignable FOR_IN Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_IN Expression Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 155:
      /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 156:
      /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 157:
      /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 158:
      /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 159:
      /*! Production::    For : Expression POSTFOR ForAssignable FOR_OF Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_OF Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_OF Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 160:
      /*! Production::    For : Expression POSTFOR ForAssignable FOR_IN Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_IN Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_IN Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 161:
      /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 162:
      /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 163:
      /*! Production::    For : FOR Identifier "," Assignable ForAny Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 164:
      /*! Production::    For : Expression POSTFOR Identifier "," Assignable ForAny Expression */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("Expression POSTFOR Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 6])]), { rule: "Expression POSTFOR Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 165:
      /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
      // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 166:
      /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
      // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 167:
      /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 6]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 168:
      /*! Production::    For : Expression POSTFOR DeclarationKeyword Identifier "," Assignable ForAny Expression */
  
      // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
      // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["For"]("Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 7]), yyvstack[yysp - 5]]), { rule: "Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 169:
      /*! Production::    ForAssignable : DeclarationKeyword Assignable */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ForAssignable"]("DeclarationKeyword Assignable", ...[yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "DeclarationKeyword Assignable", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 170:
      /*! Production::    ForAssignable : Assignable */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ForAssignable"]("Assignable", ...[yyvstack[yysp]]), { rule: "Assignable", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 171:
      /*! Production::    Switch : SWITCH Expression INDENT Cases OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Switch"]("SWITCH Expression INDENT Cases OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "SWITCH Expression INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 172:
      /*! Production::    Switch : SWITCH INDENT Cases OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Switch"]("SWITCH INDENT Cases OUTDENT", ...[false, yyvstack[yysp - 1]]), { rule: "SWITCH INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 173:
      /*! Production::    Switch : SWITCH Expression "{{" INDENT Cases OUTDENT "}}" */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Switch"]("SWITCH Expression {{ INDENT Cases OUTDENT }}", ...[yyvstack[yysp - 5], yyvstack[yysp - 2]]), { rule: "SWITCH Expression {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 174:
      /*! Production::    Switch : SWITCH "{{" INDENT Cases OUTDENT "}}" */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Switch"]("SWITCH {{ INDENT Cases OUTDENT }}", ...[false, yyvstack[yysp - 2]]), { rule: "SWITCH {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 175:
      /*! Production::    Cases : Case */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Cases"]("Case", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 176:
      /*! Production::    Cases : Cases NEWLINE Case */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Cases"]("Cases NEWLINE Case", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "Cases NEWLINE Case", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 177:
      /*! Production::    Case : Clauses THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Clauses THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Clauses THEN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 178:
      /*! Production::    Case : Clauses THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Clauses THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Clauses THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 179:
      /*! Production::    Case : Clauses Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Clauses Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Clauses Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 180:
      /*! Production::    Case : Multicondition THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Multicondition THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Multicondition THEN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 181:
      /*! Production::    Case : Multicondition THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Multicondition THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Multicondition THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 182:
      /*! Production::    Case : Multicondition Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Multicondition Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Multicondition Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 183:
      /*! Production::    Case : DEFAULT Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("DEFAULT Expression", ...[false, yy.Block.wrap(yyvstack[yysp])]), { rule: "DEFAULT Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 184:
      /*! Production::    Case : DEFAULT Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("DEFAULT Block", ...[false, yyvstack[yysp].unwrap]), { rule: "DEFAULT Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 185:
      /*! Production::    Case : Expression POSTCASE MulticheckClauses */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Case"]("Expression POSTCASE MulticheckClauses", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2])]), { rule: "Expression POSTCASE MulticheckClauses", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 186:
      /*! Production::    Case : BREAK */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Case"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 187:
      /*! Production::    Clauses : When */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Clauses"]("When", ...[yyvstack[yysp].contents]), { rule: "When", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 188:
      /*! Production::    Clauses : Clauses NEWLINE When */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Clauses"]("Clauses NEWLINE When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses NEWLINE When", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 189:
      /*! Production::    Clauses : Clauses COMPOUND_OR When */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Clauses"]("Clauses COMPOUND_OR When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses COMPOUND_OR When", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 190:
      /*! Production::    When : CASE Clause */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["When"]("CASE Clause", ...[...yyvstack[yysp].contents]), { rule: "CASE Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 191:
      /*! Production::    When : IF Clause */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["When"]("IF Clause", ...[...yyvstack[yysp].contents]), { rule: "IF Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 192:
      /*! Production::    When : WHEN Clause */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["When"]("WHEN Clause", ...[...yyvstack[yysp].contents]), { rule: "WHEN Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 193:
      /*! Production::    ForAny : FOR_FROM */
  case 194:
      /*! Production::    ForAny : FOR_AT */
  case 195:
      /*! Production::    ForAny : FOR_AS */
  case 277:
      /*! Production::    PropObj : Function */
  case 291:
      /*! Production::    PropObj : Assignment */
  case 297:
      /*! Production::    ParamPropObj : ParamIdentifier */
  case 414:
      /*! Production::    OptVoids : Voids */
  case 517:
      /*! Production::    Import(FROM) : FROM */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp]
      break;
  
  case 196:
      /*! Production::    If : IfBlock */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["If"]("IfBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 197:
      /*! Production::    If : IfBlock Else */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("IfBlock Else", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "IfBlock Else", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 198:
      /*! Production::    If : Expression "?" BlockExpression ":" BlockExpression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression : BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 4], yyvstack[yysp - 2].unwrap), new yy.Else('Else', yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression : BlockExpression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined })
      break;
  
  case 199:
      /*! Production::    If : Expression "?" BlockExpression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 2], yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined })
      break;
  
  case 200:
      /*! Production::    If : Expression "?" INDENT BlockExpression ":" BlockExpression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Expression ? INDENT BlockExpression : BlockExpression OUTDENT", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 6], yyvstack[yysp - 3].unwrap), new yy.Else('Else', yyvstack[yysp - 1].unwrap)]), { rule: "Expression ? INDENT BlockExpression : BlockExpression OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined })
      break;
  
  case 201:
      /*! Production::    If : Expression POSTIF Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Expression POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTIF Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true}, { generated: undefined })
      break;
  
  case 202:
      /*! Production::    If : Statement POSTIF Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Statement POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTIF Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true}, { generated: undefined })
      break;
  
  case 203:
      /*! Production::    If : Expression POSTUNLESS Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Expression POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"unless":true}, { generated: undefined })
      break;
  
  case 204:
      /*! Production::    If : Statement POSTUNLESS Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["If"]("Statement POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true,"unless":true}, { generated: undefined })
      break;
  
  case 205:
      /*! Production::    BlockExpression : Expression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["BlockExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 206:
      /*! Production::    BlockExpression : INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["BlockExpression"]("INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 207:
      /*! Production::    TryBlock : Try */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TryBlock"]("Try", ...[yyvstack[yysp], null, null]), { rule: "Try", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 208:
      /*! Production::    TryBlock : Try Catch */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TryBlock"]("Try Catch", ...[yyvstack[yysp - 1], yyvstack[yysp], null]), { rule: "Try Catch", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 209:
      /*! Production::    TryBlock : Try Catch Finally */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TryBlock"]("Try Catch Finally", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Try Catch Finally", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 210:
      /*! Production::    Try : TRY Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Try"]("TRY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "TRY Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 211:
      /*! Production::    Try : TRY Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Try"]("TRY Block", ...[yyvstack[yysp]]), { rule: "TRY Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 212:
      /*! Production::    Finally : FINALLY Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Finally"]("FINALLY Block", ...[yyvstack[yysp]]), { rule: "FINALLY Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 213:
      /*! Production::    Finally : FINALLY Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Finally"]("FINALLY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "FINALLY Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 214:
      /*! Production::    Catch : CATCH Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Catch"]("CATCH Block", ...[null, yyvstack[yysp]]), { rule: "CATCH Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 215:
      /*! Production::    Catch : CATCH Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Catch"]("CATCH Expression", ...[null, yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 216:
      /*! Production::    Catch : CATCH Identifier Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Catch"]("CATCH Identifier Block", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "CATCH Identifier Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 217:
      /*! Production::    Catch : CATCH Identifier THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "CATCH Identifier THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 218:
      /*! Production::    Catch : CATCH Identifier THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Identifier THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 219:
      /*! Production::    While : WhileUntil Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap, yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 220:
      /*! Production::    While : WhileUntil Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 221:
      /*! Production::    While : WhileUntil "(" Expression ")" Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("WhileUntil ( Expression ) Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4]]), { rule: "WhileUntil ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 222:
      /*! Production::    While : WhileUntil Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("WhileUntil Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap, yyvstack[yysp - 2]]), { rule: "WhileUntil Expression Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 223:
      /*! Production::    While : Loop WhileUntil Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("Loop WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 2].unwrap, yyvstack[yysp - 1]]), { rule: "Loop WhileUntil Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 224:
      /*! Production::    While : Loop NEWLINE WhileUntil Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("Loop NEWLINE WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 3].unwrap, yyvstack[yysp - 1]]), { rule: "Loop NEWLINE WhileUntil Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 225:
      /*! Production::    While : Expression WhileUntil Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["While"]("Expression WhileUntil Expression", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2]), yyvstack[yysp - 1]]), { rule: "Expression WhileUntil Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 226:
      /*! Production::    WhileUntil : WHILE */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["WhileUntil"]("WHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 227:
      /*! Production::    WhileUntil : UNTIL */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["WhileUntil"]("UNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 228:
      /*! Production::    Loop : LOOP Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Loop"]("LOOP Block", ...[yyvstack[yysp].unwrap]), { rule: "LOOP Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 229:
      /*! Production::    Loop : LOOP Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Loop"]("LOOP Expression", ...[yy.Block.wrap(yyvstack[yysp]).unwrap]), { rule: "LOOP Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 230:
      /*! Production::    Else : ElseOtherwise Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Else"]("ElseOtherwise Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 231:
      /*! Production::    Else : ElseOtherwise Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Else"]("ElseOtherwise Expression", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 232:
      /*! Production::    Else : ElseOtherwise Statement */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Else"]("ElseOtherwise Statement", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Statement", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 233:
      /*! Production::    Else : ElseOtherwise THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Else"]("ElseOtherwise THEN Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 234:
      /*! Production::    IfBlock : IfUnless Expression Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "IfUnless Expression Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 235:
      /*! Production::    IfBlock : IfUnless Expression THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 236:
      /*! Production::    IfBlock : IfUnless Expression THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 237:
      /*! Production::    IfBlock : IfUnless "(" Expression ")" Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless ( Expression ) Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 4]]), { rule: "IfUnless ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 238:
      /*! Production::    IfBlock : IfUnless Expression THEN Statement */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Statement", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Statement", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 239:
      /*! Production::    IfBlock : IfUnless Expression "{" Expression "}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression { Expression }", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp - 4]]), { rule: "IfUnless Expression { Expression }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 240:
      /*! Production::    IfBlock : IfUnless Expression THEN "{" Expression "}" */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Expression }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Expression }", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 241:
      /*! Production::    IfBlock : IfUnless Expression THEN "{" Statement "}" */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Statement }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Statement }", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 242:
      /*! Production::    IfUnless : IF */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["IfUnless"]("IF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 243:
      /*! Production::    IfUnless : UNLESS */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["IfUnless"]("UNLESS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 244:
      /*! Production::    ElseOtherwise : ELSE */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ElseOtherwise"]("ELSE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 245:
      /*! Production::    ElseOtherwise : OTHERWISE */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ElseOtherwise"]("OTHERWISE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 246:
      /*! Production::    ElseOtherwise : OR */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ElseOtherwise"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 247:
      /*! Production::    Value : Assignable */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("Assignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 248:
      /*! Production::    Value : Parenthetical */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("Parenthetical", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 249:
      /*! Production::    Value : Literal */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 250:
      /*! Production::    Value : Invocation */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("Invocation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 251:
      /*! Production::    Value : Function */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 252:
      /*! Production::    Value : New */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("New", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 253:
      /*! Production::    Value : This */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("This", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 254:
      /*! Production::    Value : Super */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("Super", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 255:
      /*! Production::    Value : SUCH */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Value"]("SUCH", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 256:
      /*! Production::    New : NEW Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["New"]("NEW Expression", ...[yyvstack[yysp]]), { rule: "NEW Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 257:
      /*! Production::    Super : SUPER "." PROPERTY */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Super"]("SUPER . PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] })]), { rule: "SUPER . PROPERTY", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 258:
      /*! Production::    Super : SUPER INDEX_START PROPERTY INDEX_END */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Super"]("SUPER INDEX_START PROPERTY INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "SUPER INDEX_START PROPERTY INDEX_END", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 259:
      /*! Production::    This : THIS */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["This"]("THIS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 260:
      /*! Production::    Parenthetical : "(" Expression ")" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Parenthetical"]("( Expression )", ...[yyvstack[yysp - 1]]), { rule: "( Expression )", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 261:
      /*! Production::    Parenthetical : "(" Body ")" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Parenthetical"]("( Body )", ...[yyvstack[yysp - 1]]), { rule: "( Body )", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 262:
      /*! Production::    Parenthetical : "(" INDENT Body OUTDENT ")" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Parenthetical"]("( INDENT Body OUTDENT )", ...[yyvstack[yysp - 2]]), { rule: "( INDENT Body OUTDENT )", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 263:
      /*! Production::    ParamObject : "{" ParamPropList "}" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamObject"]("{ ParamPropList }", ...[yyvstack[yysp - 1]]), { rule: "{ ParamPropList }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 264:
      /*! Production::    ParamObject : "{" "}" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamObject"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 265:
      /*! Production::    Object : "{" "}" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Object"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 266:
      /*! Production::    Object : "{" PropList OptComma "}" */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Object"]("{ PropList OptComma }", ...[yyvstack[yysp - 2]]), { rule: "{ PropList OptComma }", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 267:
      /*! Production::    Object : "{" INDENT PropList OUTDENT "}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Object"]("{ INDENT PropList OUTDENT }", ...[yyvstack[yysp - 2]]), { rule: "{ INDENT PropList OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined })
      break;
  
  case 268:
      /*! Production::    PropList : PropObj */
  case 273:
      /*! Production::    ParamPropList : ParamPropObj */
  case 407:
      /*! Production::    ParamArrayArg : ParamAssignable */
  case 411:
      /*! Production::    ArrayArg : Expression */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp]]
      break;
  
  case 269:
      /*! Production::    PropList : PropList "," PropObj */
  case 274:
      /*! Production::    ParamPropList : ParamPropList "," ParamPropObj */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 2].push(yyvstack[yysp]) && yyvstack[yysp - 2]
      break;
  
  case 270:
      /*! Production::    PropList : PropList OptComma NEWLINE PropObj */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 3].push(yylstack[yysp - 1].generated, yyvstack[yysp]) && yyvstack[yysp - 3]
      break;
  
  case 271:
      /*! Production::    PropList : PropList OptComma INDENT PropList OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 4].concat(false, ...[yyvstack[yysp - 1]])
      break;
  
  case 272:
      /*! Production::    ParamPropList : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = []
      break;
  
  case 275:
      /*! Production::    ParamPropList : ParamPropList OptComma NEWLINE ParamPropObj */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 3].push(yyvstack[yysp]) && yyvstack[yysp - 3]
      break;
  
  case 276:
      /*! Production::    ParamPropList : ParamPropList OptComma INDENT ParamPropObj OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 4].push(yyvstack[yysp - 1]) && yyvstack[yysp - 4]
      break;
  
  case 278:
      /*! Production::    PropObj : PROPERTY ":" Expression */
  case 281:
      /*! Production::    PropObj : AlphaNum ":" Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 2], yyvstack[yysp], [yylstack[yysp - 2], yylstack[yysp]]]
      break;
  
  case 279:
      /*! Production::    PropObj : PROPERTY ":" Block */
  case 282:
      /*! Production::    PropObj : AlphaNum ":" Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 2], yylstack[yysp], true]]
      break;
  
  case 280:
      /*! Production::    PropObj : PROPERTY ":" INDENT Expression OUTDENT */
  case 283:
      /*! Production::    PropObj : AlphaNum ":" INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 4], yyvstack[yysp - 1], [yylstack[yysp - 4], yylstack[yysp], true]]
      break;
  
  case 284:
      /*! Production::    PropObj : "[" Expression "]" ":" Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 3], yyvstack[yysp], [yylstack[yysp - 4], yylstack[yysp]]]
      break;
  
  case 285:
      /*! Production::    PropObj : "[" Expression "]" ":" INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 5], yyvstack[yysp - 1], [yylstack[yysp - 6], yylstack[yysp - 1], true]]
      break;
  
  case 286:
      /*! Production::    PropObj : "[" Expression "]" ":" Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 3], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 4], yylstack[yysp], true]]
      break;
  
  case 287:
      /*! Production::    PropObj : PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 1], yylstack[yysp]]]
      break;
  
  case 288:
      /*! Production::    PropObj : "..." PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 2], yylstack[yysp]], true]
      break;
  
  case 289:
      /*! Production::    PropObj : PROPERTY ":" "..." */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 2], false, [yylstack[yysp - 2], yylstack[yysp]], true]
      break;
  
  case 290:
      /*! Production::    PropObj : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp][1], false, [yylstack[yysp], yylstack[yysp]]]
      break;
  
  case 292:
      /*! Production::    PropObj : "..." Value */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp]
      break;
  
  case 293:
      /*! Production::    PropObj : Value "..." */
  case 527:
      /*! Production::    OptDefault : Identifier "," */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 1]
      break;
  
  case 294:
      /*! Production::    ParamPropObj : PROPERTY ":" ParamAssignable */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 2], yyvstack[yysp]]
      break;
  
  case 295:
      /*! Production::    ParamPropObj : PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 1]]
      break;
  
  case 296:
      /*! Production::    ParamPropObj : PROPERTY ":" DEFAULTS Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 3],,yyvstack[yysp]]
      break;
  
  case 298:
      /*! Production::    ParamPropObj : ParamIdentifier DEFAULTS Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 2],,yyvstack[yysp]]
      break;
  
  case 299:
      /*! Production::    ParamPropObj : "..." PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 1],,,true]
      break;
  
  case 300:
      /*! Production::    ParamPropObj : PROPERTY ":" "..." */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [yyvstack[yysp - 2],,,true]
      break;
  
  case 301:
      /*! Production::    Literal : AlphaNum */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("AlphaNum", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 302:
      /*! Production::    Literal : Regex */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 303:
      /*! Production::    Literal : UNDEFINED */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("UNDEFINED", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 304:
      /*! Production::    Literal : INFINITY */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("INFINITY", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 305:
      /*! Production::    Literal : BOOL */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("BOOL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 306:
      /*! Production::    Literal : NULL */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("NULL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 307:
      /*! Production::    Literal : NAN */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Literal"]("NAN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 308:
      /*! Production::    AlphaNum : String */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["AlphaNum"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 309:
      /*! Production::    AlphaNum : NUMBER */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["AlphaNum"]("NUMBER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 310:
      /*! Production::    String : STRING */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["String"]("STRING", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 311:
      /*! Production::    String : StringWithInterpolations */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["String"]("StringWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 312:
      /*! Production::    StringWithInterpolations : STRING_START Interpolations STRING_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["StringWithInterpolations"]("STRING_START Interpolations STRING_END", ...[yyvstack[yysp - 1], yyvstack[yysp - 2]]), { rule: "STRING_START Interpolations STRING_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 313:
      /*! Production::    Interpolations : Interpolation */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Interpolations"]("Interpolation", ...[yyvstack[yysp]]), { rule: "Interpolation", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 314:
      /*! Production::    Interpolations : Interpolations Interpolation */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Interpolations"]("Interpolations Interpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "Interpolations Interpolation", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 315:
      /*! Production::    Interpolation : INTERPOLATION_START Expression INTERPOLATION_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Interpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 316:
      /*! Production::    Interpolation : String */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Interpolation"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 317:
      /*! Production::    Regex : REGEX */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Regex"]("REGEX", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 318:
      /*! Production::    Regex : RegexWithInterpolations */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Regex"]("RegexWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 319:
      /*! Production::    RegexWithInterpolations : REGEX_START RegexInterpolations REGEX_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["RegexWithInterpolations"]("REGEX_START RegexInterpolations REGEX_END", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "REGEX_START RegexInterpolations REGEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 320:
      /*! Production::    RegexInterpolations : RegexInterpolation */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolation", ...[yyvstack[yysp]]), { rule: "RegexInterpolation", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 321:
      /*! Production::    RegexInterpolations : RegexInterpolations RegexInterpolation */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolations RegexInterpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "RegexInterpolations RegexInterpolation", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 322:
      /*! Production::    RegexInterpolation : INTERPOLATION_START Expression INTERPOLATION_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["RegexInterpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 323:
      /*! Production::    RegexInterpolation : Regex */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["RegexInterpolation"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 324:
      /*! Production::    Function : FuncHeader */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FuncHeader", ...[yyvstack[yysp].contents, yy.Block.wrap(), { arguments: yyvstack[yysp][3] }]), { rule: "FuncHeader", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 325:
      /*! Production::    Function : FuncHeader FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 326:
      /*! Production::    Function : FuncSpecifiers FuncHeader FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FuncSpecifiers FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { ...yyvstack[yysp - 2].unwrap, arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FuncSpecifiers FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 327:
      /*! Production::    Function : FUNCTION FuncHeader FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FUNCTION FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { yields: yylstack[yysp - 2].origin === 'function*', arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 328:
      /*! Production::    Function : ASYNC FUNCTION FuncHeader FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 2].origin === 'function*', arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 329:
      /*! Production::    Function : FUNCTION WITH FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FUNCTION WITH FuncBody", ...[[], yyvstack[yysp].unwrap, { yields: yylstack[yysp - 2].origin === 'function*', returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION WITH FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 330:
      /*! Production::    Function : FUNCTION WITH "<(" TypeArguments ")>" FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FUNCTION WITH <( TypeArguments )> FuncBody", ...[[], yyvstack[yysp].unwrap, { yields: yylstack[yysp - 5].origin === 'function*', arguments: yyvstack[yysp - 2], returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION WITH <( TypeArguments )> FuncBody", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 331:
      /*! Production::    Function : ASYNC FUNCTION WITH FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION WITH FuncBody", ...[[], yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 2].origin === 'function*', returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION WITH FuncBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 332:
      /*! Production::    Function : ASYNC FUNCTION WITH "<(" TypeArguments ")>" FuncBody */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION WITH <( TypeArguments )> FuncBody", ...[[], yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 5].origin === 'function*', arguments: yyvstack[yysp - 2], returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION WITH <( TypeArguments )> FuncBody", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 333:
      /*! Production::    Function : WITH Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("WITH Block", ...[[], yyvstack[yysp].unwrap, {}]), { rule: "WITH Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 334:
      /*! Production::    Function : WITH "<(" TypeArguments ")>" Block */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("WITH <( TypeArguments )> Block", ...[[], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 2] }]), { rule: "WITH <( TypeArguments )> Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 335:
      /*! Production::    Function : WITH "<(" TypeArguments ")>" THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("WITH <( TypeArguments )> THEN Block", ...[[], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 3], returns: [yylstack[yysp - 1].type].filter(Boolean) }]), { rule: "WITH <( TypeArguments )> THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 336:
      /*! Production::    Function : FUNC_DIRECTIVE Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Function"]("FUNC_DIRECTIVE Block", ...[[], yyvstack[yysp].unwrap]), { rule: "FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 337:
      /*! Production::    FuncBody : THEN Block */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncBody"]("THEN Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp - 1], yylstack[yysp])]), { rule: "THEN Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 338:
      /*! Production::    FuncBody : Block */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncBody"]("Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp])]), { rule: "Block", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 339:
      /*! Production::    FuncBody : THEN Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncBody"]("THEN Expression", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "THEN Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 340:
      /*! Production::    FuncSpecifiers : STATIC GET */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC GET", ...[{ static: true, get: true }]), { rule: "STATIC GET", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 341:
      /*! Production::    FuncSpecifiers : STATIC SET */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC SET", ...[{ static: true, set: true }]), { rule: "STATIC SET", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 342:
      /*! Production::    FuncSpecifiers : STATIC ASYNC */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC ASYNC", ...[{ static: true, async: true }]), { rule: "STATIC ASYNC", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 343:
      /*! Production::    FuncSpecifiers : GET */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("GET", ...[{ get: true }]), { rule: "GET", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 344:
      /*! Production::    FuncSpecifiers : SET */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("SET", ...[{ set: true }]), { rule: "SET", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 345:
      /*! Production::    FuncSpecifiers : STATIC */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC", ...[{ static: true }]), { rule: "STATIC", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 346:
      /*! Production::    FuncSpecifiers : ASYNC */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncSpecifiers"]("ASYNC", ...[{ async: true }]), { rule: "ASYNC", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 347:
      /*! Production::    FuncHeader : Identifier TypeArguments? Params */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? Params", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Identifier TypeArguments? Params", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 348:
      /*! Production::    FuncHeader : Identifier WITH TypeArguments? Params */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("Identifier WITH TypeArguments? Params", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Identifier WITH TypeArguments? Params", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 349:
      /*! Production::    FuncHeader : Identifier TypeArguments? WITH Params */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? WITH Params", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 350:
      /*! Production::    FuncHeader : WITH TypeArguments? Params */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("WITH TypeArguments? Params", ...[null, yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "WITH TypeArguments? Params", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 351:
      /*! Production::    FuncHeader : TypeArguments? WITH Params */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("TypeArguments? WITH Params", ...[null, yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":2,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 352:
      /*! Production::    FuncHeader : Identifier TypeArguments? */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments?", ...[yyvstack[yysp - 1], null, yyvstack[yysp].unwrap]), { rule: "Identifier TypeArguments?", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 353:
      /*! Production::    FuncHeader : Identifier TypeArguments? WITH */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? WITH", ...[yyvstack[yysp - 2], null, yyvstack[yysp - 1].unwrap]), { rule: "Identifier TypeArguments? WITH", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src } }, {"first":1,"last":3,"typeOf":0,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 354:
      /*! Production::    FuncHeader : Identifier WITH TypeArguments? */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("Identifier WITH TypeArguments?", ...[yyvstack[yysp - 2], null, yyvstack[yysp].unwrap]), { rule: "Identifier WITH TypeArguments?", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 2].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 355:
      /*! Production::    FuncHeader : TypeArguments? Params */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["FuncHeader"]("TypeArguments? Params", ...[null, yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "TypeArguments? Params", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":2,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 356:
      /*! Production::    TypeArguments? : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArguments?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 357:
      /*! Production::    TypeArguments? : "<(" TypeArguments ")>" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArguments?"]("<( TypeArguments )>", ...[yyvstack[yysp - 1]]), { rule: "<( TypeArguments )>", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 358:
      /*! Production::    TypeArguments? : "<(" INDENT TypeArguments OUTDENT ")>" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArguments?"]("<( INDENT TypeArguments OUTDENT )>", ...[yyvstack[yysp - 2]]), { rule: "<( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 359:
      /*! Production::    Params : PARAM_START PARAM_END */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Params"]("PARAM_START PARAM_END", ...[[]]), { rule: "PARAM_START PARAM_END", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 360:
      /*! Production::    Params : PARAM_START ParamList PARAM_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Params"]("PARAM_START ParamList PARAM_END", ...[yyvstack[yysp - 1].setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "PARAM_START ParamList PARAM_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 361:
      /*! Production::    ParamList : Param */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamList"]("Param", ...[yyvstack[yysp]]), { rule: "Param", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 362:
      /*! Production::    ParamList : ParamList "," Param */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamList"]("ParamList , Param", ...[...yyvstack[yysp - 2].addParam(yyvstack[yysp]).setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "ParamList , Param", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 363:
      /*! Production::    ParamList : ParamList OptComma NEWLINE Param */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma NEWLINE Param", ...[...yyvstack[yysp - 3].addParam(yyvstack[yysp])]), { rule: "ParamList OptComma NEWLINE Param", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 364:
      /*! Production::    ParamList : ParamList OptComma INDENT ParamList OptComma OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma INDENT ParamList OptComma OUTDENT", ...[...yyvstack[yysp - 5].addParams(yyvstack[yysp - 2].contents)]), { rule: "ParamList OptComma INDENT ParamList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 365:
      /*! Production::    Param : ParamAssignable */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Param"]("ParamAssignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 366:
      /*! Production::    Assign : Assignment */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Assign"]("Assignment", ...[yyvstack[yysp]]), { rule: "Assignment", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 367:
      /*! Production::    Assignment : Assignable AssignKeyword Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 368:
      /*! Production::    Assignment : Assignable AssignKeyword INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword INDENT Expression OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 3]]), { rule: "Assignable AssignKeyword INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 369:
      /*! Production::    Assignment : Assignable AssignKeyword NEWLINE Expression */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword NEWLINE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Assignable AssignKeyword NEWLINE Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 370:
      /*! Production::    Assignment : Assignable AssignKeyword Block */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Block", ...[yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 371:
      /*! Production::    AssignKeyword : AS */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["AssignKeyword"]("AS", ...[yylstack[yysp].origin]), { rule: "AS", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 372:
      /*! Production::    AssignKeyword : AT */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["AssignKeyword"]("AT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 373:
      /*! Production::    AssignKeyword : FROM */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["AssignKeyword"]("FROM", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 374:
      /*! Production::    Assignable : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Assignable"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 375:
      /*! Production::    Assignable : ARGUMENT */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Assignable"]("ARGUMENT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 376:
      /*! Production::    Assignable : Object */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Assignable"]("Object", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 377:
      /*! Production::    Assignable : Array */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Assignable"]("Array", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 378:
      /*! Production::    Assignable : Value Access */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Assignable"]("Value Access", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Access", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 379:
      /*! Production::    ParamAssignable : ParamIdentifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ParamAssignable"]("ParamIdentifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 380:
      /*! Production::    ParamAssignable : ParamObject */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ParamAssignable"]("ParamObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 381:
      /*! Production::    ParamAssignable : ParamObject DEFAULTS Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy.ParamAssignable('ParamObject', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
      break;
  
  case 382:
      /*! Production::    ParamAssignable : ParamArray */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ParamAssignable"]("ParamArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 383:
      /*! Production::    ParamAssignable : ParamArray DEFAULTS Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy.ParamAssignable('ParamArray', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
      break;
  
  case 384:
      /*! Production::    Identifier : IDENTIFIER */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Identifier"]("IDENTIFIER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 385:
      /*! Production::    ParamIdentifier : IDENTIFIER */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER", ...[yyvstack[yysp]]), { rule: "IDENTIFIER", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 386:
      /*! Production::    ParamIdentifier : "..." IDENTIFIER */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("... IDENTIFIER", ...[yyvstack[yysp]]), { rule: "... IDENTIFIER", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
      break;
  
  case 387:
      /*! Production::    ParamIdentifier : IDENTIFIER "..." */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER ...", ...[yyvstack[yysp - 1]]), { rule: "IDENTIFIER ...", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
      break;
  
  case 388:
      /*! Production::    ParamIdentifier : IDENTIFIER DEFAULTS Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER DEFAULTS Expression", ...[yyvstack[yysp - 2],,yyvstack[yysp]]), { rule: "IDENTIFIER DEFAULTS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 389:
      /*! Production::    ParamIdentifier : THIS "." PROPERTY */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "THIS . PROPERTY", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 390:
      /*! Production::    ParamIdentifier : THIS "." PROPERTY DEFAULTS Expression */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY DEFAULTS Expression", ...[yyvstack[yysp - 2],true,yyvstack[yysp]]), { rule: "THIS . PROPERTY DEFAULTS Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 391:
      /*! Production::    ParamIdentifier : THIS "." PROPERTY "..." */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY ...", ...[yyvstack[yysp - 1], true]), { rule: "THIS . PROPERTY ...", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
      break;
  
  case 392:
      /*! Production::    ParamIdentifier : "..." THIS "." PROPERTY */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamIdentifier"]("... THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "... THIS . PROPERTY", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
      break;
  
  case 393:
      /*! Production::    Access : "." PROPERTY */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Access"](". PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] }), yylstack[yysp - 1].origin === '?.']), { rule: ". PROPERTY", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 394:
      /*! Production::    Access : INDEX_START Expression INDEX_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Access"]("INDEX_START Expression INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "INDEX_START Expression INDEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 395:
      /*! Production::    ParamArray : "[" "]" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamArray"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 396:
      /*! Production::    ParamArray : "[" ParamArrayList OptVoids "]" */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ParamArray"]("[ ParamArrayList OptVoids ]", ...[yyvstack[yysp - 2]]), { rule: "[ ParamArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 397:
      /*! Production::    Array : "[" "]" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Array"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 1].generated })
      break;
  
  case 398:
      /*! Production::    Array : "[" ArrayList OptVoids "]" */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Array"]("[ ArrayList OptVoids ]", ...[...yyvstack[yysp - 2]]), { rule: "[ ArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 3].generated })
      break;
  
  case 399:
      /*! Production::    Array : "[" INDENT ArrayList OptVoids OUTDENT "]" */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Array"]("[ INDENT ArrayList OptVoids OUTDENT ]", ...[...yyvstack[yysp - 3]]), { rule: "[ INDENT ArrayList OptVoids OUTDENT ]", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":1,"indented":true}, { generated: yylstack[yysp - 5].generated })
      break;
  
  case 400:
      /*! Production::    ParamArrayList : ParamArrayArg */
  case 403:
      /*! Production::    ArrayList : ArrayArg */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [...yyvstack[yysp]]
      break;
  
  case 401:
      /*! Production::    ParamArrayList : ParamArrayList "," ParamArrayArg */
  case 404:
      /*! Production::    ArrayList : ArrayList "," ArrayArg */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp])
      break;
  
  case 402:
      /*! Production::    ParamArrayList : ParamArrayList OptComma NEWLINE ParamArrayArg */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 3].concat(yyvstack[yysp])
      break;
  
  case 405:
      /*! Production::    ArrayList : ArrayList OptComma INDENT ArrayList OptVoids OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 5].concat(false, yyvstack[yysp - 2])
      break;
  
  case 406:
      /*! Production::    ArrayList : ArrayList OptComma NEWLINE ArrayArg */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 3].concat(yylstack[yysp - 1].generated, yyvstack[yysp])
      break;
  
  case 408:
      /*! Production::    ParamArrayArg : Voids ParamAssignable */
  case 412:
      /*! Production::    ArrayArg : Voids Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [...yyvstack[yysp - 1], yyvstack[yysp]]
      break;
  
  case 409:
      /*! Production::    ArrayArg : "..." Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [Object.assign(yyvstack[yysp], { expansion: true })]
      break;
  
  case 410:
      /*! Production::    ArrayArg : Expression "..." */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [Object.assign(yyvstack[yysp - 1], { expansion: true })]
      break;
  
  case 413:
      /*! Production::    OptVoids : %epsilon */
  case 526:
      /*! Production::    OptDefault : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = undefined
      break;
  
  case 415:
      /*! Production::    Voids : "," */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [null]
      break;
  
  case 416:
      /*! Production::    Voids : "," Voids */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [null, ...yyvstack[yysp - 1]]
      break;
  
  case 417:
      /*! Production::    Voids : "," NEWLINE Voids */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = [null, ...yyvstack[yysp - 1]]
      break;
  
  case 418:
      /*! Production::    Statement : Return */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("Return", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 419:
      /*! Production::    Statement : BREAK Identifier */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Statement"]("BREAK Identifier", ...[yyvstack[yysp]]), { rule: "BREAK Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 420:
      /*! Production::    Statement : BREAK */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 421:
      /*! Production::    Statement : CONTINUE Identifier */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Statement"]("CONTINUE Identifier", ...[yyvstack[yysp]]), { rule: "CONTINUE Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 422:
      /*! Production::    Statement : CONTINUE */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("CONTINUE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 423:
      /*! Production::    Statement : Import */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("Import", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 424:
      /*! Production::    Statement : Export */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("Export", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 425:
      /*! Production::    Statement : Declare */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 426:
      /*! Production::    Statement : THROW Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Statement"]("THROW Expression", ...[yyvstack[yysp]]), { rule: "THROW Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 427:
      /*! Production::    Statement : THROW INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Statement"]("THROW INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "THROW INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 428:
      /*! Production::    Statement : Type */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("Type", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 429:
      /*! Production::    Statement : Interface */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Statement"]("Interface", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 430:
      /*! Production::    Interface : INTERFACE Identifier TypeArguments? InterfaceBody */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? InterfaceBody", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "INTERFACE Identifier TypeArguments? InterfaceBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 431:
      /*! Production::    Interface : INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 432:
      /*! Production::    InterfaceBody : "{" "}" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceBody"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 433:
      /*! Production::    InterfaceBody : "{" InterfaceProperties "}" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceBody"]("{ InterfaceProperties }", ...[yyvstack[yysp - 1].contents]), { rule: "{ InterfaceProperties }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 434:
      /*! Production::    InterfaceBody : "{" INDENT InterfaceProperties OUTDENT "}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceBody"]("{ INDENT InterfaceProperties OUTDENT }", ...[yyvstack[yysp - 2].contents]), { rule: "{ INDENT InterfaceProperties OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 435:
      /*! Production::    InterfaceProperties : InterfaceProperty */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["InterfaceProperties"]("InterfaceProperty", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 436:
      /*! Production::    InterfaceProperties : InterfaceProperties "," InterfaceProperty */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties , InterfaceProperty", ...[...yyvstack[yysp - 2].unwrap, yyvstack[yysp]]), { rule: "InterfaceProperties , InterfaceProperty", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 437:
      /*! Production::    InterfaceProperties : InterfaceProperties OptComma NEWLINE InterfaceProperty */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma NEWLINE InterfaceProperty", ...[...yyvstack[yysp - 3].unwrap, yyvstack[yysp]]), { rule: "InterfaceProperties OptComma NEWLINE InterfaceProperty", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 438:
      /*! Production::    InterfaceProperties : InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT", ...[...yyvstack[yysp - 4].unwrap, yyvstack[yysp - 1]]), { rule: "InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 439:
      /*! Production::    InterfaceProperty : InterfaceKeyword? TypeArguments? Identifier? Params ":" TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceProperty"]("InterfaceKeyword? TypeArguments? Identifier? Params : TypeSentence", ...[yyvstack[yysp - 3].unwrap, yyvstack[yysp], yyvstack[yysp - 2], { ...yyvstack[yysp - 5].unwrap, arguments: yyvstack[yysp - 4].unwrap, optional: yylstack[yysp - 4].origin === "?:" }]), { rule: "InterfaceKeyword? TypeArguments? Identifier? Params : TypeSentence", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 440:
      /*! Production::    InterfaceProperty : PROPERTY ":" TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceProperty"]("PROPERTY : TypeSentence", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], null, { optional: yylstack[yysp - 1].origin === "?:" }]), { rule: "PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 441:
      /*! Production::    InterfaceProperty : READONLY PROPERTY ":" TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY PROPERTY : TypeSentence", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], null, { optional: yylstack[yysp - 1].origin === "?:", readonly: true }]), { rule: "READONLY PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 442:
      /*! Production::    InterfaceKeyword? : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceKeyword?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 443:
      /*! Production::    InterfaceKeyword? : NEW */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceKeyword?"]("NEW", ...[{ new: true }]), { rule: "NEW", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 444:
      /*! Production::    InterfaceKeyword? : READONLY */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["InterfaceKeyword?"]("READONLY", ...[{ readonly: true }]), { rule: "READONLY", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 445:
      /*! Production::    Identifier? : %epsilon */
  
      // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
      // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Identifier?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 446:
      /*! Production::    Identifier? : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Identifier?"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 447:
      /*! Production::    Type : TYPE TypeDeclaration */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Type"]("TYPE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE TypeDeclaration", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 448:
      /*! Production::    Type : TYPE INDENT TypeDeclaration OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Type"]("TYPE INDENT TypeDeclaration OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "TYPE INDENT TypeDeclaration OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 449:
      /*! Production::    Type : TYPE NEWLINE TypeDeclaration */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Type"]("TYPE NEWLINE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE NEWLINE TypeDeclaration", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 450:
      /*! Production::    TypeDeclaration : Identifier TypeArguments? AS TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS TypeSentence", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? AS TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 451:
      /*! Production::    TypeDeclaration : Identifier TypeArguments? AS INDENT TypeSentence OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 5], yyvstack[yysp - 1], yyvstack[yysp - 4].unwrap]), { rule: "Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 452:
      /*! Production::    TypeDeclaration : Identifier TypeArguments? AS NEWLINE TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS NEWLINE TypeSentence", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 3].unwrap]), { rule: "Identifier TypeArguments? AS NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 453:
      /*! Production::    TypeSentence : TypeSentence "&" TypeValue */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & TypeValue", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "TypeSentence & TypeValue", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 454:
      /*! Production::    TypeSentence : TypeSentence "|" TypeValue */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | TypeValue", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "TypeSentence | TypeValue", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 455:
      /*! Production::    TypeSentence : TypeSentence "&" INDENT TypeValue OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & INDENT TypeValue OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeSentence & INDENT TypeValue OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 456:
      /*! Production::    TypeSentence : TypeSentence "|" INDENT TypeValue OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | INDENT TypeValue OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeSentence | INDENT TypeValue OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 457:
      /*! Production::    TypeSentence : TypeSentence "&" NEWLINE TypeValue */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & NEWLINE TypeValue", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "TypeSentence & NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 458:
      /*! Production::    TypeSentence : TypeSentence "|" NEWLINE TypeValue */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | NEWLINE TypeValue", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "TypeSentence | NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 459:
      /*! Production::    TypeSentence : TypeValue */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeSentence"]("TypeValue", ...[yyvstack[yysp]]), { rule: "TypeValue", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 460:
      /*! Production::    TypeValue : TypeArray */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeValue"]("TypeArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 461:
      /*! Production::    TypeValue : TypeObject */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeValue"]("TypeObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 462:
      /*! Production::    TypeValue : Literal */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeValue"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 463:
      /*! Production::    TypeValue : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeValue"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 464:
      /*! Production::    TypeValue : TAG */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeValue"]("TAG", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 465:
      /*! Production::    TypeValue : TypeWithArguments */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeValue"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 466:
      /*! Production::    TypeWithArguments : "(" TypeSentence ")" INDEX_START INDEX_END */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeWithArguments"]("( TypeSentence ) INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 3] }]), { rule: "( TypeSentence ) INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 467:
      /*! Production::    TypeWithArguments : TypeValue INDEX_START INDEX_END */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeWithArguments"]("TypeValue INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 2] }]), { rule: "TypeValue INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 468:
      /*! Production::    TypeWithArguments : Identifier "<(" TypeArguments ")>" */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( TypeArguments )>", ...[{ type: yyvstack[yysp - 3], arguments: yyvstack[yysp - 1] }]), { rule: "Identifier <( TypeArguments )>", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 469:
      /*! Production::    TypeWithArguments : Identifier "<(" INDENT TypeArguments OUTDENT ")>" */
  
      // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
      // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( INDENT TypeArguments OUTDENT )>", ...[{ type: yyvstack[yysp - 5], arguments: yyvstack[yysp - 2] }]), { rule: "Identifier <( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 470:
      /*! Production::    TypeArguments : TypeArgument */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeArguments"]("TypeArgument", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 471:
      /*! Production::    TypeArguments : TypeArguments "," TypeArgument */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments , TypeArgument", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArguments , TypeArgument", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 472:
      /*! Production::    TypeArguments : TypeArguments OptComma NEWLINE TypeArgument */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma NEWLINE TypeArgument", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArguments OptComma NEWLINE TypeArgument", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 473:
      /*! Production::    TypeArguments : TypeArguments OptComma INDENT TypeArgument OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma INDENT TypeArgument OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArguments OptComma INDENT TypeArgument OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 474:
      /*! Production::    TypeArgument : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArgument"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 475:
      /*! Production::    TypeArgument : Identifier EXTENDS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArgument"]("Identifier EXTENDS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier EXTENDS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 476:
      /*! Production::    TypeArgument : TypeWithArguments */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeArgument"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 477:
      /*! Production::    TypeObject : "{" TypeObjProps "}" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObject"]("{ TypeObjProps }", ...[...yyvstack[yysp - 1].contents]), { rule: "{ TypeObjProps }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 478:
      /*! Production::    TypeObject : "{" INDENT TypeObjProps OUTDENT "}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObject"]("{ INDENT TypeObjProps OUTDENT }", ...[...yyvstack[yysp - 2].contents]), { rule: "{ INDENT TypeObjProps OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 479:
      /*! Production::    TypeObjProps : TypeObjProps OptComma NEWLINE TypeObjProp */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma NEWLINE TypeObjProp", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeObjProps OptComma NEWLINE TypeObjProp", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 480:
      /*! Production::    TypeObjProps : TypeObjProps "," TypeObjProp */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps , TypeObjProp", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeObjProps , TypeObjProp", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 481:
      /*! Production::    TypeObjProps : TypeObjProps OptComma INDENT TypeObjProp OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma INDENT TypeObjProp OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeObjProps OptComma INDENT TypeObjProp OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 482:
      /*! Production::    TypeObjProps : TypeObjProp */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeObjProps"]("TypeObjProp", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 483:
      /*! Production::    TypeObjProp : PROPERTY ":" TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : TypeSentence", ...[yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1].origin === '?:']), { rule: "PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 484:
      /*! Production::    TypeObjProp : PROPERTY ":" NEWLINE TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : NEWLINE TypeSentence", ...[yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2].origin === '?:']), { rule: "PROPERTY : NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 485:
      /*! Production::    TypeObjProp : PROPERTY ":" INDENT TypeSentence OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yylstack[yysp - 3].origin === '?:']), { rule: "PROPERTY : INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 486:
      /*! Production::    TypeObjProp : PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY :", ...[yyvstack[yysp - 1], , yylstack[yysp].origin === '?:']), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 487:
      /*! Production::    TypeObjProp : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeObjProp"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 488:
      /*! Production::    TypeArray : "[" TypeArrayItems "]" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArray"]("[ TypeArrayItems ]", ...[...yyvstack[yysp - 1].contents]), { rule: "[ TypeArrayItems ]", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 489:
      /*! Production::    TypeArray : "[" INDENT TypeArrayItems OUTDENT "]" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArray"]("[ INDENT TypeArrayItems OUTDENT ]", ...[...yyvstack[yysp - 2].contents]), { rule: "[ INDENT TypeArrayItems OUTDENT ]", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 490:
      /*! Production::    TypeArrayItems : TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["TypeArrayItems"]("TypeSentence", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 491:
      /*! Production::    TypeArrayItems : TypeArrayItems OptComma NEWLINE TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma NEWLINE TypeSentence", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArrayItems OptComma NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 492:
      /*! Production::    TypeArrayItems : TypeArrayItems OptComma INDENT TypeSentence OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma INDENT TypeSentence OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArrayItems OptComma INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 493:
      /*! Production::    TypeArrayItems : TypeArrayItems "," TypeSentence */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems , TypeSentence", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArrayItems , TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 494:
      /*! Production::    Declare : DeclarationKeyword Declarations */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword Declarations", ...[{ keyword: yyvstack[yysp - 1], statements: yyvstack[yysp] }, [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "DeclarationKeyword Declarations", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 495:
      /*! Production::    Declare : DeclarationKeyword INDENT Declarations OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword INDENT Declarations OUTDENT", ...[{ keyword: yyvstack[yysp - 3], statements: yyvstack[yysp - 1], indented: true }, [yylstack[yysp - 3], yylstack[yysp - 1]]]), { rule: "DeclarationKeyword INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 496:
      /*! Production::    DeclarationKeyword : VAR */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["DeclarationKeyword"]("VAR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 497:
      /*! Production::    DeclarationKeyword : LET */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["DeclarationKeyword"]("LET", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 498:
      /*! Production::    DeclarationKeyword : CONST */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["DeclarationKeyword"]("CONST", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 499:
      /*! Production::    Declarations : Declaration */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Declarations"]("Declaration", ...[yyvstack[yysp].unwrap]), { rule: "Declaration", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 500:
      /*! Production::    Declarations : Declarations "," Declaration */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Declarations"]("Declarations , Declaration", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].unwrap]), { rule: "Declarations , Declaration", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 501:
      /*! Production::    Declarations : Declarations OptComma NEWLINE Declaration */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma NEWLINE Declaration", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp].unwrap]), { rule: "Declarations OptComma NEWLINE Declaration", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 502:
      /*! Production::    Declarations : Declarations OptComma INDENT Declarations OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma INDENT Declarations OUTDENT", ...[...yyvstack[yysp - 4].contents, false, ...yyvstack[yysp - 1].contents]), { rule: "Declarations OptComma INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 503:
      /*! Production::    Declaration : Assignment */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Declaration"]("Assignment", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 504:
      /*! Production::    Declaration : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Declaration"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 505:
      /*! Production::    Return : RETURN */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Return"]("RETURN", ...[/* */]), { rule: "RETURN", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 506:
      /*! Production::    Return : RETURN Expression */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Return"]("RETURN Expression", ...[yyvstack[yysp]]), { rule: "RETURN Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 507:
      /*! Production::    Return : RETURN INDENT Expression OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Return"]("RETURN INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 508:
      /*! Production::    Return : RETURN INDENT Body OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Return"]("RETURN INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 509:
      /*! Production::    Import : IMPORT OptDefault ImportList Import(FROM) STRING */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault ImportList Import(FROM) STRING", ...[yyvstack[yysp - 2].contents, yyvstack[yysp], false, yyvstack[yysp - 3]]), { rule: "IMPORT OptDefault ImportList Import(FROM) STRING", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 510:
      /*! Production::    Import : IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 4]]), { rule: "IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 511:
      /*! Production::    Import : IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 512:
      /*! Production::    Import : IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING", ...[yyvstack[yysp - 3].contents, yyvstack[yysp], false, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 513:
      /*! Production::    Import : IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
      // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 4].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 6]]), { rule: "IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 514:
      /*! Production::    Import : IMPORT OptDefault "*" AS Identifier Import(FROM) STRING */
  
      // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
      // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault * AS Identifier Import(FROM) STRING", ...[yyvstack[yysp - 2], yyvstack[yysp], true, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault * AS Identifier Import(FROM) STRING", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 515:
      /*! Production::    Import : IMPORT INDENT OptDefault "*" AS Identifier Import(FROM) STRING OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
      // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault * AS Identifier Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], true, yyvstack[yysp - 6]]), { rule: "IMPORT INDENT OptDefault * AS Identifier Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 516:
      /*! Production::    Import : IMPORT OptDefault INDENT "*" AS Identifier Import(FROM) STRING OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
      // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT * AS Identifier Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], true, yyvstack[yysp - 7]]), { rule: "IMPORT OptDefault INDENT * AS Identifier Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 518:
      /*! Production::    Export : EXPORT ExportList */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT ExportList", ...[{ list: yyvstack[yysp] }]), { rule: "EXPORT ExportList", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 519:
      /*! Production::    Export : EXPORT INDENT ExportList OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT INDENT ExportList OUTDENT", ...[{ list: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT ExportList OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 520:
      /*! Production::    Export : EXPORT DEFAULT Expression */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT DEFAULT Expression", ...[{ defaults: yyvstack[yysp] }]), { rule: "EXPORT DEFAULT Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 521:
      /*! Production::    Export : EXPORT INDENT DEFAULT Expression OUDENT */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT INDENT DEFAULT Expression OUDENT", ...[{ defaults: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT DEFAULT Expression OUDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 522:
      /*! Production::    Export : EXPORT Declare */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT Declare", ...[{ declarations: yyvstack[yysp] }]), { rule: "EXPORT Declare", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 523:
      /*! Production::    Export : EXPORT INDENT Declare OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Declare OUTDENT", ...[{ declarations: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT Declare OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 524:
      /*! Production::    Export : EXPORT Exportable */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT Exportable", ...[{ exportable: yyvstack[yysp].unwrap }]), { rule: "EXPORT Exportable", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 525:
      /*! Production::    Export : EXPORT INDENT Exportable OUTDENT */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Exportable OUTDENT", ...[{ exportable: yyvstack[yysp - 1].unwrap }]), { rule: "EXPORT INDENT Exportable OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 528:
      /*! Production::    OptDefault : Identifier OptComma NEWLINE */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = yyvstack[yysp - 2]
      break;
  
  case 529:
      /*! Production::    ImportList : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ImportList"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 530:
      /*! Production::    ImportList : "{" ImportNames "}" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportList"]("{ ImportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ImportNames }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 531:
      /*! Production::    ImportList : "{{" INDENT ImportNames OUTDENT "}}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportList"]("{{ INDENT ImportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ImportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 532:
      /*! Production::    ExportList : "{" ExportNames "}" */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportList"]("{ ExportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ExportNames }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 533:
      /*! Production::    ExportList : "{{" INDENT ExportNames OUTDENT "}}" */
  
      // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
      // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportList"]("{{ INDENT ExportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ExportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 534:
      /*! Production::    ExportNames : ExportName */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportNames"]("ExportName", ...[yyvstack[yysp].contents]), { rule: "ExportName", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 535:
      /*! Production::    ExportNames : ExportNames "," ExportName */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportNames"]("ExportNames , ExportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ExportNames , ExportName", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 536:
      /*! Production::    ExportNames : ExportNames OptComma NEWLINE ExportName */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportNames"]("ExportNames OptComma NEWLINE ExportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ExportNames OptComma NEWLINE ExportName", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 537:
      /*! Production::    ExportName : PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1])]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 538:
      /*! Production::    ExportName : PROPERTY ":" Identifier */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 539:
      /*! Production::    ExportName : PROPERTY ":" AS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 540:
      /*! Production::    ExportName : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ExportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 541:
      /*! Production::    ExportName : Identifier AS DEFAULT */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportName"]("Identifier AS DEFAULT", ...[yyvstack[yysp - 2],,true]), { rule: "Identifier AS DEFAULT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 542:
      /*! Production::    ExportName : Identifier AS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ExportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2],yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 543:
      /*! Production::    Exportable : Class */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Exportable"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 544:
      /*! Production::    Exportable : Function */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["Exportable"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  case 545:
      /*! Production::    ImportNames : ImportName */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportNames"]("ImportName", ...[yyvstack[yysp].contents]), { rule: "ImportName", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 546:
      /*! Production::    ImportNames : ImportNames "," ImportName */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportNames"]("ImportNames , ImportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ImportNames , ImportName", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 547:
      /*! Production::    ImportNames : ImportNames OptComma NEWLINE ImportName */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportNames"]("ImportNames OptComma NEWLINE ImportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ImportNames OptComma NEWLINE ImportName", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 548:
      /*! Production::    ImportName : PROPERTY ":" */
  
      // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
      // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1]), , [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 549:
      /*! Production::    ImportName : PROPERTY ":" Identifier */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 550:
      /*! Production::    ImportName : PROPERTY ":" AS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
      // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 551:
      /*! Production::    ImportName : Identifier AS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 552:
      /*! Production::    ImportName : DEFAULT AS Identifier */
  
      // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
      // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = Object.assign(new yy["ImportName"]("DEFAULT AS Identifier", ...[(new yy.Identifier(null, 'default')).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "DEFAULT AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
      break;
  
  case 553:
      /*! Production::    ImportName : Identifier */
  
      // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
      this._$ = yylstack[yysp];
      // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
      
      
      this.$ = new yy["ImportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
      break;
  
  }
  },
  table: bt({
    len: u([
    115,
    1,
    2,
    0,
    55,
    7,
    0,
    83,
    s,
    [0, 10],
    81,
    81,
    s,
    [0, 3],
    112,
    0,
    0,
    114,
    5,
    12,
    9,
    c,
    [23, 9],
    111,
    49,
    s,
    [111, 3],
    112,
    112,
    0,
    81,
    111,
    4,
    114,
    113,
    80,
    0,
    8,
    87,
    181,
    7,
    28,
    53,
    5,
    2,
    s,
    [0, 3],
    114,
    s,
    [0, 7],
    5,
    81,
    s,
    [7, 3],
    111,
    s,
    [0, 9],
    126,
    c,
    [11, 3],
    114,
    c,
    [28, 5],
    56,
    118,
    s,
    [0, 4],
    3,
    7,
    s,
    [0, 6],
    7,
    29,
    7,
    117,
    0,
    c,
    [28, 3],
    s,
    [111, 4],
    0,
    114,
    113,
    s,
    [111, 3],
    54,
    s,
    [0, 13],
    64,
    0,
    64,
    s,
    [0, 16],
    126,
    c,
    [42, 3],
    0,
    6,
    0,
    1,
    111,
    116,
    0,
    0,
    86,
    111,
    2,
    86,
    0,
    2,
    114,
    119,
    12,
    0,
    113,
    5,
    1,
    s,
    [0, 3],
    8,
    8,
    9,
    2,
    1,
    11,
    14,
    0,
    7,
    111,
    5,
    115,
    s,
    [0, 3],
    86,
    83,
    80,
    0,
    86,
    1,
    5,
    4,
    s,
    [86, 4],
    111,
    86,
    111,
    0,
    c,
    [20, 4],
    55,
    114,
    111,
    3,
    2,
    2,
    66,
    53,
    3,
    4,
    58,
    53,
    52,
    118,
    1,
    80,
    114,
    81,
    0,
    4,
    49,
    114,
    82,
    82,
    86,
    113,
    7,
    7,
    3,
    0,
    27,
    c,
    [92, 3],
    c,
    [74, 4],
    83,
    80,
    52,
    c,
    [63, 3],
    10,
    0,
    s,
    [3, 3],
    4,
    52,
    2,
    113,
    0,
    2,
    1,
    1,
    c,
    [219, 3],
    6,
    3,
    6,
    9,
    0,
    29,
    2,
    86,
    79,
    79,
    c,
    [77, 3],
    c,
    [74, 3],
    0,
    51,
    86,
    c,
    [47, 3],
    54,
    0,
    55,
    1,
    53,
    118,
    50,
    22,
    0,
    11,
    0,
    7,
    116,
    0,
    111,
    56,
    111,
    70,
    2,
    0,
    12,
    c,
    [220, 4],
    c,
    [217, 3],
    5,
    28,
    0,
    8,
    6,
    27,
    c,
    [155, 4],
    0,
    29,
    6,
    c,
    [17, 4],
    0,
    s,
    [86, 6],
    0,
    79,
    113,
    s,
    [86, 4],
    2,
    17,
    49,
    8,
    0,
    0,
    79,
    c,
    [16, 3],
    0,
    0,
    51,
    0,
    5,
    114,
    0,
    56,
    111,
    51,
    c,
    [104, 3],
    2,
    2,
    65,
    47,
    56,
    5,
    115,
    1,
    13,
    2,
    114,
    c,
    [237, 3],
    111,
    0,
    1,
    1,
    5,
    0,
    0,
    1,
    6,
    3,
    c,
    [247, 3],
    0,
    9,
    6,
    9,
    86,
    114,
    c,
    [72, 3],
    51,
    51,
    0,
    86,
    79,
    4,
    114,
    0,
    52,
    86,
    s,
    [111, 5],
    49,
    25,
    12,
    111,
    118,
    c,
    [445, 3],
    7,
    49,
    114,
    51,
    6,
    0,
    s,
    [125, 3],
    118,
    c,
    [72, 3],
    86,
    88,
    c,
    [220, 3],
    0,
    84,
    86,
    79,
    c,
    [455, 4],
    52,
    2,
    2,
    6,
    1,
    0,
    6,
    1,
    7,
    6,
    1,
    1,
    111,
    1,
    1,
    86,
    4,
    0,
    1,
    5,
    5,
    53,
    2,
    c,
    [238, 3],
    1,
    3,
    0,
    0,
    c,
    [444, 3],
    1,
    0,
    c,
    [135, 4],
    29,
    5,
    0,
    125,
    13,
    86,
    c,
    [396, 3],
    52,
    3,
    56,
    5,
    119,
    114,
    55,
    1,
    15,
    0,
    1,
    119,
    c,
    [88, 3],
    55,
    0,
    55,
    c,
    [37, 4],
    c,
    [137, 3],
    51,
    c,
    [259, 3],
    5,
    2,
    29,
    3,
    79,
    80,
    c,
    [66, 3],
    28,
    7,
    5,
    5,
    c,
    [58, 3],
    c,
    [22, 3],
    113,
    1,
    52,
    c,
    [136, 4],
    17,
    8,
    0,
    3,
    117,
    5,
    c,
    [45, 3],
    c,
    [141, 3],
    c,
    [369, 3],
    114,
    86,
    114,
    0,
    10,
    11,
    0,
    86,
    57,
    57,
    58,
    1,
    9,
    0,
    8,
    2,
    15,
    c,
    [123, 3],
    14,
    c,
    [48, 4],
    29,
    52,
    c,
    [110, 4],
    0,
    86,
    155,
    86,
    51,
    51,
    55,
    55,
    10,
    49,
    53,
    2,
    118,
    0,
    117,
    114,
    0,
    4,
    c,
    [211, 4],
    0,
    126,
    s,
    [7, 3],
    2,
    c,
    [143, 3],
    114,
    0,
    84,
    0,
    4,
    s,
    [0, 4],
    1,
    0,
    3,
    1,
    2,
    c,
    [178, 4],
    1,
    6,
    c,
    [178, 4],
    c,
    [132, 3],
    c,
    [424, 4],
    7,
    3,
    4,
    0,
    51,
    c,
    [425, 3],
    29,
    0,
    2,
    11,
    1,
    0,
    5,
    6,
    79,
    111,
    c,
    [276, 3],
    119,
    52,
    155,
    0,
    53,
    54,
    c,
    [127, 3],
    55,
    c,
    [63, 3],
    c,
    [4, 3],
    c,
    [109, 4],
    113,
    116,
    115,
    c,
    [388, 5],
    27,
    c,
    [395, 3],
    5,
    28,
    1,
    28,
    28,
    c,
    [241, 3],
    c,
    [233, 3],
    2,
    6,
    5,
    32,
    c,
    [29, 3],
    c,
    [455, 3],
    86,
    10,
    49,
    0,
    113,
    114,
    0,
    3,
    c,
    [105, 3],
    114,
    86,
    c,
    [121, 3],
    86,
    c,
    [233, 3],
    c,
    [615, 4],
    6,
    0,
    111,
    c,
    [250, 3],
    0,
    0,
    10,
    12,
    5,
    c,
    [621, 3],
    c,
    [675, 3],
    0,
    c,
    [380, 4],
    0,
    10,
    c,
    [267, 3],
    c,
    [120, 3],
    125,
    c,
    [5, 3],
    3,
    c,
    [311, 4],
    c,
    [164, 3],
    1,
    s,
    [2, 3],
    c,
    [350, 4],
    2,
    2,
    4,
    1,
    c,
    [251, 4],
    4,
    c,
    [339, 6],
    5,
    79,
    c,
    [116, 5],
    9,
    0,
    4,
    1,
    c,
    [37, 3],
    7,
    0,
    4,
    86,
    52,
    4,
    c,
    [94, 5],
    52,
    52,
    114,
    7,
    c,
    [32, 3],
    c,
    [151, 3],
    5,
    1,
    79,
    26,
    26,
    c,
    [3, 3],
    27,
    27,
    7,
    1,
    4,
    c,
    [228, 3],
    7,
    c,
    [50, 3],
    111,
    10,
    c,
    [647, 5],
    86,
    3,
    58,
    0,
    1,
    55,
    c,
    [381, 3],
    55,
    c,
    [148, 4],
    55,
    111,
    c,
    [19, 3],
    c,
    [93, 3],
    c,
    [80, 3],
    c,
    [93, 5],
    c,
    [115, 3],
    c,
    [844, 5],
    c,
    [479, 3],
    10,
    2,
    5,
    4,
    c,
    [615, 6],
    c,
    [739, 5],
    c,
    [87, 4],
    1,
    0,
    2,
    79,
    2,
    79,
    c,
    [724, 3],
    c,
    [10, 3],
    c,
    [6, 3],
    86,
    111,
    c,
    [10, 3],
    c,
    [929, 5],
    c,
    [904, 3],
    c,
    [211, 4],
    c,
    [46, 6],
    c,
    [728, 3],
    c,
    [822, 3],
    c,
    [569, 4],
    27,
    c,
    [209, 3],
    s,
    [0, 5],
    c,
    [408, 3],
    c,
    [109, 3],
    c,
    [381, 4],
    s,
    [1, 3],
    c,
    [163, 4],
    7,
    c,
    [537, 5],
    c,
    [318, 3],
    7
  ]),
    symbol: u([
    1,
    s,
    [3, 5, 1],
    16,
    21,
    24,
    28,
    29,
    30,
    s,
    [33, 5, 1],
    40,
    46,
    s,
    [51, 4, 1],
    74,
    79,
    83,
    89,
    92,
    95,
    101,
    s,
    [104, 4, 1],
    110,
    111,
    115,
    s,
    [117, 8, 1],
    128,
    129,
    131,
    132,
    133,
    135,
    136,
    137,
    s,
    [141, 5, 1],
    147,
    s,
    [149, 6, 1],
    s,
    [156, 7, 1],
    164,
    168,
    173,
    178,
    182,
    184,
    190,
    192,
    193,
    196,
    197,
    198,
    200,
    201,
    s,
    [203, 5, 1],
    209,
    s,
    [214, 4, 1],
    220,
    221,
    224,
    226,
    227,
    228,
    232,
    233,
    235,
    237,
    241,
    248,
    249,
    255,
    267,
    268,
    271,
    272,
    274,
    1,
    1,
    26,
    1,
    4,
    5,
    s,
    [8, 7, 1],
    17,
    19,
    22,
    26,
    39,
    s,
    [41, 5, 1],
    47,
    48,
    51,
    52,
    s,
    [55, 19, 1],
    88,
    99,
    100,
    104,
    105,
    163,
    165,
    s,
    [169, 4, 1],
    197,
    1,
    17,
    c,
    [45, 3],
    99,
    100,
    c,
    [62, 10],
    s,
    [15, 6, 1],
    22,
    23,
    25,
    26,
    31,
    32,
    38,
    c,
    [71, 8],
    s,
    [49, 4, 1],
    c,
    [73, 19],
    s,
    [75, 4, 1],
    81,
    84,
    85,
    88,
    91,
    93,
    99,
    100,
    s,
    [102, 4, 1],
    108,
    109,
    113,
    114,
    116,
    123,
    124,
    127,
    155,
    174,
    216,
    217,
    239,
    c,
    [83, 78],
    142,
    155,
    237,
    c,
    [81, 81],
    c,
    [424, 16],
    38,
    c,
    [425, 48],
    c,
    [422, 47],
    c,
    [112, 25],
    81,
    c,
    [113, 48],
    179,
    c,
    [114, 39],
    16,
    30,
    38,
    81,
    179,
    16,
    24,
    31,
    78,
    115,
    142,
    208,
    230,
    231,
    236,
    238,
    240,
    c,
    [123, 4],
    c,
    [87, 3],
    142,
    161,
    c,
    [333, 78],
    138,
    139,
    140,
    155,
    234,
    c,
    [759, 64],
    c,
    [334, 48],
    c,
    [107, 4],
    30,
    33,
    74,
    c,
    [86, 21],
    173,
    c,
    [59, 16],
    c,
    [57, 3],
    c,
    [160, 112],
    c,
    [111, 237],
    c,
    [828, 121],
    c,
    [112, 87],
    c,
    [1297, 79],
    199,
    202,
    c,
    [416, 111],
    26,
    104,
    105,
    197,
    c,
    [115, 72],
    s,
    [180, 5, 1],
    c,
    [1250, 111],
    c,
    [423, 118],
    195,
    16,
    32,
    38,
    80,
    81,
    142,
    179,
    c,
    [1644, 21],
    27,
    30,
    c,
    [90, 58],
    132,
    133,
    c,
    [1315, 4],
    228,
    c,
    [2075, 6],
    s,
    [8, 19, 1],
    s,
    [28, 52, 1],
    81,
    83,
    c,
    [105, 3],
    89,
    91,
    92,
    93,
    95,
    s,
    [99, 13, 1],
    s,
    [113, 12, 1],
    127,
    c,
    [355, 20],
    155,
    c,
    [356, 47],
    8,
    16,
    38,
    81,
    142,
    237,
    275,
    16,
    c,
    [1389, 3],
    38,
    79,
    81,
    90,
    c,
    [81, 6],
    142,
    c,
    [76, 3],
    178,
    c,
    [43, 4],
    237,
    267,
    268,
    277,
    280,
    c,
    [1420, 7],
    38,
    c,
    [1421, 39],
    c,
    [94, 4],
    269,
    270,
    26,
    38,
    142,
    237,
    256,
    142,
    c,
    [1926, 66],
    c,
    [2350, 49],
    23,
    75,
    76,
    113,
    174,
    c,
    [570, 79],
    179,
    225,
    30,
    c,
    [1879, 3],
    c,
    [271, 3],
    c,
    [7, 7],
    c,
    [1914, 4],
    133,
    179,
    228,
    c,
    [1430, 116],
    11,
    12,
    c,
    [113, 13],
    c,
    [2565, 4],
    53,
    54,
    c,
    [198, 8],
    c,
    [123, 47],
    166,
    167,
    168,
    171,
    c,
    [1667, 177],
    c,
    [2383, 89],
    c,
    [114, 115],
    16,
    17,
    c,
    [858, 7],
    78,
    110,
    111,
    112,
    c,
    [860, 26],
    210,
    212,
    c,
    [862, 14],
    c,
    [170, 5],
    15,
    c,
    [171, 3],
    25,
    c,
    [172, 16],
    78,
    c,
    [399, 80],
    243,
    245,
    247,
    c,
    [174, 8],
    30,
    132,
    229,
    30,
    33,
    132,
    133,
    c,
    [1054, 3],
    126,
    128,
    129,
    s,
    [220, 4, 1],
    c,
    [129, 3],
    38,
    c,
    [99, 10],
    142,
    148,
    c,
    [59, 6],
    237,
    s,
    [258, 5, 1],
    265,
    123,
    124,
    126,
    s,
    [216, 4, 1],
    c,
    [3375, 7],
    17,
    21,
    s,
    [22, 4, 2],
    c,
    [173, 7],
    39,
    c,
    [571, 48],
    c,
    [1027, 48],
    c,
    [2572, 349],
    c,
    [2794, 231],
    c,
    [1127, 114],
    c,
    [226, 51],
    191,
    c,
    [560, 370],
    c,
    [3736, 28],
    c,
    [82, 3],
    173,
    183,
    c,
    [3740, 19],
    268,
    c,
    [165, 64],
    c,
    [64, 69],
    c,
    [2106, 248],
    c,
    [111, 95],
    76,
    123,
    124,
    c,
    [4881, 3],
    112,
    c,
    [1208, 135],
    c,
    [3130, 3],
    c,
    [114, 47],
    175,
    176,
    c,
    [3471, 119],
    c,
    [5284, 7],
    c,
    [313, 111],
    c,
    [5390, 81],
    c,
    [199, 7],
    38,
    82,
    c,
    [201, 16],
    c,
    [2279, 49],
    c,
    [3307, 49],
    c,
    [2396, 8],
    c,
    [518, 17],
    c,
    [517, 13],
    c,
    [2649, 20],
    c,
    [117, 36],
    c,
    [2678, 12],
    c,
    [5240, 14],
    c,
    [5235, 11],
    c,
    [446, 64],
    c,
    [244, 49],
    15,
    26,
    31,
    38,
    177,
    28,
    15,
    17,
    c,
    [436, 3],
    38,
    39,
    116,
    c,
    [8, 15],
    78,
    116,
    115,
    142,
    23,
    15,
    17,
    26,
    38,
    78,
    112,
    115,
    142,
    211,
    213,
    238,
    15,
    16,
    24,
    25,
    c,
    [171, 4],
    s,
    [236, 5, 2],
    247,
    c,
    [3517, 7],
    c,
    [625, 111],
    c,
    [103, 4],
    161,
    c,
    [116, 8],
    c,
    [2820, 9],
    c,
    [2152, 98],
    c,
    [743, 86],
    c,
    [6219, 161],
    155,
    c,
    [4092, 21],
    c,
    [4573, 45],
    s,
    [96, 5, 1],
    c,
    [4576, 14],
    155,
    228,
    74,
    30,
    c,
    [5978, 4],
    c,
    [4397, 3],
    179,
    c,
    [345, 165],
    c,
    [86, 179],
    c,
    [920, 111],
    c,
    [197, 197],
    c,
    [111, 11],
    c,
    [5217, 7],
    c,
    [1112, 97],
    c,
    [311, 9],
    16,
    19,
    32,
    38,
    c,
    [7305, 28],
    81,
    c,
    [7306, 11],
    179,
    c,
    [281, 17],
    c,
    [5129, 98],
    c,
    [395, 111],
    c,
    [6035, 3],
    18,
    84,
    86,
    87,
    c,
    [598, 11],
    18,
    19,
    23,
    27,
    30,
    c,
    [292, 30],
    75,
    76,
    81,
    c,
    [52, 3],
    c,
    [297, 5],
    113,
    123,
    124,
    c,
    [5704, 5],
    228,
    c,
    [5487, 53],
    15,
    18,
    84,
    18,
    84,
    99,
    100,
    c,
    [126, 10],
    c,
    [125, 3],
    c,
    [121, 30],
    c,
    [120, 11],
    c,
    [118, 3],
    234,
    c,
    [58, 12],
    c,
    [57, 28],
    84,
    c,
    [7776, 12],
    c,
    [53, 9],
    19,
    c,
    [522, 41],
    c,
    [802, 26],
    84,
    89,
    90,
    92,
    94,
    c,
    [410, 47],
    s,
    [185, 4, 1],
    c,
    [414, 37],
    38,
    c,
    [1007, 79],
    194,
    c,
    [4153, 114],
    c,
    [194, 58],
    80,
    c,
    [5845, 22],
    c,
    [1741, 4],
    c,
    [7528, 65],
    c,
    [248, 118],
    c,
    [6573, 60],
    155,
    229,
    c,
    [82, 79],
    c,
    [2078, 3],
    c,
    [1613, 150],
    c,
    [1331, 49],
    c,
    [6669, 6],
    276,
    c,
    [6676, 7],
    15,
    26,
    177,
    c,
    [6679, 4],
    c,
    [6678, 24],
    c,
    [1375, 110],
    112,
    142,
    237,
    278,
    279,
    c,
    [966, 21],
    c,
    [7097, 61],
    c,
    [443, 81],
    177,
    c,
    [850, 46],
    c,
    [1470, 6],
    c,
    [215, 81],
    c,
    [7312, 5],
    c,
    [6922, 4],
    c,
    [4253, 5],
    239,
    c,
    [7051, 5],
    256,
    133,
    138,
    228,
    16,
    38,
    133,
    228,
    c,
    [1461, 10],
    22,
    26,
    c,
    [9289, 40],
    22,
    26,
    c,
    [652, 113],
    76,
    174,
    112,
    c,
    [4437, 17],
    c,
    [9044, 99],
    32,
    c,
    [1301, 3],
    225,
    30,
    133,
    228,
    c,
    [9, 6],
    16,
    c,
    [1984, 3],
    c,
    [7146, 3],
    225,
    228,
    c,
    [6380, 29],
    30,
    c,
    [1106, 21],
    c,
    [2920, 145],
    c,
    [79, 158],
    c,
    [2881, 118],
    c,
    [2766, 169],
    c,
    [950, 10],
    c,
    [949, 41],
    c,
    [417, 86],
    c,
    [4447, 4],
    c,
    [1253, 9],
    c,
    [7352, 46],
    c,
    [144, 10],
    17,
    19,
    23,
    26,
    c,
    [137, 9],
    c,
    [135, 23],
    78,
    c,
    [2719, 8],
    20,
    c,
    [10493, 11],
    20,
    23,
    c,
    [255, 29],
    c,
    [54, 11],
    c,
    [7461, 118],
    c,
    [1534, 10],
    c,
    [280, 27],
    c,
    [2385, 13],
    c,
    [412, 3],
    23,
    26,
    c,
    [1127, 3],
    39,
    c,
    [188, 3],
    81,
    c,
    [3077, 9],
    c,
    [1468, 3],
    78,
    c,
    [1469, 7],
    15,
    25,
    c,
    [369, 3],
    246,
    247,
    c,
    [208, 9],
    c,
    [794, 15],
    c,
    [206, 93],
    c,
    [909, 119],
    15,
    19,
    c,
    [244, 3],
    c,
    [543, 29],
    c,
    [487, 6],
    c,
    [3957, 123],
    c,
    [602, 5],
    c,
    [7891, 17],
    c,
    [397, 42],
    247,
    30,
    229,
    c,
    [5448, 12],
    c,
    [8019, 3],
    130,
    220,
    221,
    223,
    c,
    [202, 111],
    15,
    26,
    38,
    134,
    177,
    c,
    [111, 3],
    c,
    [1754, 25],
    c,
    [33, 3],
    39,
    80,
    113,
    133,
    134,
    c,
    [8, 4],
    113,
    134,
    c,
    [42, 22],
    257,
    258,
    259,
    262,
    265,
    113,
    c,
    [1825, 23],
    c,
    [29, 5],
    266,
    38,
    c,
    [2494, 3],
    263,
    264,
    s,
    [123, 4, 1],
    216,
    217,
    219,
    c,
    [4584, 197],
    c,
    [86, 509],
    c,
    [8131, 113],
    c,
    [536, 344],
    86,
    87,
    15,
    16,
    23,
    c,
    [1916, 3],
    c,
    [4999, 3],
    86,
    87,
    c,
    [1916, 5],
    c,
    [4990, 8],
    c,
    [4369, 42],
    c,
    [1962, 3],
    c,
    [60, 5],
    c,
    [2910, 165],
    c,
    [86, 86],
    c,
    [2716, 10],
    c,
    [2715, 33],
    114,
    c,
    [2630, 8],
    26,
    38,
    77,
    177,
    c,
    [1546, 23],
    c,
    [7875, 91],
    c,
    [2146, 11],
    c,
    [2145, 31],
    77,
    c,
    [2146, 124],
    c,
    [337, 10],
    c,
    [13291, 41],
    c,
    [7806, 114],
    26,
    39,
    17,
    26,
    c,
    [591, 12],
    c,
    [3027, 3],
    c,
    [5871, 34],
    78,
    c,
    [3400, 6],
    c,
    [2792, 9],
    c,
    [3091, 12],
    26,
    c,
    [60, 29],
    c,
    [56, 5],
    c,
    [3082, 11],
    c,
    [3081, 41],
    c,
    [2884, 5],
    c,
    [7734, 4],
    c,
    [6445, 115],
    28,
    16,
    24,
    c,
    [616, 3],
    c,
    [2534, 4],
    c,
    [2533, 4],
    26,
    38,
    c,
    [9839, 130],
    c,
    [9726, 317],
    23,
    112,
    c,
    [3838, 5],
    20,
    c,
    [6, 4],
    39,
    116,
    c,
    [8292, 3],
    c,
    [3484, 3],
    c,
    [3483, 3],
    16,
    24,
    c,
    [8293, 7],
    c,
    [4661, 15],
    c,
    [4386, 102],
    c,
    [8808, 104],
    c,
    [1278, 156],
    c,
    [51, 51],
    c,
    [1889, 165],
    c,
    [6563, 5],
    c,
    [1076, 113],
    c,
    [5666, 52],
    c,
    [8015, 208],
    c,
    [111, 434],
    c,
    [3001, 48],
    c,
    [8097, 3],
    c,
    [4985, 5],
    c,
    [8068, 6],
    99,
    100,
    c,
    [4988, 12],
    c,
    [3026, 5],
    c,
    [7959, 4],
    c,
    [308, 136],
    c,
    [7965, 94],
    26,
    39,
    16,
    26,
    c,
    [1716, 3],
    93,
    179,
    c,
    [5903, 43],
    91,
    c,
    [1021, 4],
    c,
    [1181, 125],
    c,
    [1179, 29],
    c,
    [159, 5],
    c,
    [1094, 7],
    c,
    [16132, 4],
    c,
    [13963, 7],
    c,
    [11525, 76],
    c,
    [11524, 49],
    c,
    [125, 250],
    c,
    [723, 113],
    c,
    [8607, 172],
    c,
    [2128, 48],
    c,
    [15019, 66],
    179,
    c,
    [7689, 3],
    c,
    [8700, 51],
    c,
    [10666, 80],
    179,
    c,
    [10750, 82],
    c,
    [7482, 106],
    c,
    [389, 59],
    c,
    [8834, 81],
    155,
    229,
    c,
    [7199, 11],
    c,
    [2818, 41],
    26,
    39,
    140,
    273,
    8,
    16,
    c,
    [8689, 4],
    138,
    90,
    c,
    [6049, 3],
    281,
    282,
    38,
    c,
    [8704, 9],
    26,
    c,
    [8, 3],
    26,
    39,
    c,
    [1789, 111],
    39,
    39,
    c,
    [7346, 89],
    c,
    [3507, 5],
    39,
    138,
    c,
    [8773, 5],
    c,
    [759, 4],
    26,
    c,
    [10081, 47],
    c,
    [15567, 3],
    c,
    [6403, 4],
    177,
    39,
    138,
    16,
    38,
    250,
    26,
    39,
    114,
    c,
    [169, 86],
    c,
    [8293, 29],
    c,
    [6572, 5],
    c,
    [1482, 125],
    11,
    12,
    47,
    48,
    c,
    [103, 8],
    171,
    c,
    [3056, 102],
    c,
    [4384, 162],
    c,
    [8137, 59],
    c,
    [3421, 42],
    c,
    [4207, 3],
    c,
    [15404, 5],
    c,
    [695, 6],
    c,
    [8053, 30],
    c,
    [8052, 15],
    c,
    [695, 5],
    c,
    [7346, 7],
    c,
    [66, 5],
    c,
    [346, 8],
    c,
    [7347, 10],
    c,
    [15698, 203],
    c,
    [7746, 14],
    c,
    [7745, 41],
    c,
    [1054, 3],
    c,
    [8336, 4],
    c,
    [9520, 9],
    25,
    c,
    [7651, 19],
    c,
    [305, 11],
    c,
    [1280, 79],
    c,
    [8048, 10],
    c,
    [1126, 7],
    246,
    247,
    c,
    [7946, 43],
    c,
    [4359, 21],
    c,
    [55, 46],
    15,
    247,
    c,
    [5408, 5],
    c,
    [6087, 43],
    127,
    c,
    [1202, 10],
    26,
    c,
    [1203, 22],
    c,
    [1202, 3],
    c,
    [206, 7],
    142,
    237,
    c,
    [1240, 29],
    13,
    14,
    22,
    c,
    [6459, 157],
    133,
    155,
    114,
    c,
    [8578, 5],
    c,
    [7933, 27],
    266,
    c,
    [106, 3],
    c,
    [368, 4],
    c,
    [5149, 5],
    c,
    [7915, 5],
    c,
    [8883, 10],
    c,
    [332, 42],
    c,
    [7254, 113],
    c,
    [165, 11],
    20,
    c,
    [6248, 57],
    c,
    [4276, 368],
    c,
    [7343, 15],
    c,
    [4268, 8],
    c,
    [6991, 3],
    c,
    [13924, 18],
    c,
    [1202, 8],
    c,
    [14869, 50],
    c,
    [6993, 41],
    c,
    [994, 5],
    c,
    [6998, 43],
    c,
    [587, 12],
    82,
    c,
    [2658, 13],
    c,
    [6547, 104],
    c,
    [3610, 200],
    c,
    [11036, 115],
    c,
    [6375, 5],
    c,
    [6857, 4],
    c,
    [10, 6],
    c,
    [9401, 5],
    c,
    [7762, 95],
    c,
    [7191, 3],
    c,
    [14810, 5],
    c,
    [1794, 50],
    c,
    [57, 97],
    116,
    c,
    [58, 7],
    c,
    [6676, 3],
    c,
    [14973, 7],
    c,
    [14968, 6],
    213,
    238,
    c,
    [1785, 3],
    16,
    17,
    c,
    [7161, 6],
    116,
    c,
    [6680, 5],
    c,
    [1111, 111],
    20,
    25,
    c,
    [15097, 4],
    26,
    c,
    [6805, 7],
    244,
    247,
    26,
    c,
    [1921, 29],
    c,
    [3643, 52],
    c,
    [14424, 177],
    c,
    [5335, 9],
    21,
    23,
    c,
    [1133, 12],
    c,
    [19341, 8],
    c,
    [19339, 26],
    c,
    [847, 3],
    88,
    c,
    [422, 3],
    c,
    [19333, 3],
    c,
    [424, 6],
    113,
    c,
    [9884, 162],
    c,
    [85, 9],
    c,
    [13770, 30],
    c,
    [6976, 22],
    c,
    [50, 28],
    85,
    c,
    [51, 21],
    c,
    [11578, 46],
    c,
    [55, 55],
    c,
    [1768, 3],
    c,
    [15255, 3],
    c,
    [1769, 3],
    189,
    c,
    [1844, 49],
    c,
    [14042, 53],
    c,
    [4349, 27],
    c,
    [5304, 109],
    c,
    [118, 61],
    c,
    [5421, 154],
    84,
    94,
    95,
    188,
    c,
    [4, 4],
    c,
    [6207, 124],
    c,
    [1262, 42],
    c,
    [17727, 126],
    c,
    [6555, 4],
    50,
    81,
    93,
    c,
    [7, 14],
    26,
    c,
    [4908, 87],
    c,
    [2334, 193],
    c,
    [5717, 5],
    c,
    [5854, 4],
    123,
    c,
    [5342, 3],
    138,
    142,
    237,
    c,
    [5117, 10],
    c,
    [5349, 7],
    140,
    273,
    c,
    [5363, 6],
    c,
    [3490, 43],
    c,
    [285, 8],
    26,
    c,
    [65, 3],
    279,
    26,
    c,
    [77, 5],
    142,
    237,
    90,
    c,
    [92, 3],
    26,
    c,
    [4443, 3],
    c,
    [13807, 49],
    270,
    c,
    [13858, 52],
    c,
    [3945, 24],
    c,
    [3712, 5],
    16,
    250,
    17,
    30,
    38,
    111,
    112,
    133,
    142,
    146,
    251,
    252,
    253,
    22,
    c,
    [11733, 6],
    c,
    [8836, 4],
    c,
    [16555, 80],
    c,
    [11706, 276],
    c,
    [17796, 119],
    c,
    [9993, 11],
    c,
    [5190, 41],
    c,
    [2313, 155],
    c,
    [13392, 38],
    c,
    [20743, 16],
    c,
    [13445, 53],
    c,
    [4516, 3],
    c,
    [10357, 14],
    c,
    [10595, 155],
    c,
    [169, 169],
    20,
    c,
    [115, 8],
    c,
    [13677, 9],
    c,
    [116, 49],
    c,
    [13189, 56],
    c,
    [13583, 112],
    c,
    [116, 100],
    c,
    [115, 10],
    39,
    c,
    [13214, 24],
    c,
    [3513, 3],
    c,
    [27, 27],
    c,
    [13233, 4],
    c,
    [13274, 30],
    c,
    [13233, 4],
    c,
    [5563, 23],
    c,
    [90, 5],
    c,
    [28, 25],
    26,
    38,
    c,
    [1676, 29],
    c,
    [4625, 5],
    26,
    38,
    26,
    c,
    [13299, 4],
    264,
    c,
    [13, 5],
    c,
    [6264, 6],
    38,
    39,
    c,
    [50, 24],
    c,
    [5368, 113],
    c,
    [10285, 216],
    c,
    [86, 7],
    c,
    [3371, 59],
    c,
    [12177, 72],
    c,
    [5183, 41],
    c,
    [12290, 114],
    c,
    [649, 3],
    c,
    [19882, 17],
    c,
    [19341, 263],
    c,
    [15415, 94],
    c,
    [7304, 9],
    c,
    [2625, 106],
    c,
    [5006, 6],
    c,
    [6, 6],
    c,
    [14682, 112],
    c,
    [11810, 4],
    115,
    142,
    c,
    [1985, 55],
    c,
    [20151, 10],
    c,
    [5065, 3],
    c,
    [5063, 9],
    c,
    [1492, 5],
    c,
    [11112, 324],
    c,
    [23628, 213],
    c,
    [12554, 111],
    c,
    [1637, 9],
    26,
    39,
    c,
    [4435, 133],
    c,
    [4434, 44],
    c,
    [9517, 54],
    49,
    82,
    c,
    [9206, 87],
    c,
    [4269, 4],
    140,
    273,
    142,
    237,
    140,
    273,
    26,
    c,
    [4259, 4],
    282,
    c,
    [4194, 8],
    142,
    237,
    c,
    [4195, 6],
    123,
    39,
    142,
    237,
    c,
    [4218, 4],
    142,
    237,
    82,
    c,
    [1350, 5],
    c,
    [12388, 80],
    c,
    [7897, 26],
    c,
    [27, 27],
    c,
    [7917, 6],
    30,
    c,
    [4214, 8],
    30,
    133,
    142,
    228,
    20,
    30,
    c,
    [13, 3],
    c,
    [4217, 6],
    225,
    c,
    [20777, 90],
    c,
    [3834, 52],
    17,
    26,
    c,
    [22007, 88],
    c,
    [7424, 14],
    c,
    [592, 43],
    c,
    [821, 57],
    c,
    [1110, 109],
    c,
    [8847, 7],
    25,
    39,
    c,
    [9, 5],
    c,
    [9975, 80],
    c,
    [3232, 24],
    c,
    [3291, 26],
    262,
    265,
    c,
    [131, 131],
    c,
    [817, 54],
    c,
    [8740, 7],
    25,
    c,
    [3352, 4],
    c,
    [4, 4],
    17,
    c,
    [2069, 4],
    c,
    [17, 3],
    c,
    [895, 55],
    c,
    [1520, 121],
    c,
    [522, 5],
    77,
    c,
    [846, 86],
    c,
    [91, 3],
    c,
    [7560, 58],
    c,
    [59, 13],
    c,
    [2413, 44],
    c,
    [1202, 6],
    c,
    [6864, 110],
    c,
    [15839, 181],
    c,
    [18724, 62],
    c,
    [674, 95],
    82,
    39,
    c,
    [1861, 3],
    123,
    c,
    [1857, 5],
    c,
    [1833, 3],
    c,
    [6141, 3],
    140,
    273,
    13,
    14,
    c,
    [6438, 80],
    26,
    c,
    [5992, 7],
    252,
    253,
    c,
    [9949, 7],
    30,
    142,
    237,
    254,
    c,
    [935, 27],
    c,
    [9571, 10],
    c,
    [5058, 160],
    39,
    134,
    39,
    113,
    c,
    [301, 79],
    c,
    [81, 81],
    c,
    [1347, 7],
    c,
    [471, 3],
    c,
    [4, 3],
    c,
    [1341, 5],
    c,
    [482, 82],
    c,
    [3345, 118],
    c,
    [203, 3],
    c,
    [3237, 244],
    c,
    [22702, 153],
    s,
    [123, 3],
    c,
    [2779, 6],
    c,
    [2778, 3],
    c,
    [8, 7],
    17,
    30,
    229,
    c,
    [1970, 34],
    c,
    [9036, 224],
    c,
    [23632, 188],
    c,
    [621, 98],
    s,
    [39, 4],
    20,
    c,
    [549, 7],
    c,
    [12834, 89],
    c,
    [2656, 27],
    c,
    [120, 4]
  ]),
    type: u([
    s,
    [2, 65],
    s,
    [0, 50],
    1,
    c,
    [101, 57],
    s,
    [2, 86],
    c,
    [90, 84],
    c,
    [81, 147],
    s,
    [0, 47],
    c,
    [344, 70],
    c,
    [114, 48],
    c,
    [119, 7],
    c,
    [131, 14],
    c,
    [504, 83],
    c,
    [83, 65],
    c,
    [334, 76],
    c,
    [383, 84],
    c,
    [494, 111],
    c,
    [111, 222],
    c,
    [112, 225],
    c,
    [126, 16],
    c,
    [192, 114],
    c,
    [115, 112],
    c,
    [1250, 116],
    c,
    [1220, 86],
    c,
    [1815, 89],
    s,
    [2, 134],
    c,
    [356, 52],
    c,
    [275, 20],
    c,
    [391, 40],
    c,
    [675, 27],
    0,
    c,
    [1926, 114],
    c,
    [1814, 13],
    c,
    [993, 79],
    c,
    [93, 8],
    c,
    [309, 27],
    c,
    [783, 169],
    c,
    [1022, 114],
    c,
    [2383, 165],
    c,
    [114, 143],
    c,
    [521, 91],
    c,
    [513, 52],
    c,
    [121, 11],
    c,
    [135, 20],
    c,
    [1024, 18],
    c,
    [692, 71],
    c,
    [683, 223],
    c,
    [111, 444],
    c,
    [1127, 115],
    c,
    [782, 413],
    c,
    [2761, 101],
    c,
    [2656, 172],
    c,
    [530, 228],
    c,
    [3778, 182],
    c,
    [3584, 115],
    c,
    [5284, 84],
    c,
    [197, 126],
    c,
    [5483, 76],
    c,
    [401, 117],
    s,
    [0, 51],
    c,
    [5235, 20],
    c,
    [3551, 147],
    c,
    [158, 10],
    c,
    [59, 12],
    c,
    [625, 117],
    c,
    [542, 116],
    c,
    [743, 153],
    c,
    [6219, 95],
    c,
    [1901, 86],
    c,
    [86, 10],
    c,
    [345, 170],
    c,
    [86, 239],
    c,
    [1742, 311],
    c,
    [1112, 95],
    c,
    [3319, 121],
    c,
    [395, 114],
    c,
    [4333, 71],
    c,
    [4627, 117],
    c,
    [65, 47],
    c,
    [118, 52],
    c,
    [2345, 123],
    c,
    [7856, 149],
    c,
    [195, 132],
    c,
    [7528, 114],
    c,
    [248, 130],
    c,
    [2082, 83],
    c,
    [1613, 198],
    c,
    [6360, 14],
    c,
    [1234, 22],
    c,
    [1375, 124],
    c,
    [4424, 85],
    c,
    [2687, 110],
    c,
    [739, 104],
    c,
    [8731, 15],
    c,
    [7051, 5],
    c,
    [464, 7],
    c,
    [1461, 119],
    c,
    [652, 50],
    c,
    [3807, 117],
    c,
    [762, 13],
    c,
    [3819, 11],
    c,
    [6380, 30],
    c,
    [2920, 166],
    c,
    [5208, 165],
    c,
    [2881, 158],
    c,
    [2766, 166],
    c,
    [3298, 97],
    c,
    [91, 32],
    c,
    [1255, 108],
    c,
    [5868, 172],
    c,
    [50, 41],
    c,
    [4794, 12],
    c,
    [4791, 71],
    c,
    [6074, 212],
    c,
    [4154, 187],
    c,
    [1589, 9],
    c,
    [5276, 144],
    c,
    [10631, 54],
    c,
    [138, 30],
    c,
    [9021, 18],
    c,
    [4584, 256],
    c,
    [86, 445],
    c,
    [6092, 282],
    c,
    [86, 193],
    c,
    [4369, 116],
    c,
    [2910, 171],
    c,
    [86, 66],
    c,
    [6934, 77],
    c,
    [2257, 98],
    c,
    [2146, 162],
    c,
    [5984, 185],
    c,
    [11572, 104],
    c,
    [7557, 133],
    c,
    [8112, 121],
    c,
    [9726, 339],
    c,
    [118, 14],
    c,
    [5431, 10],
    c,
    [4670, 10],
    c,
    [3507, 73],
    c,
    [1002, 198],
    c,
    [1278, 142],
    c,
    [2666, 175],
    c,
    [6514, 160],
    c,
    [8015, 268],
    c,
    [111, 409],
    c,
    [49, 44],
    c,
    [25, 12],
    c,
    [8656, 227],
    c,
    [2214, 13],
    c,
    [1181, 207],
    c,
    [7383, 13],
    c,
    [5657, 125],
    c,
    [125, 317],
    c,
    [8688, 117],
    c,
    [4516, 213],
    c,
    [14544, 12],
    c,
    [4331, 129],
    c,
    [5105, 235],
    c,
    [17134, 142],
    c,
    [15942, 15],
    c,
    [6042, 15],
    c,
    [318, 74],
    c,
    [12187, 138],
    c,
    [17179, 10],
    c,
    [103, 33],
    c,
    [3578, 33],
    c,
    [3044, 84],
    c,
    [257, 22],
    c,
    [15576, 94],
    c,
    [1364, 61],
    c,
    [952, 153],
    c,
    [3804, 159],
    c,
    [3421, 91],
    c,
    [16143, 98],
    c,
    [1925, 210],
    c,
    [730, 20],
    c,
    [1162, 74],
    c,
    [13146, 58],
    c,
    [831, 103],
    c,
    [9408, 13],
    c,
    [4421, 69],
    c,
    [1332, 20],
    c,
    [1240, 34],
    c,
    [6465, 164],
    c,
    [196, 39],
    c,
    [10409, 51],
    c,
    [15385, 166],
    c,
    [4276, 405],
    c,
    [2633, 82],
    c,
    [14046, 100],
    c,
    [1018, 77],
    c,
    [3610, 314],
    c,
    [11806, 55],
    c,
    [10, 13],
    c,
    [221, 137],
    c,
    [57, 114],
    c,
    [2998, 26],
    c,
    [14563, 81],
    c,
    [625, 57],
    c,
    [9629, 39],
    c,
    [9213, 329],
    c,
    [1050, 177],
    c,
    [6976, 105],
    c,
    [11633, 72],
    c,
    [4790, 96],
    c,
    [10724, 77],
    c,
    [13992, 117],
    c,
    [5421, 167],
    c,
    [20677, 69],
    c,
    [7388, 178],
    c,
    [14523, 130],
    c,
    [4481, 207],
    c,
    [5717, 23],
    c,
    [4, 7],
    c,
    [614, 15],
    c,
    [3821, 8],
    c,
    [520, 57],
    c,
    [16980, 10],
    c,
    [14657, 56],
    c,
    [3062, 51],
    c,
    [3945, 33],
    c,
    [5343, 17],
    c,
    [6899, 83],
    c,
    [1822, 244],
    c,
    [12903, 153],
    c,
    [2485, 132],
    c,
    [491, 107],
    c,
    [53, 75],
    c,
    [3049, 75],
    c,
    [7484, 146],
    c,
    [10764, 188],
    c,
    [2228, 161],
    c,
    [15110, 118],
    c,
    [13172, 42],
    c,
    [4011, 18],
    c,
    [3574, 46],
    c,
    [1646, 39],
    c,
    [13321, 35],
    c,
    [7241, 13],
    c,
    [310, 21],
    c,
    [20753, 169],
    c,
    [3824, 188],
    c,
    [8161, 115],
    c,
    [21261, 161],
    c,
    [5237, 185],
    c,
    [662, 196],
    c,
    [14559, 117],
    c,
    [11669, 13],
    c,
    [1695, 160],
    c,
    [20322, 17],
    c,
    [14884, 17],
    c,
    [11112, 372],
    c,
    [6245, 228],
    c,
    [10803, 104],
    c,
    [10387, 177],
    c,
    [3389, 90],
    c,
    [4876, 13],
    c,
    [4037, 4],
    c,
    [1195, 14],
    c,
    [18, 8],
    c,
    [33, 8],
    c,
    [4071, 8],
    c,
    [3528, 95],
    c,
    [2658, 51],
    c,
    [25746, 17],
    c,
    [25762, 70],
    c,
    [19572, 141],
    c,
    [1751, 73],
    c,
    [199, 125],
    c,
    [18191, 54],
    c,
    [13560, 21],
    c,
    [634, 93],
    c,
    [3199, 45],
    c,
    [131, 127],
    c,
    [817, 44],
    c,
    [19290, 10],
    c,
    [201, 24],
    c,
    [78, 49],
    c,
    [1520, 116],
    c,
    [8311, 88],
    c,
    [61, 110],
    c,
    [26370, 32],
    c,
    [6864, 101],
    c,
    [3089, 210],
    c,
    [2194, 123],
    c,
    [1857, 8],
    c,
    [1663, 6],
    c,
    [1068, 91],
    c,
    [1299, 11],
    c,
    [935, 78],
    c,
    [3864, 191],
    c,
    [19591, 359],
    c,
    [9482, 250],
    c,
    [22702, 112],
    c,
    [12565, 12],
    c,
    [77, 23],
    c,
    [9036, 315],
    c,
    [10017, 212],
    c,
    [1175, 108],
    c,
    [125, 19]
  ]),
    state: u([
    s,
    [1, 4, 1],
    16,
    6,
    8,
    46,
    39,
    33,
    15,
    11,
    12,
    9,
    13,
    52,
    10,
    48,
    49,
    47,
    89,
    7,
    35,
    37,
    36,
    31,
    63,
    32,
    66,
    100,
    111,
    67,
    103,
    34,
    75,
    74,
    104,
    14,
    53,
    30,
    55,
    64,
    5,
    25,
    24,
    22,
    59,
    17,
    20,
    21,
    124,
    163,
    116,
    117,
    120,
    121,
    129,
    167,
    169,
    111,
    166,
    173,
    174,
    175,
    c,
    [60, 38],
    177,
    c,
    [60, 7],
    178,
    c,
    [47, 7],
    179,
    c,
    [48, 39],
    184,
    191,
    186,
    188,
    189,
    190,
    192,
    198,
    202,
    206,
    c,
    [104, 46],
    33,
    207,
    c,
    [30, 15],
    209,
    210,
    64,
    214,
    c,
    [67, 46],
    215,
    c,
    [47, 46],
    216,
    c,
    [47, 46],
    217,
    c,
    [47, 46],
    219,
    c,
    [47, 46],
    221,
    222,
    226,
    c,
    [49, 46],
    228,
    237,
    c,
    [48, 7],
    230,
    234,
    11,
    231,
    c,
    [51, 27],
    236,
    232,
    c,
    [51, 4],
    235,
    233,
    c,
    [51, 3],
    238,
    c,
    [98, 46],
    241,
    244,
    243,
    248,
    250,
    c,
    [51, 46],
    254,
    252,
    262,
    263,
    c,
    [20, 3],
    264,
    258,
    59,
    255,
    259,
    33,
    270,
    c,
    [42, 15],
    268,
    30,
    269,
    64,
    265,
    267,
    274,
    271,
    275,
    277,
    3,
    276,
    c,
    [704, 46],
    279,
    285,
    283,
    286,
    104,
    264,
    288,
    104,
    264,
    290,
    292,
    293,
    c,
    [145, 46],
    296,
    c,
    [47, 4],
    294,
    295,
    39,
    297,
    c,
    [50, 41],
    300,
    c,
    [97, 46],
    303,
    c,
    [47, 7],
    302,
    c,
    [48, 39],
    304,
    c,
    [48, 7],
    305,
    c,
    [791, 40],
    317,
    c,
    [30, 5],
    307,
    309,
    32,
    312,
    c,
    [32, 4],
    310,
    c,
    [32, 3],
    316,
    30,
    315,
    64,
    323,
    c,
    [166, 38],
    319,
    321,
    324,
    c,
    [73, 8],
    327,
    335,
    103,
    332,
    333,
    345,
    c,
    [31, 5],
    339,
    342,
    340,
    336,
    338,
    344,
    343,
    352,
    111,
    349,
    350,
    353,
    c,
    [1098, 47],
    354,
    c,
    [286, 46],
    355,
    c,
    [47, 46],
    356,
    c,
    [47, 46],
    357,
    c,
    [47, 46],
    358,
    c,
    [47, 46],
    359,
    c,
    [47, 7],
    360,
    c,
    [48, 39],
    363,
    c,
    [95, 10],
    361,
    c,
    [48, 36],
    364,
    c,
    [143, 46],
    365,
    c,
    [47, 46],
    366,
    c,
    [1406, 47],
    367,
    c,
    [942, 16],
    370,
    368,
    64,
    369,
    c,
    [830, 5],
    373,
    c,
    [830, 44],
    374,
    c,
    [119, 46],
    375,
    c,
    [47, 46],
    376,
    377,
    111,
    379,
    c,
    [50, 46],
    384,
    c,
    [47, 6],
    381,
    383,
    c,
    [49, 40],
    c,
    [1835, 7],
    386,
    c,
    [103, 46],
    c,
    [54, 7],
    390,
    c,
    [1945, 48],
    391,
    c,
    [49, 19],
    394,
    c,
    [1009, 17],
    14,
    393,
    30,
    392,
    c,
    [51, 9],
    191,
    395,
    c,
    [1887, 4],
    c,
    [57, 20],
    c,
    [106, 29],
    399,
    408,
    410,
    412,
    191,
    417,
    190,
    192,
    415,
    416,
    418,
    419,
    104,
    264,
    c,
    [2005, 8],
    c,
    [223, 39],
    198,
    421,
    c,
    [48, 7],
    424,
    c,
    [272, 46],
    c,
    [2161, 4],
    279,
    248,
    179,
    c,
    [14, 7],
    c,
    [7, 21],
    426,
    c,
    [361, 53],
    427,
    c,
    [54, 46],
    429,
    c,
    [47, 7],
    428,
    c,
    [48, 31],
    430,
    c,
    [102, 13],
    433,
    129,
    277,
    3,
    434,
    c,
    [358, 46],
    435,
    c,
    [152, 46],
    436,
    248,
    c,
    [1829, 18],
    443,
    442,
    c,
    [1829, 3],
    202,
    c,
    [293, 14],
    452,
    c,
    [87, 3],
    450,
    c,
    [87, 5],
    447,
    448,
    449,
    454,
    c,
    [91, 37],
    459,
    462,
    c,
    [139, 7],
    461,
    c,
    [140, 29],
    463,
    c,
    [49, 9],
    464,
    467,
    33,
    468,
    c,
    [2434, 18],
    469,
    c,
    [70, 7],
    471,
    c,
    [210, 31],
    470,
    c,
    [70, 7],
    472,
    474,
    c,
    [179, 7],
    476,
    3,
    475,
    c,
    [315, 46],
    480,
    477,
    254,
    483,
    485,
    c,
    [2110, 6],
    488,
    59,
    486,
    489,
    490,
    c,
    [330, 46],
    494,
    491,
    492,
    248,
    497,
    c,
    [2162, 21],
    498,
    267,
    248,
    c,
    [647, 4],
    274,
    499,
    274,
    500,
    501,
    502,
    c,
    [157, 7],
    505,
    c,
    [830, 48],
    506,
    510,
    c,
    [48, 7],
    509,
    c,
    [144, 39],
    285,
    511,
    292,
    285,
    512,
    285,
    513,
    292,
    c,
    [1905, 9],
    515,
    c,
    [1905, 3],
    516,
    c,
    [470, 14],
    519,
    c,
    [763, 52],
    520,
    c,
    [661, 3],
    523,
    c,
    [3070, 53],
    c,
    [7, 7],
    524,
    c,
    [2130, 7],
    526,
    c,
    [2130, 15],
    529,
    c,
    [2130, 49],
    33,
    531,
    c,
    [560, 18],
    c,
    [364, 5],
    535,
    533,
    536,
    c,
    [2208, 39],
    537,
    c,
    [78, 10],
    538,
    c,
    [1033, 53],
    540,
    c,
    [54, 46],
    541,
    543,
    191,
    545,
    c,
    [1343, 4],
    335,
    103,
    547,
    548,
    c,
    [58, 46],
    551,
    c,
    [458, 9],
    552,
    c,
    [458, 3],
    c,
    [13, 6],
    557,
    555,
    556,
    558,
    c,
    [12, 9],
    562,
    c,
    [12, 4],
    560,
    567,
    563,
    565,
    352,
    111,
    569,
    570,
    c,
    [204, 53],
    c,
    [7, 35],
    573,
    c,
    [89, 10],
    572,
    c,
    [90, 64],
    c,
    [1148, 18],
    579,
    578,
    64,
    c,
    [42, 21],
    581,
    c,
    [1862, 7],
    583,
    c,
    [1862, 48],
    585,
    c,
    [264, 53],
    588,
    c,
    [926, 48],
    c,
    [629, 5],
    399,
    594,
    c,
    [53, 7],
    592,
    c,
    [110, 39],
    191,
    596,
    c,
    [521, 3],
    600,
    c,
    [53, 7],
    599,
    c,
    [53, 39],
    601,
    c,
    [210, 46],
    602,
    c,
    [47, 46],
    603,
    c,
    [47, 46],
    608,
    614,
    612,
    536,
    191,
    615,
    190,
    192,
    285,
    616,
    285,
    617,
    292,
    c,
    [2179, 9],
    619,
    c,
    [317, 46],
    620,
    c,
    [684, 67],
    623,
    625,
    c,
    [69, 7],
    624,
    c,
    [70, 53],
    627,
    c,
    [131, 46],
    628,
    c,
    [47, 46],
    629,
    c,
    [47, 46],
    630,
    c,
    [47, 46],
    631,
    c,
    [2920, 47],
    c,
    [884, 16],
    632,
    c,
    [1332, 3],
    202,
    634,
    c,
    [69, 46],
    c,
    [2063, 10],
    635,
    c,
    [2063, 40],
    640,
    644,
    645,
    c,
    [100, 7],
    646,
    c,
    [419, 46],
    173,
    c,
    [3076, 5],
    648,
    c,
    [3075, 43],
    c,
    [49, 5],
    649,
    c,
    [49, 48],
    650,
    c,
    [49, 43],
    c,
    [256, 10],
    651,
    c,
    [256, 40],
    653,
    c,
    [254, 7],
    652,
    c,
    [254, 46],
    654,
    248,
    656,
    33,
    657,
    c,
    [1766, 18],
    167,
    658,
    c,
    [1137, 3],
    c,
    [35, 7],
    660,
    661,
    c,
    [9, 7],
    664,
    480,
    666,
    672,
    669,
    670,
    480,
    675,
    680,
    c,
    [849, 53],
    685,
    494,
    688,
    492,
    c,
    [2240, 21],
    689,
    497,
    695,
    c,
    [35, 7],
    c,
    [1666, 9],
    700,
    c,
    [1666, 3],
    551,
    c,
    [310, 5],
    702,
    c,
    [310, 43],
    703,
    c,
    [71, 7],
    705,
    c,
    [160, 7],
    704,
    c,
    [56, 31],
    706,
    c,
    [3236, 9],
    708,
    c,
    [2160, 53],
    c,
    [2152, 7],
    713,
    c,
    [2151, 14],
    715,
    716,
    c,
    [77, 7],
    717,
    c,
    [183, 39],
    720,
    c,
    [48, 7],
    721,
    c,
    [3195, 50],
    c,
    [2181, 39],
    726,
    727,
    c,
    [60, 8],
    535,
    730,
    536,
    c,
    [1178, 14],
    731,
    399,
    c,
    [380, 16],
    734,
    c,
    [379, 3],
    738,
    c,
    [14, 9],
    739,
    c,
    [394, 3],
    746,
    c,
    [2049, 12],
    748,
    750,
    567,
    752,
    565,
    c,
    [52, 7],
    c,
    [4113, 11],
    755,
    c,
    [186, 43],
    758,
    c,
    [576, 46],
    759,
    c,
    [47, 46],
    760,
    c,
    [1200, 63],
    761,
    c,
    [1200, 3],
    c,
    [2063, 7],
    766,
    c,
    [69, 40],
    767,
    c,
    [218, 7],
    772,
    c,
    [124, 7],
    770,
    c,
    [56, 39],
    774,
    c,
    [48, 7],
    773,
    c,
    [507, 46],
    776,
    c,
    [55, 7],
    775,
    c,
    [2057, 40],
    777,
    c,
    [2057, 3],
    191,
    778,
    c,
    [2584, 4],
    c,
    [2352, 28],
    782,
    412,
    191,
    785,
    190,
    192,
    788,
    c,
    [320, 46],
    c,
    [3955, 4],
    791,
    792,
    c,
    [560, 9],
    794,
    c,
    [560, 3],
    c,
    [93, 21],
    796,
    c,
    [2610, 73],
    799,
    c,
    [8, 7],
    801,
    129,
    803,
    c,
    [445, 17],
    807,
    210,
    c,
    [2529, 8],
    c,
    [1347, 10],
    809,
    c,
    [1347, 40],
    c,
    [51, 10],
    810,
    c,
    [50, 39],
    811,
    c,
    [213, 7],
    812,
    c,
    [214, 39],
    813,
    815,
    816,
    c,
    [50, 7],
    817,
    c,
    [264, 46],
    c,
    [1292, 5],
    818,
    c,
    [4776, 44],
    c,
    [57, 7],
    821,
    c,
    [112, 7],
    820,
    c,
    [55, 39],
    167,
    822,
    c,
    [1111, 3],
    824,
    826,
    829,
    832,
    672,
    836,
    670,
    837,
    480,
    838,
    c,
    [70, 7],
    494,
    841,
    843,
    846,
    685,
    c,
    [1469, 21],
    848,
    c,
    [22, 21],
    849,
    267,
    c,
    [1075, 7],
    850,
    c,
    [1075, 4],
    853,
    855,
    857,
    858,
    551,
    864,
    866,
    c,
    [513, 53],
    391,
    3,
    867,
    c,
    [4672, 40],
    868,
    c,
    [58, 14],
    870,
    c,
    [1032, 47],
    c,
    [1485, 6],
    871,
    c,
    [1485, 14],
    c,
    [22, 7],
    872,
    c,
    [3659, 15],
    c,
    [2699, 9],
    874,
    c,
    [1593, 53],
    390,
    3,
    875,
    c,
    [56, 46],
    c,
    [3589, 47],
    c,
    [1559, 39],
    877,
    c,
    [3740, 10],
    c,
    [50, 39],
    878,
    c,
    [49, 9],
    c,
    [1009, 9],
    880,
    c,
    [3616, 8],
    c,
    [12, 3],
    881,
    c,
    [1595, 3],
    c,
    [13, 9],
    884,
    c,
    [3654, 10],
    886,
    c,
    [3653, 10],
    889,
    c,
    [11, 10],
    894,
    c,
    [540, 4],
    746,
    567,
    898,
    750,
    c,
    [16, 7],
    900,
    c,
    [16, 4],
    c,
    [1619, 11],
    903,
    c,
    [1064, 57],
    904,
    c,
    [661, 17],
    905,
    210,
    64,
    c,
    [1492, 7],
    906,
    c,
    [5465, 47],
    907,
    c,
    [3603, 41],
    911,
    c,
    [187, 7],
    910,
    c,
    [1251, 60],
    912,
    913,
    c,
    [491, 46],
    914,
    412,
    915,
    412,
    916,
    c,
    [858, 53],
    c,
    [3416, 4],
    c,
    [1469, 4],
    917,
    418,
    551,
    c,
    [18, 7],
    919,
    c,
    [72, 46],
    920,
    c,
    [47, 46],
    922,
    c,
    [47, 7],
    921,
    c,
    [48, 39],
    924,
    c,
    [48, 7],
    923,
    c,
    [48, 39],
    925,
    c,
    [143, 46],
    926,
    c,
    [1370, 12],
    c,
    [3021, 44],
    c,
    [432, 14],
    929,
    931,
    932,
    933,
    672,
    934,
    936,
    938,
    939,
    832,
    943,
    494,
    944,
    945,
    497,
    c,
    [715, 7],
    948,
    c,
    [4407, 11],
    949,
    c,
    [12, 4],
    953,
    954,
    857,
    858,
    955,
    285,
    958,
    959,
    c,
    [500, 21],
    715,
    c,
    [15, 14],
    965,
    c,
    [201, 7],
    967,
    c,
    [145, 39],
    535,
    968,
    536,
    c,
    [886, 7],
    557,
    973,
    c,
    [119, 10],
    974,
    c,
    [11, 10],
    975,
    c,
    [11, 10],
    976,
    c,
    [11, 10],
    977,
    c,
    [164, 11],
    978,
    c,
    [12, 4],
    567,
    980,
    567,
    981,
    c,
    [16, 7],
    983,
    c,
    [28, 11],
    984,
    c,
    [12, 4],
    986,
    c,
    [349, 46],
    987,
    988,
    c,
    [233, 21],
    285,
    992,
    c,
    [9, 6],
    993,
    c,
    [17, 7],
    995,
    c,
    [2016, 21],
    998,
    129,
    999,
    c,
    [110, 46],
    1003,
    672,
    1005,
    1006,
    1009,
    1010,
    1012,
    858,
    953,
    1017,
    1016,
    c,
    [180, 7],
    1018,
    c,
    [180, 4],
    c,
    [1389, 9],
    1020,
    c,
    [1445, 53],
    1028,
    c,
    [133, 46],
    1031,
    c,
    [47, 7],
    1030,
    c,
    [48, 39],
    1033,
    c,
    [48, 7],
    1032,
    c,
    [48, 39],
    1034,
    c,
    [48, 7],
    1035,
    c,
    [679, 45],
    1037,
    129,
    1041,
    858,
    1042,
    858,
    1044,
    c,
    [279, 7],
    1045,
    c,
    [279, 11],
    c,
    [7, 28],
    1047,
    c,
    [108, 7],
    1048,
    c,
    [787, 46],
    c,
    [102, 7],
    1054,
    c,
    [102, 4]
  ]),
    mode: u([
    2,
    s,
    [1, 64],
    2,
    1,
    c,
    [67, 10],
    c,
    [12, 3],
    2,
    c,
    [81, 34],
    s,
    [2, 5],
    c,
    [7, 7],
    s,
    [2, 12],
    c,
    [18, 18],
    s,
    [2, 19],
    c,
    [56, 18],
    c,
    [17, 3],
    c,
    [77, 19],
    s,
    [2, 63],
    c,
    [81, 80],
    c,
    [293, 11],
    s,
    [1, 137],
    s,
    [2, 81],
    c,
    [514, 5],
    c,
    [154, 69],
    s,
    [1, 345],
    c,
    [778, 70],
    c,
    [72, 9],
    c,
    [276, 247],
    c,
    [293, 29],
    c,
    [85, 26],
    c,
    [106, 60],
    c,
    [1335, 9],
    c,
    [92, 11],
    c,
    [9, 5],
    c,
    [1279, 4],
    c,
    [891, 6],
    c,
    [122, 8],
    c,
    [42, 7],
    c,
    [47, 8],
    c,
    [137, 24],
    c,
    [1454, 7],
    c,
    [8, 6],
    c,
    [46, 7],
    c,
    [4, 7],
    c,
    [472, 9],
    c,
    [481, 21],
    c,
    [1231, 8],
    c,
    [29, 22],
    c,
    [431, 108],
    c,
    [12, 10],
    c,
    [454, 37],
    c,
    [36, 22],
    c,
    [181, 8],
    c,
    [1141, 347],
    c,
    [97, 98],
    c,
    [514, 5],
    c,
    [126, 29],
    c,
    [746, 6],
    c,
    [1633, 353],
    s,
    [1, 351],
    c,
    [697, 27],
    c,
    [2756, 81],
    c,
    [64, 47],
    c,
    [494, 349],
    c,
    [1774, 17],
    c,
    [2063, 11],
    c,
    [516, 13],
    c,
    [2256, 28],
    c,
    [145, 71],
    c,
    [1919, 22],
    c,
    [145, 14],
    c,
    [1942, 12],
    c,
    [145, 92],
    c,
    [430, 142],
    c,
    [235, 9],
    c,
    [8, 17],
    c,
    [1702, 10],
    c,
    [3301, 148],
    c,
    [616, 26],
    c,
    [598, 10],
    c,
    [1137, 25],
    c,
    [2613, 8],
    c,
    [1071, 27],
    c,
    [4058, 79],
    c,
    [79, 58],
    s,
    [2, 86],
    c,
    [507, 9],
    c,
    [2845, 7],
    c,
    [802, 32],
    c,
    [838, 11],
    c,
    [802, 32],
    c,
    [79, 35],
    c,
    [3046, 12],
    c,
    [79, 190],
    c,
    [1327, 209],
    c,
    [4197, 256],
    c,
    [575, 34],
    c,
    [592, 22],
    c,
    [1312, 31],
    c,
    [4772, 63],
    c,
    [511, 14],
    c,
    [4742, 145],
    c,
    [5309, 79],
    c,
    [3953, 125],
    c,
    [4359, 22],
    c,
    [352, 97],
    c,
    [4477, 79],
    c,
    [5726, 84],
    c,
    [1195, 147],
    c,
    [128, 8],
    c,
    [409, 83],
    c,
    [1905, 82],
    c,
    [414, 79],
    c,
    [657, 29],
    c,
    [190, 85],
    c,
    [4943, 13],
    c,
    [5884, 184],
    c,
    [4444, 9],
    c,
    [5160, 24],
    c,
    [2315, 78],
    c,
    [6578, 110],
    c,
    [1625, 55],
    c,
    [2883, 69],
    c,
    [5101, 220],
    c,
    [1276, 68],
    c,
    [601, 15],
    c,
    [2097, 86],
    c,
    [1126, 54],
    c,
    [330, 98],
    c,
    [2356, 26],
    c,
    [1103, 18],
    c,
    [3860, 130],
    c,
    [145, 101],
    c,
    [2671, 56],
    c,
    [3057, 89],
    c,
    [710, 20],
    c,
    [6516, 8],
    c,
    [993, 107],
    c,
    [4058, 80],
    c,
    [79, 183],
    c,
    [1113, 53],
    c,
    [237, 107],
    c,
    [3881, 9],
    c,
    [1004, 31],
    c,
    [1227, 26],
    c,
    [5613, 65],
    c,
    [618, 171],
    c,
    [302, 52],
    c,
    [79, 106],
    c,
    [2030, 54],
    c,
    [397, 20],
    c,
    [2704, 63],
    c,
    [531, 49],
    c,
    [371, 157],
    c,
    [1551, 48],
    c,
    [1732, 79],
    c,
    [8879, 212],
    c,
    [560, 59],
    c,
    [3349, 63],
    c,
    [62, 30],
    c,
    [9764, 10],
    c,
    [9823, 14],
    c,
    [237, 64],
    c,
    [5027, 269],
    c,
    [8784, 13],
    c,
    [6626, 16],
    c,
    [3277, 264],
    c,
    [6456, 127],
    c,
    [4375, 60],
    c,
    [375, 82],
    c,
    [3546, 60],
    c,
    [568, 270],
    c,
    [3984, 133],
    c,
    [4951, 32],
    c,
    [6228, 153],
    c,
    [818, 30],
    c,
    [4686, 9],
    c,
    [158, 112],
    c,
    [9542, 193],
    c,
    [8471, 237],
    c,
    [6181, 31],
    c,
    [1433, 40],
    c,
    [11038, 26],
    c,
    [439, 32],
    c,
    [69, 17],
    c,
    [5424, 15],
    c,
    [1507, 26],
    c,
    [1510, 15],
    c,
    [4608, 15],
    c,
    [1675, 149],
    c,
    [5553, 148],
    c,
    [1835, 22],
    c,
    [870, 52],
    c,
    [1138, 74],
    c,
    [5403, 80],
    c,
    [4992, 14],
    c,
    [10499, 13],
    c,
    [4786, 27],
    c,
    [1991, 96],
    c,
    [1324, 91],
    c,
    [2178, 220],
    c,
    [142, 39],
    c,
    [8847, 8],
    c,
    [489, 33],
    c,
    [1867, 6],
    c,
    [1632, 135],
    c,
    [4114, 26],
    c,
    [3257, 20],
    c,
    [502, 27],
    c,
    [3612, 64],
    c,
    [5810, 48],
    c,
    [48, 41],
    c,
    [3786, 50],
    c,
    [232, 18],
    c,
    [4404, 36],
    c,
    [7912, 139],
    c,
    [13562, 9],
    c,
    [1029, 21],
    c,
    [9248, 11],
    c,
    [11929, 216],
    c,
    [3076, 173],
    c,
    [12889, 11],
    c,
    [59, 19],
    c,
    [5270, 33],
    c,
    [857, 37],
    c,
    [398, 170],
    c,
    [1610, 155],
    c,
    [11142, 88],
    c,
    [4629, 13],
    c,
    [4679, 50],
    c,
    [50, 78],
    c,
    [6954, 11],
    c,
    [1713, 12],
    c,
    [7521, 101],
    c,
    [657, 42],
    c,
    [6929, 158],
    c,
    [30, 14],
    c,
    [5084, 12],
    c,
    [3188, 10],
    c,
    [13859, 26],
    c,
    [50, 7],
    c,
    [1017, 39],
    c,
    [4604, 261],
    c,
    [11268, 11],
    c,
    [576, 36],
    c,
    [10369, 150],
    c,
    [5831, 174],
    c,
    [4583, 113],
    c,
    [4711, 14],
    c,
    [13945, 14],
    c,
    [3510, 71],
    c,
    [10674, 81],
    c,
    [4188, 62],
    c,
    [8655, 70],
    c,
    [244, 8],
    c,
    [9785, 34],
    c,
    [767, 50],
    c,
    [1192, 9],
    c,
    [399, 8],
    c,
    [13532, 143],
    c,
    [6185, 237],
    c,
    [3752, 40],
    c,
    [1688, 102],
    c,
    [35, 36],
    c,
    [178, 38],
    c,
    [3707, 21],
    c,
    [7077, 98],
    c,
    [2804, 116],
    c,
    [1658, 214],
    c,
    [332, 58],
    c,
    [58, 15],
    c,
    [16240, 10],
    c,
    [704, 16],
    c,
    [3242, 144],
    c,
    [9003, 131],
    c,
    [2323, 46],
    c,
    [7698, 271],
    c,
    [79, 83],
    c,
    [3641, 75],
    c,
    [2984, 139],
    c,
    [4280, 17],
    c,
    [158, 40],
    c,
    [2270, 12],
    c,
    [18636, 13],
    c,
    [7874, 392],
    c,
    [1089, 14],
    c,
    [3065, 118],
    c,
    [121, 45],
    c,
    [3091, 90],
    c,
    [960, 9],
    c,
    [5878, 18],
    c,
    [9625, 71],
    c,
    [697, 41],
    c,
    [3120, 9],
    c,
    [17985, 9],
    c,
    [4103, 96],
    c,
    [2535, 38],
    c,
    [128, 80],
    c,
    [15795, 58],
    c,
    [674, 102],
    c,
    [798, 8],
    c,
    [6150, 81],
    c,
    [13777, 102],
    c,
    [7484, 69],
    c,
    [1723, 18],
    c,
    [1171, 105],
    c,
    [19931, 14],
    c,
    [1588, 81],
    c,
    [5422, 43],
    c,
    [1786, 49],
    c,
    [18858, 99],
    c,
    [12176, 104],
    c,
    [4455, 119],
    c,
    [4516, 69],
    c,
    [844, 75],
    c,
    [3894, 9],
    c,
    [17959, 30],
    c,
    [2487, 106],
    c,
    [1062, 81],
    c,
    [81, 86],
    c,
    [1081, 14],
    c,
    [11960, 124],
    c,
    [10427, 273],
    c,
    [10224, 8],
    c,
    [1499, 35],
    c,
    [6574, 63],
    c,
    [3882, 77],
    c,
    [1248, 132],
    c,
    [1327, 152],
    c,
    [157, 101],
    s,
    [2, 5]
  ]),
    goto: u([
    1,
    40,
    82,
    83,
    84,
    87,
    98,
    65,
    99,
    s,
    [26, 4, 1],
    s,
    [41, 5, 1],
    88,
    80,
    81,
    85,
    86,
    73,
    54,
    50,
    51,
    18,
    108,
    93,
    90,
    91,
    92,
    109,
    38,
    78,
    79,
    s,
    [68, 5, 1],
    101,
    110,
    114,
    102,
    112,
    76,
    77,
    113,
    105,
    106,
    107,
    62,
    94,
    19,
    23,
    61,
    60,
    95,
    96,
    97,
    56,
    57,
    58,
    2,
    115,
    6,
    135,
    137,
    133,
    139,
    143,
    152,
    153,
    160,
    161,
    6,
    126,
    s,
    [6, 3],
    118,
    119,
    122,
    123,
    125,
    144,
    146,
    131,
    s,
    [132, 5, 2],
    141,
    142,
    145,
    s,
    [147, 5, 1],
    s,
    [154, 6, 1],
    162,
    130,
    127,
    128,
    90,
    91,
    s,
    [7, 5],
    164,
    165,
    s,
    [9, 17],
    170,
    s,
    [9, 36],
    168,
    172,
    s,
    [9, 16],
    171,
    9,
    9,
    110,
    114,
    9,
    9,
    s,
    [420, 78],
    94,
    420,
    s,
    [422, 78],
    94,
    422,
    c,
    [360, 16],
    176,
    c,
    [361, 48],
    c,
    [65, 5],
    182,
    c,
    [65, 10],
    181,
    c,
    [65, 8],
    180,
    c,
    [66, 40],
    185,
    183,
    181,
    180,
    196,
    197,
    187,
    194,
    195,
    193,
    200,
    27,
    28,
    201,
    199,
    s,
    [346, 3],
    s,
    [247, 78],
    203,
    204,
    205,
    247,
    c,
    [591, 64],
    211,
    c,
    [60, 3],
    213,
    356,
    212,
    208,
    c,
    [39, 21],
    c,
    [93, 64],
    c,
    [64, 144],
    218,
    c,
    [65, 64],
    220,
    c,
    [65, 48],
    s,
    [196, 50],
    225,
    s,
    [196, 19],
    223,
    224,
    s,
    [196, 7],
    c,
    [144, 6],
    227,
    c,
    [273, 57],
    229,
    90,
    91,
    c,
    [340, 80],
    239,
    c,
    [65, 8],
    240,
    c,
    [66, 40],
    s,
    [207, 67],
    242,
    s,
    [207, 11],
    185,
    245,
    181,
    246,
    180,
    94,
    s,
    [374, 20],
    247,
    356,
    s,
    [374, 58],
    249,
    113,
    s,
    [374, 4],
    505,
    c,
    [238, 5],
    s,
    [505, 8],
    98,
    s,
    [505, 4],
    65,
    505,
    505,
    99,
    505,
    505,
    c,
    [254, 3],
    505,
    505,
    c,
    [256, 5],
    251,
    505,
    45,
    s,
    [505, 5],
    88,
    s,
    [505, 4],
    c,
    [266, 4],
    s,
    [505, 19],
    73,
    s,
    [505, 4],
    54,
    505,
    50,
    s,
    [505, 3],
    51,
    505,
    18,
    505,
    108,
    505,
    505,
    93,
    s,
    [505, 4],
    92,
    109,
    505,
    505,
    38,
    78,
    505,
    505,
    79,
    505,
    c,
    [303, 8],
    505,
    c,
    [304, 20],
    505,
    526,
    526,
    253,
    526,
    94,
    260,
    c,
    [934, 3],
    256,
    54,
    261,
    257,
    c,
    [32, 6],
    s,
    [94, 4, 1],
    c,
    [955, 7],
    266,
    73,
    c,
    [368, 21],
    273,
    272,
    94,
    c,
    [960, 17],
    278,
    c,
    [493, 48],
    281,
    280,
    172,
    282,
    s,
    [324, 11],
    185,
    s,
    [324, 9],
    284,
    181,
    s,
    [324, 35],
    180,
    s,
    [324, 20],
    356,
    287,
    113,
    94,
    356,
    289,
    113,
    94,
    185,
    356,
    181,
    180,
    291,
    c,
    [653, 69],
    152,
    153,
    c,
    [66, 13],
    298,
    299,
    c,
    [68, 4],
    c,
    [1799, 8],
    c,
    [729, 48],
    301,
    c,
    [140, 62],
    c,
    [1584, 61],
    c,
    [66, 66],
    211,
    98,
    306,
    65,
    313,
    c,
    [532, 3],
    308,
    73,
    314,
    38,
    78,
    311,
    c,
    [1490, 24],
    325,
    c,
    [304, 3],
    318,
    c,
    [101, 8],
    320,
    c,
    [101, 7],
    322,
    c,
    [233, 41],
    328,
    326,
    345,
    331,
    345,
    345,
    329,
    330,
    345,
    334,
    102,
    112,
    348,
    341,
    347,
    337,
    c,
    [44, 10],
    94,
    346,
    110,
    114,
    351,
    4,
    c,
    [329, 6],
    4,
    65,
    4,
    99,
    4,
    c,
    [101, 8],
    4,
    c,
    [1594, 192],
    c,
    [64, 181],
    c,
    [653, 66],
    c,
    [130, 11],
    362,
    c,
    [323, 240],
    c,
    [1375, 7],
    c,
    [1374, 22],
    c,
    [35, 3],
    s,
    [88, 17],
    371,
    s,
    [88, 46],
    s,
    [90, 17],
    372,
    s,
    [90, 46],
    c,
    [1276, 82],
    c,
    [364, 122],
    172,
    110,
    114,
    378,
    c,
    [132, 80],
    382,
    c,
    [65, 7],
    380,
    385,
    c,
    [67, 41],
    426,
    c,
    [3418, 9],
    s,
    [426, 4],
    126,
    s,
    [426, 9],
    118,
    119,
    426,
    123,
    s,
    [426, 5],
    c,
    [3429, 16],
    426,
    426,
    c,
    [3429, 3],
    s,
    [426, 25],
    c,
    [210, 64],
    164,
    165,
    22,
    c,
    [145, 4],
    s,
    [22, 9],
    126,
    s,
    [22, 9],
    118,
    119,
    22,
    123,
    s,
    [22, 5],
    c,
    [145, 8],
    s,
    [22, 6],
    154,
    155,
    s,
    [22, 4],
    162,
    s,
    [22, 25],
    388,
    387,
    c,
    [147, 16],
    389,
    c,
    [358, 54],
    c,
    [1638, 3],
    c,
    [66, 8],
    308,
    c,
    [66, 7],
    314,
    c,
    [67, 12],
    c,
    [1659, 20],
    c,
    [2837, 11],
    197,
    396,
    c,
    [3348, 3],
    c,
    [286, 64],
    398,
    124,
    397,
    124,
    400,
    s,
    [380, 7],
    401,
    s,
    [382, 7],
    402,
    s,
    [385, 7],
    403,
    404,
    406,
    405,
    407,
    272,
    409,
    272,
    272,
    413,
    411,
    195,
    193,
    325,
    196,
    197,
    414,
    c,
    [112, 3],
    356,
    420,
    113,
    c,
    [3281, 65],
    c,
    [3528, 4],
    c,
    [1371, 8],
    423,
    c,
    [69, 8],
    422,
    c,
    [1372, 49],
    37,
    c,
    [616, 9],
    s,
    [37, 4],
    126,
    s,
    [37, 9],
    c,
    [4043, 7],
    37,
    37,
    c,
    [4045, 21],
    s,
    [37, 7],
    130,
    37,
    37,
    127,
    128,
    37,
    37,
    90,
    91,
    s,
    [37, 9],
    s,
    [40, 17],
    170,
    s,
    [40, 36],
    168,
    172,
    s,
    [40, 16],
    171,
    40,
    40,
    110,
    114,
    40,
    40,
    s,
    [111, 17],
    281,
    s,
    [111, 36],
    280,
    172,
    s,
    [111, 16],
    282,
    s,
    [111, 6],
    s,
    [374, 20],
    c,
    [2969, 59],
    c,
    [2972, 6],
    425,
    346,
    c,
    [3919, 4],
    185,
    181,
    180,
    s,
    [41, 3],
    133,
    139,
    s,
    [41, 9],
    126,
    s,
    [41, 9],
    118,
    119,
    41,
    123,
    s,
    [41, 5],
    c,
    [331, 3],
    41,
    c,
    [331, 4],
    s,
    [41, 6],
    154,
    155,
    s,
    [41, 4],
    162,
    s,
    [41, 25],
    s,
    [42, 3],
    133,
    139,
    s,
    [42, 9],
    126,
    s,
    [42, 9],
    118,
    119,
    42,
    123,
    s,
    [42, 5],
    131,
    132,
    42,
    42,
    c,
    [79, 4],
    s,
    [42, 6],
    154,
    155,
    s,
    [42, 4],
    162,
    s,
    [42, 25],
    s,
    [43, 3],
    133,
    139,
    s,
    [43, 9],
    126,
    s,
    [43, 9],
    118,
    119,
    43,
    123,
    s,
    [43, 5],
    131,
    132,
    43,
    43,
    c,
    [79, 4],
    s,
    [43, 6],
    154,
    155,
    s,
    [43, 4],
    162,
    s,
    [43, 25],
    s,
    [44, 3],
    133,
    139,
    s,
    [44, 9],
    126,
    s,
    [44, 9],
    118,
    119,
    44,
    123,
    s,
    [44, 5],
    131,
    132,
    44,
    44,
    c,
    [79, 4],
    s,
    [44, 6],
    154,
    155,
    s,
    [44, 4],
    162,
    s,
    [44, 25],
    c,
    [782, 64],
    46,
    c,
    [711, 9],
    s,
    [46, 4],
    126,
    s,
    [46, 9],
    118,
    119,
    46,
    123,
    s,
    [46, 5],
    c,
    [711, 16],
    46,
    46,
    c,
    [711, 3],
    s,
    [46, 25],
    c,
    [2292, 75],
    431,
    c,
    [2293, 55],
    c,
    [209, 9],
    185,
    126,
    432,
    181,
    c,
    [4953, 28],
    180,
    c,
    [4954, 5],
    c,
    [3424, 65],
    c,
    [243, 64],
    90,
    91,
    s,
    [437, 4, 1],
    s,
    [374, 9],
    441,
    c,
    [856, 4],
    247,
    s,
    [356, 3],
    s,
    [374, 30],
    c,
    [31, 12],
    c,
    [3816, 5],
    c,
    [3658, 30],
    444,
    143,
    143,
    144,
    144,
    425,
    425,
    s,
    [247, 44],
    170,
    170,
    c,
    [4772, 11],
    c,
    [341, 9],
    145,
    145,
    126,
    c,
    [340, 28],
    145,
    c,
    [340, 5],
    c,
    [46, 9],
    126,
    445,
    c,
    [45, 28],
    446,
    c,
    [385, 21],
    c,
    [320, 9],
    457,
    51,
    451,
    453,
    455,
    456,
    c,
    [323, 36],
    458,
    s,
    [208, 66],
    460,
    s,
    [208, 12],
    c,
    [2938, 66],
    s,
    [126, 11],
    185,
    s,
    [126, 9],
    465,
    181,
    s,
    [126, 35],
    466,
    180,
    s,
    [126, 20],
    c,
    [1318, 3],
    c,
    [2764, 29],
    c,
    [178, 66],
    s,
    [352, 20],
    328,
    s,
    [352, 58],
    473,
    352,
    s,
    [356, 79],
    113,
    356,
    506,
    c,
    [599, 9],
    s,
    [506, 4],
    126,
    s,
    [506, 9],
    118,
    119,
    506,
    123,
    s,
    [506, 5],
    c,
    [613, 16],
    506,
    506,
    c,
    [613, 3],
    s,
    [506, 25],
    c,
    [952, 64],
    479,
    481,
    478,
    482,
    94,
    s,
    [526, 4],
    94,
    484,
    124,
    c,
    [4569, 4],
    54,
    261,
    487,
    c,
    [4568, 10],
    c,
    [93, 64],
    493,
    94,
    495,
    s,
    [356, 79],
    249,
    113,
    356,
    s,
    [494, 10],
    496,
    s,
    [494, 68],
    c,
    [657, 29],
    s,
    [504, 20],
    356,
    s,
    [504, 58],
    c,
    [1251, 5],
    504,
    170,
    168,
    172,
    171,
    110,
    114,
    94,
    94,
    113,
    c,
    [528, 4],
    c,
    [1125, 10],
    503,
    c,
    [6464, 34],
    504,
    115,
    c,
    [3295, 65],
    507,
    508,
    c,
    [6222, 67],
    284,
    181,
    180,
    356,
    113,
    c,
    [6, 4],
    185,
    356,
    c,
    [5, 3],
    514,
    c,
    [4475, 16],
    328,
    s,
    [256, 3],
    133,
    139,
    s,
    [256, 9],
    126,
    s,
    [256, 9],
    118,
    119,
    256,
    123,
    s,
    [256, 5],
    c,
    [227, 3],
    256,
    c,
    [227, 4],
    s,
    [256, 6],
    154,
    155,
    s,
    [256, 4],
    162,
    s,
    [256, 25],
    s,
    [59, 31],
    517,
    s,
    [59, 47],
    s,
    [63, 32],
    518,
    s,
    [63, 46],
    65,
    c,
    [451, 9],
    s,
    [65, 4],
    126,
    s,
    [65, 9],
    c,
    [462, 7],
    65,
    65,
    c,
    [464, 21],
    s,
    [65, 7],
    130,
    65,
    65,
    127,
    128,
    65,
    65,
    90,
    91,
    s,
    [65, 9],
    c,
    [482, 64],
    c,
    [142, 9],
    522,
    126,
    521,
    c,
    [2105, 100],
    c,
    [705, 10],
    229,
    c,
    [704, 33],
    210,
    c,
    [45, 9],
    s,
    [210, 4],
    126,
    s,
    [210, 9],
    118,
    119,
    210,
    123,
    s,
    [210, 5],
    c,
    [59, 16],
    210,
    210,
    c,
    [59, 3],
    s,
    [210, 14],
    c,
    [70, 3],
    s,
    [210, 8],
    525,
    s,
    [124, 3],
    c,
    [959, 3],
    c,
    [5223, 4],
    c,
    [5222, 24],
    s,
    [251, 9],
    277,
    277,
    c,
    [4, 4],
    c,
    [5, 3],
    s,
    [251, 37],
    527,
    s,
    [301, 11],
    528,
    s,
    [301, 41],
    c,
    [5331, 68],
    c,
    [1167, 10],
    530,
    c,
    [40, 19],
    290,
    356,
    290,
    374,
    290,
    356,
    356,
    290,
    290,
    c,
    [2364, 7],
    c,
    [1105, 5],
    c,
    [1104, 3],
    532,
    c,
    [1105, 3],
    534,
    413,
    124,
    124,
    c,
    [130, 9],
    c,
    [574, 15],
    c,
    [128, 42],
    c,
    [639, 73],
    411,
    126,
    s,
    [411, 4],
    c,
    [531, 28],
    539,
    c,
    [2361, 30],
    c,
    [113, 39],
    s,
    [415, 5],
    325,
    s,
    [415, 4],
    542,
    s,
    [415, 58],
    328,
    196,
    197,
    544,
    c,
    [3993, 3],
    c,
    [5703, 3],
    546,
    c,
    [144, 64],
    550,
    124,
    124,
    549,
    c,
    [1297, 3],
    c,
    [1296, 12],
    s,
    [474, 4],
    553,
    463,
    554,
    474,
    s,
    [476, 4],
    465,
    476,
    c,
    [29, 15],
    559,
    c,
    [16, 3],
    561,
    c,
    [17, 12],
    564,
    566,
    94,
    110,
    114,
    568,
    351,
    c,
    [136, 64],
    39,
    c,
    [394, 9],
    s,
    [39, 4],
    126,
    s,
    [39, 9],
    c,
    [402, 7],
    39,
    39,
    c,
    [404, 21],
    s,
    [39, 7],
    130,
    39,
    39,
    127,
    128,
    39,
    39,
    90,
    91,
    s,
    [39, 9],
    50,
    c,
    [79, 9],
    s,
    [50, 4],
    126,
    s,
    [50, 9],
    c,
    [79, 7],
    50,
    50,
    c,
    [79, 21],
    s,
    [50, 7],
    130,
    50,
    50,
    127,
    128,
    50,
    50,
    90,
    91,
    s,
    [50, 9],
    51,
    c,
    [79, 9],
    s,
    [51, 4],
    126,
    s,
    [51, 9],
    c,
    [79, 7],
    51,
    51,
    c,
    [79, 21],
    s,
    [51, 7],
    130,
    51,
    51,
    127,
    128,
    51,
    51,
    90,
    91,
    s,
    [51, 9],
    52,
    c,
    [79, 9],
    s,
    [52, 4],
    126,
    s,
    [52, 9],
    118,
    119,
    52,
    123,
    s,
    [52, 5],
    c,
    [79, 16],
    52,
    52,
    c,
    [79, 3],
    s,
    [52, 14],
    90,
    91,
    s,
    [52, 9],
    53,
    c,
    [79, 9],
    s,
    [53, 4],
    126,
    s,
    [53, 9],
    c,
    [158, 7],
    53,
    53,
    c,
    [158, 21],
    s,
    [53, 7],
    130,
    53,
    53,
    127,
    128,
    53,
    53,
    90,
    91,
    s,
    [53, 9],
    56,
    c,
    [79, 9],
    s,
    [56, 4],
    126,
    s,
    [56, 9],
    c,
    [79, 4],
    56,
    144,
    146,
    56,
    56,
    c,
    [79, 21],
    s,
    [56, 14],
    90,
    91,
    s,
    [56, 9],
    s,
    [199, 15],
    571,
    s,
    [199, 63],
    c,
    [617, 16],
    574,
    c,
    [618, 48],
    c,
    [3415, 10],
    s,
    [205, 4],
    126,
    s,
    [205, 9],
    c,
    [302, 7],
    205,
    205,
    c,
    [223, 21],
    s,
    [205, 7],
    130,
    205,
    205,
    127,
    128,
    205,
    205,
    90,
    91,
    s,
    [205, 9],
    201,
    c,
    [79, 9],
    s,
    [201, 4],
    126,
    s,
    [201, 9],
    c,
    [79, 4],
    201,
    144,
    146,
    201,
    201,
    c,
    [79, 21],
    s,
    [201, 14],
    90,
    91,
    s,
    [201, 9],
    203,
    c,
    [79, 9],
    s,
    [203, 4],
    126,
    s,
    [203, 9],
    c,
    [79, 4],
    203,
    144,
    146,
    203,
    203,
    c,
    [79, 21],
    s,
    [203, 14],
    90,
    91,
    s,
    [203, 9],
    225,
    c,
    [79, 9],
    s,
    [225, 4],
    126,
    s,
    [225, 9],
    c,
    [237, 7],
    225,
    225,
    c,
    [79, 21],
    s,
    [225, 7],
    130,
    225,
    225,
    127,
    128,
    225,
    225,
    90,
    91,
    s,
    [225, 9],
    575,
    576,
    577,
    356,
    374,
    c,
    [3879, 5],
    c,
    [3851, 6],
    249,
    113,
    c,
    [2704, 29],
    c,
    [3793, 8],
    s,
    [58, 31],
    517,
    s,
    [58, 47],
    202,
    c,
    [213, 9],
    s,
    [202, 4],
    126,
    s,
    [202, 9],
    c,
    [213, 4],
    202,
    144,
    146,
    202,
    202,
    c,
    [213, 21],
    s,
    [202, 14],
    90,
    91,
    s,
    [202, 9],
    204,
    c,
    [79, 9],
    s,
    [204, 4],
    126,
    s,
    [204, 9],
    c,
    [79, 4],
    204,
    144,
    146,
    204,
    204,
    c,
    [79, 21],
    s,
    [204, 14],
    90,
    91,
    s,
    [204, 9],
    c,
    [2146, 10],
    c,
    [2145, 33],
    580,
    582,
    s,
    [124, 3],
    c,
    [1338, 23],
    c,
    [6013, 42],
    c,
    [113, 9],
    121,
    126,
    s,
    [121, 3],
    c,
    [117, 28],
    121,
    584,
    c,
    [1732, 69],
    c,
    [226, 10],
    586,
    c,
    [227, 33],
    c,
    [108, 16],
    587,
    c,
    [109, 48],
    115,
    589,
    590,
    115,
    s,
    [374, 9],
    c,
    [2129, 4],
    374,
    290,
    c,
    [4521, 3],
    c,
    [2130, 4],
    c,
    [4522, 37],
    c,
    [2163, 5],
    s,
    [366, 9],
    291,
    291,
    c,
    [3, 4],
    s,
    [366, 32],
    c,
    [9707, 41],
    c,
    [2250, 3],
    c,
    [9690, 6],
    110,
    114,
    398,
    124,
    591,
    c,
    [458, 6],
    c,
    [3243, 6],
    593,
    c,
    [3244, 55],
    595,
    196,
    197,
    s,
    [125, 3],
    c,
    [2012, 3],
    597,
    598,
    c,
    [7306, 82],
    c,
    [7241, 176],
    604,
    605,
    607,
    606,
    124,
    124,
    609,
    s,
    [297, 5],
    610,
    611,
    406,
    405,
    613,
    413,
    124,
    196,
    197,
    c,
    [284, 3],
    c,
    [3531, 9],
    618,
    367,
    c,
    [651, 9],
    s,
    [367, 4],
    126,
    s,
    [367, 9],
    c,
    [663, 7],
    367,
    367,
    c,
    [665, 21],
    s,
    [367, 7],
    130,
    367,
    367,
    127,
    128,
    367,
    367,
    90,
    91,
    s,
    [367, 9],
    c,
    [6629, 71],
    c,
    [858, 68],
    621,
    c,
    [858, 33],
    c,
    [44, 10],
    622,
    c,
    [44, 33],
    231,
    c,
    [45, 9],
    s,
    [231, 4],
    126,
    s,
    [231, 9],
    c,
    [57, 7],
    231,
    231,
    c,
    [59, 21],
    s,
    [231, 7],
    130,
    231,
    231,
    127,
    128,
    231,
    231,
    c,
    [70, 3],
    s,
    [231, 8],
    s,
    [232, 64],
    164,
    165,
    s,
    [232, 13],
    c,
    [4968, 3],
    c,
    [749, 66],
    c,
    [271, 10],
    626,
    c,
    [4250, 34],
    223,
    c,
    [46, 9],
    s,
    [223, 4],
    126,
    s,
    [223, 9],
    c,
    [57, 7],
    223,
    223,
    c,
    [59, 21],
    s,
    [223, 7],
    130,
    223,
    223,
    127,
    128,
    223,
    223,
    c,
    [70, 3],
    s,
    [223, 8],
    c,
    [8565, 320],
    c,
    [2117, 29],
    633,
    356,
    504,
    374,
    504,
    356,
    c,
    [5, 3],
    374,
    c,
    [4, 4],
    504,
    c,
    [4, 3],
    c,
    [1493, 6],
    s,
    [247, 3],
    169,
    169,
    c,
    [5929, 6],
    c,
    [192, 89],
    c,
    [5902, 42],
    636,
    638,
    637,
    185,
    641,
    639,
    181,
    180,
    642,
    s,
    [55, 9],
    185,
    55,
    643,
    181,
    s,
    [55, 28],
    180,
    s,
    [55, 6],
    c,
    [762, 76],
    c,
    [760, 29],
    647,
    c,
    [761, 4],
    186,
    186,
    c,
    [11315, 3],
    c,
    [8449, 81],
    c,
    [76, 14],
    242,
    c,
    [76, 75],
    c,
    [8601, 82],
    c,
    [467, 42],
    c,
    [410, 66],
    215,
    c,
    [411, 9],
    s,
    [215, 4],
    126,
    s,
    [215, 9],
    118,
    119,
    215,
    123,
    s,
    [215, 5],
    c,
    [426, 16],
    215,
    215,
    c,
    [426, 3],
    s,
    [215, 14],
    90,
    91,
    s,
    [215, 9],
    s,
    [374, 11],
    185,
    c,
    [10667, 11],
    655,
    181,
    s,
    [374, 35],
    180,
    c,
    [10667, 25],
    c,
    [6374, 32],
    s,
    [135, 11],
    185,
    s,
    [135, 5],
    170,
    s,
    [135, 3],
    659,
    181,
    s,
    [135, 31],
    168,
    172,
    135,
    135,
    180,
    s,
    [135, 13],
    171,
    135,
    135,
    110,
    114,
    135,
    135,
    19,
    c,
    [276, 9],
    s,
    [19, 4],
    126,
    s,
    [19, 9],
    c,
    [700, 7],
    19,
    19,
    c,
    [702, 21],
    s,
    [19, 7],
    130,
    19,
    19,
    127,
    128,
    19,
    19,
    90,
    91,
    s,
    [19, 9],
    s,
    [20, 64],
    164,
    165,
    s,
    [20, 13],
    s,
    [353, 20],
    328,
    s,
    [353, 59],
    s,
    [354, 20],
    328,
    s,
    [354, 59],
    c,
    [1004, 10],
    6,
    662,
    c,
    [1766, 33],
    115,
    663,
    665,
    667,
    481,
    482,
    94,
    668,
    673,
    671,
    94,
    674,
    677,
    481,
    676,
    482,
    94,
    527,
    527,
    125,
    s,
    [527, 3],
    678,
    679,
    c,
    [1328, 64],
    681,
    682,
    520,
    c,
    [137, 9],
    s,
    [520, 4],
    126,
    s,
    [520, 9],
    118,
    119,
    520,
    123,
    s,
    [520, 5],
    c,
    [150, 16],
    520,
    520,
    c,
    [150, 3],
    s,
    [520, 14],
    90,
    91,
    s,
    [520, 9],
    684,
    683,
    124,
    686,
    s,
    [540, 4],
    687,
    493,
    94,
    c,
    [652, 4],
    125,
    c,
    [653, 3],
    125,
    c,
    [654, 22],
    690,
    691,
    496,
    124,
    124,
    692,
    693,
    694,
    697,
    696,
    115,
    698,
    699,
    339,
    c,
    [134, 9],
    s,
    [339, 4],
    126,
    s,
    [339, 9],
    c,
    [282, 7],
    339,
    339,
    c,
    [284, 21],
    s,
    [339, 7],
    130,
    339,
    339,
    127,
    128,
    339,
    339,
    90,
    91,
    s,
    [339, 9],
    c,
    [6169, 16],
    c,
    [4892, 3],
    701,
    c,
    [1172, 76],
    152,
    153,
    298,
    299,
    c,
    [54, 8],
    66,
    c,
    [187, 9],
    s,
    [66, 4],
    126,
    s,
    [66, 9],
    c,
    [187, 7],
    66,
    66,
    c,
    [187, 21],
    s,
    [66, 7],
    130,
    66,
    66,
    127,
    128,
    66,
    66,
    90,
    91,
    s,
    [66, 9],
    c,
    [167, 5],
    707,
    c,
    [3117, 124],
    c,
    [666, 10],
    709,
    c,
    [2432, 34],
    710,
    711,
    712,
    211,
    98,
    125,
    65,
    313,
    c,
    [489, 6],
    c,
    [5901, 23],
    c,
    [5936, 3],
    714,
    c,
    [150, 5],
    287,
    182,
    287,
    65,
    99,
    287,
    c,
    [153, 8],
    718,
    287,
    c,
    [155, 7],
    719,
    c,
    [11297, 58],
    722,
    c,
    [1893, 58],
    411,
    126,
    723,
    c,
    [5672, 36],
    724,
    292,
    292,
    170,
    s,
    [292, 3],
    c,
    [6972, 5],
    725,
    c,
    [5864, 9],
    415,
    542,
    c,
    [130, 8],
    125,
    415,
    c,
    [5868, 49],
    729,
    728,
    534,
    124,
    124,
    413,
    c,
    [137, 9],
    409,
    126,
    s,
    [409, 4],
    c,
    [3111, 42],
    412,
    126,
    s,
    [412, 4],
    c,
    [48, 33],
    325,
    398,
    124,
    732,
    124,
    c,
    [4292, 43],
    733,
    c,
    [822, 3],
    125,
    125,
    c,
    [823, 12],
    735,
    736,
    c,
    [825, 3],
    737,
    94,
    c,
    [24, 3],
    740,
    c,
    [23, 12],
    743,
    742,
    741,
    s,
    [459, 72],
    559,
    s,
    [459, 6],
    s,
    [463, 78],
    554,
    463,
    744,
    747,
    745,
    124,
    124,
    c,
    [5872, 15],
    743,
    742,
    s,
    [490, 5],
    751,
    749,
    124,
    124,
    566,
    94,
    753,
    c,
    [280, 43],
    754,
    c,
    [5289, 65],
    756,
    c,
    [110, 10],
    205,
    757,
    c,
    [4457, 49],
    c,
    [3076, 205],
    762,
    c,
    [5238, 15],
    c,
    [3068, 8],
    764,
    765,
    763,
    c,
    [120, 8],
    125,
    c,
    [858, 9],
    125,
    c,
    [123, 7],
    125,
    c,
    [4931, 42],
    c,
    [5000, 4],
    c,
    [366, 9],
    122,
    126,
    s,
    [122, 3],
    c,
    [368, 28],
    122,
    c,
    [369, 5],
    768,
    115,
    769,
    c,
    [1111, 11],
    771,
    c,
    [12475, 121],
    33,
    c,
    [185, 9],
    s,
    [33, 4],
    126,
    s,
    [33, 9],
    c,
    [194, 7],
    33,
    33,
    c,
    [196, 21],
    s,
    [33, 7],
    130,
    33,
    33,
    127,
    128,
    33,
    33,
    90,
    91,
    s,
    [33, 9],
    c,
    [145, 66],
    c,
    [4516, 5],
    c,
    [5, 5],
    27,
    c,
    [155, 4],
    s,
    [27, 9],
    126,
    s,
    [27, 9],
    118,
    119,
    27,
    123,
    s,
    [27, 5],
    c,
    [155, 8],
    s,
    [27, 6],
    154,
    155,
    s,
    [27, 4],
    162,
    s,
    [27, 25],
    c,
    [233, 9],
    381,
    381,
    126,
    s,
    [381, 5],
    c,
    [1277, 42],
    383,
    383,
    126,
    s,
    [383, 5],
    c,
    [50, 42],
    388,
    388,
    126,
    s,
    [388, 5],
    c,
    [50, 33],
    388,
    779,
    s,
    [389, 7],
    781,
    780,
    125,
    125,
    c,
    [11063, 4],
    783,
    784,
    295,
    196,
    295,
    197,
    s,
    [295, 3],
    787,
    195,
    786,
    c,
    [11181, 65],
    789,
    790,
    c,
    [11142, 3],
    415,
    542,
    c,
    [333, 3],
    793,
    c,
    [2207, 16],
    c,
    [2572, 11],
    795,
    c,
    [166, 33],
    369,
    c,
    [46, 9],
    s,
    [369, 4],
    126,
    s,
    [369, 9],
    c,
    [57, 7],
    369,
    369,
    c,
    [59, 21],
    s,
    [369, 7],
    130,
    369,
    369,
    127,
    128,
    369,
    369,
    c,
    [70, 3],
    s,
    [369, 8],
    220,
    c,
    [79, 9],
    s,
    [220, 4],
    126,
    s,
    [220, 9],
    c,
    [79, 7],
    220,
    220,
    c,
    [79, 21],
    s,
    [220, 7],
    130,
    220,
    220,
    127,
    128,
    220,
    220,
    90,
    91,
    s,
    [220, 9],
    c,
    [294, 5],
    s,
    [260, 7],
    98,
    260,
    65,
    260,
    c,
    [303, 4],
    260,
    c,
    [304, 5],
    260,
    45,
    s,
    [260, 5],
    88,
    260,
    260,
    c,
    [312, 4],
    s,
    [260, 19],
    73,
    260,
    260,
    54,
    260,
    50,
    260,
    c,
    [335, 3],
    260,
    260,
    c,
    [337, 7],
    260,
    c,
    [338, 29],
    224,
    c,
    [187, 9],
    s,
    [224, 4],
    126,
    s,
    [224, 9],
    c,
    [187, 7],
    224,
    224,
    c,
    [187, 21],
    s,
    [224, 7],
    130,
    224,
    224,
    127,
    128,
    224,
    224,
    90,
    91,
    s,
    [224, 9],
    c,
    [78, 9],
    797,
    c,
    [1556, 34],
    c,
    [1599, 38],
    798,
    c,
    [44, 14],
    185,
    126,
    800,
    c,
    [8473, 35],
    c,
    [47, 11],
    802,
    c,
    [47, 35],
    s,
    [247, 3],
    804,
    805,
    806,
    s,
    [247, 3],
    c,
    [3579, 30],
    c,
    [85, 8],
    146,
    146,
    c,
    [178, 29],
    146,
    c,
    [84, 5],
    638,
    808,
    c,
    [3957, 72],
    c,
    [4024, 128],
    457,
    455,
    814,
    c,
    [3, 3],
    c,
    [4506, 76],
    183,
    183,
    c,
    [1985, 38],
    c,
    [3178, 71],
    s,
    [190, 4],
    518,
    190,
    190,
    s,
    [191, 4],
    518,
    191,
    191,
    s,
    [192, 4],
    518,
    192,
    192,
    638,
    819,
    213,
    c,
    [145, 9],
    s,
    [213, 4],
    126,
    s,
    [213, 9],
    118,
    119,
    213,
    123,
    s,
    [213, 5],
    c,
    [158, 16],
    213,
    213,
    c,
    [158, 3],
    s,
    [213, 14],
    90,
    91,
    s,
    [213, 9],
    c,
    [289, 66],
    s,
    [134, 11],
    185,
    s,
    [134, 5],
    170,
    s,
    [134, 3],
    823,
    181,
    s,
    [134, 31],
    168,
    172,
    134,
    134,
    180,
    s,
    [134, 13],
    171,
    134,
    134,
    110,
    114,
    c,
    [68, 3],
    181,
    180,
    825,
    827,
    665,
    828,
    94,
    831,
    830,
    124,
    833,
    s,
    [553, 4],
    834,
    835,
    c,
    [3835, 3],
    665,
    c,
    [3843, 3],
    839,
    c,
    [2489, 43],
    840,
    125,
    493,
    94,
    842,
    s,
    [537, 4],
    844,
    94,
    845,
    94,
    684,
    124,
    847,
    c,
    [802, 29],
    c,
    [29, 29],
    c,
    [1457, 3],
    852,
    851,
    c,
    [1458, 12],
    697,
    854,
    442,
    856,
    861,
    859,
    442,
    442,
    860,
    862,
    c,
    [2850, 3],
    863,
    185,
    357,
    865,
    181,
    180,
    s,
    [62, 32],
    518,
    s,
    [62, 46],
    c,
    [1647, 64],
    236,
    c,
    [297, 9],
    s,
    [236, 4],
    126,
    s,
    [236, 9],
    c,
    [310, 7],
    236,
    236,
    c,
    [312, 21],
    s,
    [236, 7],
    130,
    236,
    236,
    127,
    128,
    236,
    236,
    90,
    91,
    s,
    [236, 9],
    s,
    [238, 64],
    164,
    165,
    s,
    [238, 13],
    c,
    [13124, 68],
    c,
    [225, 9],
    869,
    126,
    c,
    [3752, 34],
    c,
    [1688, 108],
    c,
    [9755, 31],
    c,
    [31, 31],
    873,
    711,
    712,
    c,
    [218, 9],
    278,
    278,
    126,
    s,
    [278, 3],
    c,
    [3122, 49],
    c,
    [6894, 49],
    c,
    [113, 9],
    281,
    281,
    126,
    s,
    [281, 3],
    c,
    [113, 98],
    876,
    c,
    [66, 8],
    416,
    c,
    [67, 8],
    416,
    c,
    [3239, 53],
    c,
    [9843, 66],
    c,
    [66, 61],
    879,
    c,
    [3684, 15],
    c,
    [15, 15],
    882,
    c,
    [1053, 3],
    883,
    c,
    [20, 15],
    885,
    c,
    [16, 3],
    888,
    887,
    c,
    [53, 15],
    891,
    890,
    c,
    [17, 12],
    892,
    893,
    c,
    [3978, 17],
    747,
    124,
    124,
    895,
    896,
    897,
    125,
    125,
    566,
    94,
    751,
    124,
    124,
    899,
    486,
    348,
    486,
    341,
    347,
    901,
    902,
    486,
    c,
    [34, 12],
    c,
    [3749, 65],
    c,
    [1369, 10],
    c,
    [3747, 34],
    159,
    c,
    [45, 9],
    s,
    [159, 4],
    126,
    s,
    [159, 9],
    c,
    [57, 4],
    159,
    144,
    146,
    159,
    159,
    c,
    [59, 21],
    s,
    [159, 14],
    c,
    [70, 3],
    s,
    [159, 8],
    160,
    c,
    [79, 9],
    s,
    [160, 4],
    126,
    s,
    [160, 9],
    c,
    [79, 4],
    160,
    144,
    146,
    160,
    160,
    c,
    [79, 21],
    s,
    [160, 14],
    90,
    91,
    s,
    [160, 9],
    c,
    [2323, 38],
    c,
    [8622, 65],
    c,
    [65, 65],
    764,
    765,
    908,
    909,
    c,
    [1914, 66],
    29,
    c,
    [317, 9],
    s,
    [29, 4],
    126,
    s,
    [29, 9],
    c,
    [453, 7],
    29,
    29,
    c,
    [317, 21],
    s,
    [29, 7],
    130,
    29,
    29,
    127,
    128,
    29,
    29,
    90,
    91,
    s,
    [29, 9],
    34,
    c,
    [79, 9],
    s,
    [34, 4],
    126,
    s,
    [34, 9],
    c,
    [79, 7],
    34,
    34,
    c,
    [79, 21],
    s,
    [34, 7],
    130,
    34,
    34,
    127,
    128,
    34,
    34,
    90,
    91,
    s,
    [34, 9],
    26,
    c,
    [79, 4],
    s,
    [26, 9],
    126,
    s,
    [26, 9],
    118,
    119,
    26,
    123,
    s,
    [26, 5],
    c,
    [79, 8],
    s,
    [26, 6],
    154,
    155,
    s,
    [26, 4],
    162,
    s,
    [26, 25],
    398,
    c,
    [9063, 26],
    c,
    [375, 41],
    c,
    [3546, 4],
    c,
    [4, 4],
    c,
    [72, 64],
    s,
    [300, 5],
    406,
    405,
    c,
    [304, 9],
    298,
    298,
    126,
    s,
    [298, 3],
    c,
    [828, 33],
    196,
    197,
    416,
    c,
    [3588, 3],
    c,
    [3596, 3],
    c,
    [6, 3],
    c,
    [1056, 3],
    918,
    221,
    c,
    [65, 9],
    s,
    [221, 4],
    126,
    s,
    [221, 9],
    c,
    [73, 7],
    221,
    221,
    c,
    [75, 21],
    s,
    [221, 7],
    130,
    221,
    221,
    127,
    128,
    221,
    221,
    90,
    91,
    s,
    [221, 9],
    c,
    [16247, 199],
    c,
    [9007, 125],
    c,
    [1089, 9],
    638,
    927,
    c,
    [1302, 10],
    177,
    177,
    c,
    [3065, 109],
    c,
    [121, 10],
    180,
    180,
    c,
    [121, 33],
    185,
    185,
    517,
    928,
    218,
    c,
    [50, 9],
    s,
    [218, 4],
    126,
    s,
    [218, 9],
    118,
    119,
    218,
    123,
    s,
    [218, 5],
    c,
    [63, 16],
    218,
    218,
    c,
    [63, 3],
    s,
    [218, 14],
    90,
    91,
    s,
    [218, 9],
    c,
    [2946, 3],
    930,
    665,
    94,
    665,
    125,
    c,
    [2936, 3],
    935,
    s,
    [548, 4],
    937,
    s,
    [94, 3],
    831,
    124,
    940,
    941,
    942,
    94,
    493,
    94,
    94,
    946,
    c,
    [6587, 3],
    947,
    s,
    [450, 8],
    743,
    742,
    s,
    [450, 69],
    c,
    [1867, 30],
    950,
    952,
    951,
    124,
    124,
    442,
    c,
    [2931, 5],
    c,
    [13516, 3],
    956,
    444,
    957,
    444,
    444,
    185,
    357,
    c,
    [9278, 4],
    181,
    180,
    64,
    c,
    [249, 9],
    s,
    [64, 4],
    126,
    s,
    [64, 9],
    c,
    [310, 7],
    64,
    64,
    c,
    [312, 21],
    s,
    [64, 7],
    130,
    64,
    64,
    127,
    128,
    64,
    64,
    90,
    91,
    s,
    [64, 9],
    c,
    [78, 9],
    960,
    c,
    [2647, 35],
    961,
    c,
    [19542, 3],
    237,
    c,
    [50, 9],
    s,
    [237, 4],
    126,
    s,
    [237, 9],
    c,
    [61, 7],
    237,
    237,
    c,
    [63, 21],
    s,
    [237, 7],
    130,
    237,
    237,
    127,
    128,
    237,
    237,
    90,
    91,
    s,
    [237, 9],
    c,
    [6445, 3],
    962,
    c,
    [4625, 11],
    963,
    c,
    [4236, 43],
    6,
    964,
    c,
    [675, 38],
    c,
    [861, 11],
    966,
    c,
    [861, 49],
    c,
    [6331, 4],
    969,
    970,
    c,
    [1210, 3],
    971,
    972,
    s,
    [453, 72],
    559,
    s,
    [453, 6],
    c,
    [514, 30],
    s,
    [454, 72],
    559,
    s,
    [454, 6],
    c,
    [109, 30],
    c,
    [15, 30],
    743,
    742,
    s,
    [493, 5],
    979,
    566,
    94,
    566,
    94,
    982,
    743,
    742,
    s,
    [483, 5],
    c,
    [50, 30],
    985,
    c,
    [1171, 73],
    c,
    [5857, 4],
    989,
    30,
    c,
    [500, 9],
    s,
    [30, 4],
    126,
    s,
    [30, 9],
    c,
    [511, 7],
    30,
    30,
    c,
    [513, 21],
    s,
    [30, 7],
    130,
    30,
    30,
    127,
    128,
    30,
    30,
    90,
    91,
    s,
    [30, 9],
    597,
    598,
    990,
    c,
    [81, 9],
    390,
    390,
    126,
    s,
    [390, 5],
    c,
    [586, 33],
    390,
    991,
    c,
    [52, 9],
    296,
    296,
    126,
    s,
    [296, 3],
    c,
    [1190, 34],
    c,
    [945, 4],
    c,
    [4831, 11],
    994,
    c,
    [4878, 46],
    996,
    c,
    [47, 35],
    157,
    c,
    [48, 9],
    s,
    [157, 4],
    126,
    s,
    [157, 9],
    118,
    119,
    157,
    123,
    s,
    [157, 5],
    c,
    [60, 16],
    157,
    c,
    [60, 4],
    s,
    [157, 14],
    c,
    [70, 3],
    s,
    [157, 8],
    158,
    c,
    [79, 9],
    s,
    [158, 4],
    126,
    s,
    [158, 9],
    118,
    119,
    158,
    123,
    s,
    [158, 5],
    c,
    [79, 16],
    s,
    [158, 3],
    159,
    162,
    s,
    [158, 14],
    90,
    91,
    s,
    [158, 9],
    c,
    [205, 11],
    997,
    c,
    [13603, 51],
    c,
    [564, 48],
    1000,
    1001,
    1002,
    665,
    1004,
    c,
    [1472, 3],
    94,
    1007,
    1008,
    665,
    665,
    743,
    742,
    1011,
    s,
    [452, 8],
    743,
    742,
    s,
    [452, 69],
    125,
    442,
    125,
    c,
    [1424, 5],
    1013,
    1014,
    952,
    124,
    124,
    1015,
    445,
    c,
    [4389, 4],
    c,
    [755, 12],
    1019,
    c,
    [238, 9],
    284,
    284,
    126,
    s,
    [284, 3],
    c,
    [3669, 98],
    1021,
    1022,
    1023,
    559,
    s,
    [457, 72],
    c,
    [73, 7],
    1024,
    559,
    s,
    [458, 72],
    c,
    [73, 7],
    743,
    742,
    s,
    [491, 5],
    743,
    742,
    1025,
    1026,
    743,
    742,
    s,
    [484, 5],
    743,
    742,
    1027,
    164,
    c,
    [299, 9],
    s,
    [164, 4],
    126,
    s,
    [164, 9],
    c,
    [307, 4],
    164,
    144,
    146,
    164,
    164,
    c,
    [309, 21],
    s,
    [164, 14],
    90,
    91,
    s,
    [164, 9],
    c,
    [568, 64],
    764,
    765,
    1029,
    c,
    [2502, 137],
    c,
    [5558, 70],
    185,
    126,
    1036,
    c,
    [880, 35],
    1038,
    1039,
    1040,
    c,
    [2146, 6],
    c,
    [6, 6],
    1043,
    328,
    743,
    742,
    s,
    [440, 5],
    c,
    [729, 15],
    c,
    [1904, 11],
    1046,
    c,
    [725, 33],
    168,
    c,
    [46, 9],
    s,
    [168, 4],
    126,
    s,
    [168, 9],
    c,
    [57, 4],
    168,
    144,
    146,
    168,
    168,
    c,
    [59, 21],
    s,
    [168, 14],
    c,
    [70, 3],
    s,
    [168, 8],
    149,
    c,
    [79, 9],
    s,
    [149, 4],
    126,
    s,
    [149, 9],
    118,
    119,
    149,
    123,
    s,
    [149, 5],
    c,
    [79, 16],
    149,
    149,
    c,
    [79, 3],
    s,
    [149, 14],
    90,
    91,
    s,
    [149, 9],
    152,
    c,
    [79, 9],
    s,
    [152, 4],
    126,
    s,
    [152, 9],
    118,
    119,
    152,
    123,
    s,
    [152, 5],
    c,
    [79, 16],
    152,
    152,
    c,
    [79, 3],
    s,
    [152, 14],
    90,
    91,
    s,
    [152, 9],
    161,
    c,
    [79, 9],
    s,
    [161, 4],
    126,
    s,
    [161, 9],
    118,
    119,
    161,
    123,
    s,
    [161, 5],
    c,
    [79, 16],
    161,
    161,
    c,
    [79, 3],
    s,
    [161, 14],
    90,
    91,
    s,
    [161, 9],
    c,
    [513, 66],
    s,
    [1049, 5, 1],
    743,
    742,
    s,
    [441, 5],
    165,
    c,
    [157, 9],
    s,
    [165, 4],
    126,
    s,
    [165, 9],
    118,
    119,
    165,
    123,
    s,
    [165, 5],
    c,
    [157, 16],
    165,
    165,
    c,
    [157, 3],
    s,
    [165, 14],
    90,
    91,
    s,
    [165, 9],
    c,
    [2067, 17],
    s,
    [439, 5]
  ])
  }),
  defaultActions: bda({
    idx: u([
    3,
    6,
    s,
    [8, 10, 1],
    20,
    21,
    22,
    24,
    25,
    s,
    [31, 8, 1],
    46,
    53,
    62,
    63,
    64,
    s,
    [66, 7, 1],
    s,
    [79, 9, 1],
    90,
    91,
    s,
    [94, 4, 1],
    s,
    [100, 4, 1],
    s,
    [106, 6, 1],
    116,
    118,
    119,
    124,
    s,
    [131, 13, 1],
    145,
    s,
    [147, 16, 1],
    166,
    167,
    169,
    173,
    174,
    179,
    184,
    188,
    189,
    190,
    198,
    203,
    204,
    205,
    209,
    221,
    223,
    224,
    225,
    244,
    255,
    258,
    259,
    262,
    263,
    267,
    268,
    271,
    279,
    283,
    285,
    290,
    298,
    299,
    302,
    305,
    306,
    309,
    316,
    318,
    321,
    327,
    329,
    330,
    331,
    333,
    335,
    338,
    s,
    [343, 4, 1],
    350,
    352,
    353,
    360,
    371,
    372,
    376,
    377,
    378,
    380,
    383,
    387,
    389,
    403,
    405,
    409,
    410,
    414,
    416,
    417,
    424,
    425,
    428,
    433,
    448,
    454,
    459,
    461,
    464,
    467,
    471,
    472,
    480,
    492,
    500,
    503,
    504,
    506,
    507,
    509,
    511,
    512,
    513,
    516,
    520,
    532,
    536,
    539,
    541,
    543,
    544,
    546,
    547,
    549,
    558,
    565,
    567,
    568,
    569,
    580,
    584,
    586,
    589,
    590,
    592,
    596,
    599,
    606,
    615,
    616,
    617,
    s,
    [621, 4, 1],
    637,
    640,
    644,
    646,
    s,
    [652, 5, 2],
    661,
    662,
    663,
    665,
    670,
    678,
    679,
    681,
    682,
    683,
    689,
    692,
    693,
    695,
    699,
    704,
    710,
    713,
    717,
    719,
    721,
    724,
    725,
    726,
    s,
    [731, 4, 1],
    738,
    744,
    745,
    749,
    754,
    755,
    757,
    763,
    766,
    768,
    770,
    s,
    [773, 5, 2],
    782,
    785,
    789,
    790,
    791,
    795,
    799,
    801,
    804,
    805,
    s,
    [806, 4, 2],
    813,
    815,
    817,
    820,
    822,
    824,
    825,
    830,
    840,
    841,
    843,
    845,
    846,
    848,
    854,
    857,
    861,
    862,
    864,
    869,
    871,
    873,
    878,
    880,
    882,
    883,
    898,
    906,
    909,
    910,
    914,
    917,
    921,
    923,
    928,
    929,
    934,
    936,
    938,
    939,
    s,
    [944, 4, 1],
    950,
    951,
    s,
    [958, 7, 1],
    967,
    969,
    970,
    972,
    979,
    980,
    982,
    985,
    s,
    [989, 5, 1],
    995,
    998,
    1000,
    1001,
    1002,
    s,
    [1004, 5, 1],
    1011,
    1012,
    1017,
    s,
    [1021, 7, 1],
    1029,
    1030,
    1032,
    1035,
    1037,
    1041,
    1043,
    1046,
    s,
    [1048, 5, 1]
  ]),
    goto: u([
    5,
    8,
    s,
    [10, 9, 1],
    418,
    423,
    424,
    425,
    428,
    429,
    s,
    [248, 8, 1],
    55,
    366,
    375,
    376,
    377,
    s,
    [301, 7, 1],
    259,
    s,
    [67, 8, 1],
    226,
    227,
    384,
    496,
    497,
    498,
    308,
    309,
    317,
    318,
    343,
    344,
    242,
    243,
    310,
    311,
    38,
    48,
    49,
    54,
    s,
    [75, 13, 1],
    89,
    s,
    [91, 16, 1],
    378,
    107,
    112,
    419,
    421,
    336,
    35,
    361,
    365,
    379,
    36,
    371,
    372,
    373,
    247,
    197,
    244,
    245,
    246,
    129,
    518,
    522,
    524,
    543,
    544,
    499,
    503,
    447,
    108,
    325,
    338,
    333,
    88,
    90,
    228,
    211,
    265,
    268,
    291,
    397,
    403,
    355,
    340,
    341,
    342,
    320,
    323,
    470,
    460,
    461,
    462,
    464,
    313,
    316,
    3,
    57,
    60,
    61,
    109,
    113,
    393,
    114,
    117,
    137,
    138,
    387,
    386,
    264,
    273,
    395,
    400,
    407,
    370,
    111,
    230,
    222,
    175,
    187,
    209,
    214,
    127,
    130,
    21,
    347,
    529,
    534,
    449,
    260,
    261,
    110,
    257,
    337,
    326,
    327,
    329,
    350,
    234,
    293,
    414,
    410,
    416,
    351,
    359,
    319,
    321,
    357,
    465,
    482,
    487,
    312,
    314,
    394,
    123,
    427,
    140,
    142,
    31,
    362,
    25,
    263,
    408,
    328,
    331,
    45,
    47,
    233,
    219,
    172,
    179,
    182,
    184,
    212,
    216,
    128,
    133,
    349,
    348,
    507,
    508,
    517,
    545,
    528,
    519,
    523,
    525,
    532,
    500,
    495,
    448,
    430,
    258,
    235,
    266,
    269,
    279,
    289,
    282,
    288,
    398,
    404,
    417,
    360,
    322,
    471,
    475,
    467,
    488,
    477,
    315,
    198,
    206,
    115,
    118,
    139,
    23,
    32,
    24,
    363,
    392,
    391,
    274,
    294,
    299,
    396,
    401,
    368,
    153,
    154,
    193,
    194,
    195,
    171,
    176,
    178,
    188,
    189,
    181,
    217,
    131,
    136,
    509,
    530,
    521,
    535,
    538,
    541,
    542,
    501,
    432,
    435,
    443,
    262,
    334,
    239,
    270,
    267,
    406,
    472,
    358,
    468,
    480,
    119,
    141,
    28,
    275,
    402,
    155,
    156,
    174,
    132,
    546,
    549,
    551,
    552,
    536,
    539,
    533,
    502,
    431,
    433,
    330,
    335,
    240,
    241,
    271,
    280,
    283,
    286,
    399,
    473,
    466,
    489,
    479,
    478,
    200,
    116,
    364,
    276,
    332,
    147,
    150,
    163,
    173,
    511,
    512,
    514,
    547,
    550,
    531,
    510,
    451,
    436,
    446,
    405,
    469,
    455,
    456,
    492,
    481,
    485,
    120,
    148,
    151,
    162,
    167,
    437,
    434,
    285,
    166,
    516,
    513,
    515,
    438
  ])
  }),
  parseError: function parseError(str, hash, ExceptionClass) {
      if (hash.recoverable) {
          if (typeof this.trace === 'function') {
              this.trace(str);
          }
          hash.destroy();             // destroy... well, *almost*!
      } else {
          if (typeof this.trace === 'function') {
              this.trace(str);
          }
          if (!ExceptionClass) {
              ExceptionClass = this.JisonParserError;
          }
          throw new ExceptionClass(str, hash);
      }
  },
  parse: function parse(input) {
      var self = this;
      var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
      var sstack = new Array(128);        // state stack: stores states (column storage)
  
      var vstack = new Array(128);        // semantic value stack
      var lstack = new Array(128);        // location stack
      var table = this.table;
      var sp = 0;                         // 'stack pointer': index into the stacks
      var yyloc;
  
      
  
  
      var symbol = 0;
  
  
  
      var TERROR = this.TERROR;
      var EOF = this.EOF;
      var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
      var NO_ACTION = [0, 1055 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];
  
      var lexer;
      if (this.__lexer__) {
          lexer = this.__lexer__;
      } else {
          lexer = this.__lexer__ = Object.create(this.lexer);
      }
  
      var sharedState_yy = {
          parseError: undefined,
          quoteName: undefined,
          lexer: undefined,
          parser: undefined,
          pre_parse: undefined,
          post_parse: undefined,
          pre_lex: undefined,
          post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
      };
  
      var ASSERT;
      if (typeof assert !== 'function') {
          ASSERT = function JisonAssert(cond, msg) {
              if (!cond) {
                  throw new Error('assertion failed: ' + (msg || '***'));
              }
          };
      } else {
          ASSERT = assert;
      }
  
      this.yyGetSharedState = function yyGetSharedState() {
          return sharedState_yy;
      };
  
  
      // shallow clone objects, straight copy of simple `src` values
      // e.g. `lexer.yytext` MAY be a complex value object,
      // rather than a simple string/value.
      function shallow_copy(src) {
          if (typeof src === 'object') {
              var dst = {};
              for (var k in src) {
                  if (Object.prototype.hasOwnProperty.call(src, k)) {
                      dst[k] = src[k];
                  }
              }
              return dst;
          }
          return src;
      }
      function shallow_copy_noclobber(dst, src) {
          for (var k in src) {
              if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                  dst[k] = src[k];
              }
          }
      }
      function copy_yylloc(loc) {
          var rv = shallow_copy(loc);
          if (rv && rv.range) {
              rv.range = rv.range.slice(0);
          }
          return rv;
      }
  
      // copy state
      shallow_copy_noclobber(sharedState_yy, this.yy);
  
      sharedState_yy.lexer = lexer;
      sharedState_yy.parser = this;
  
  
  
  
  
  
      // Does the shared state override the default `parseError` that already comes with this instance?
      if (typeof sharedState_yy.parseError === 'function') {
          this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
              if (!ExceptionClass) {
                  ExceptionClass = this.JisonParserError;
              }
              return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
          };
      } else {
          this.parseError = this.originalParseError;
      }
  
      // Does the shared state override the default `quoteName` that already comes with this instance?
      if (typeof sharedState_yy.quoteName === 'function') {
          this.quoteName = function quoteNameAlt(id_str) {
              return sharedState_yy.quoteName.call(this, id_str);
          };
      } else {
          this.quoteName = this.originalQuoteName;
      }
  
      // set up the cleanup function; make it an API so that external code can re-use this one in case of
      // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
      // case this parse() API method doesn't come with a `finally { ... }` block any more!
      //
      // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
      //       or else your `sharedState`, etc. references will be *wrong*!
      this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
          var rv;
  
          if (invoke_post_methods) {
              var hash;
  
              if (sharedState_yy.post_parse || this.post_parse) {
                  // create an error hash info instance: we re-use this API in a **non-error situation**
                  // as this one delivers all parser internals ready for access by userland code.
                  hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
              }
  
              if (sharedState_yy.post_parse) {
                  rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                  if (typeof rv !== 'undefined') resultValue = rv;
              }
              if (this.post_parse) {
                  rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                  if (typeof rv !== 'undefined') resultValue = rv;
              }
  
              // cleanup:
              if (hash && hash.destroy) {
                  hash.destroy();
              }
          }
  
  
  
  
          // clean up the lingering lexer structures as well:
          if (lexer.cleanupAfterLex) {
              lexer.cleanupAfterLex(do_not_nuke_errorinfos);
          }
  
          // prevent lingering circular references from causing memory leaks:
          if (sharedState_yy) {
              sharedState_yy.lexer = undefined;
              sharedState_yy.parser = undefined;
              if (lexer.yy === sharedState_yy) {
                  lexer.yy = undefined;
              }
          }
          sharedState_yy = undefined;
          this.parseError = this.originalParseError;
          this.quoteName = this.originalQuoteName;
  
          // nuke the vstack[] array at least as that one will still reference obsoleted user values.
          // To be safe, we nuke the other internal stack columns as well...
          stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
          sstack.length = 0;
          lstack.length = 0;
          vstack.length = 0;
          sp = 0;
  
          // nuke the error hash info instances created during this run.
          // Userland code must COPY any data/references
          // in the error hash instance(s) it is more permanently interested in.
          if (!do_not_nuke_errorinfos) {
              for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                  var el = this.__error_infos[i];
                  if (el && typeof el.destroy === 'function') {
                      el.destroy();
                  }
              }
              this.__error_infos.length = 0;
  
  
          }
  
          return resultValue;
      };
  
      // merge yylloc info into a new yylloc instance.
      //
      // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
      //
      // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
      // case these override the corresponding first/last indexes.
      //
      // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
      // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
      // yylloc info.
      //
      // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
      this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
          var i1 = first_index | 0,
              i2 = last_index | 0;
          var l1 = first_yylloc,
              l2 = last_yylloc;
          var rv;
  
          // rules:
          // - first/last yylloc entries override first/last indexes
  
          if (!l1) {
              if (first_index != null) {
                  for (var i = i1; i <= i2; i++) {
                      l1 = lstack[i];
                      if (l1) {
                          break;
                      }
                  }
              }
          }
  
          if (!l2) {
              if (last_index != null) {
                  for (var i = i2; i >= i1; i--) {
                      l2 = lstack[i];
                      if (l2) {
                          break;
                      }
                  }
              }
          }
  
          // - detect if an epsilon rule is being processed and act accordingly:
          if (!l1 && first_index == null) {
              // epsilon rule span merger. With optional look-ahead in l2.
              if (!dont_look_back) {
                  for (var i = (i1 || sp) - 1; i >= 0; i--) {
                      l1 = lstack[i];
                      if (l1) {
                          break;
                      }
                  }
              }
              if (!l1) {
                  if (!l2) {
                      // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                      // without look-ahead and no preceding terms and/or `dont_look_back` set:
                      // in that case we ca do nothing but return NULL/UNDEFINED:
                      return undefined;
                  } else {
                      // shallow-copy L2: after all, we MAY be looking
                      // at unconventional yylloc info objects...
                      rv = shallow_copy(l2);
                      if (rv.range) {
                          // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                          rv.range = rv.range.slice(0);
                      }
                      return rv;
                  }
              } else {
                  // shallow-copy L1, then adjust first col/row 1 column past the end.
                  rv = shallow_copy(l1);
                  rv.first_line = rv.last_line;
                  rv.first_column = rv.last_column;
                  if (rv.range) {
                      // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                      rv.range = rv.range.slice(0);
                      rv.range[0] = rv.range[1];
                  }
  
                  if (l2) {
                      // shallow-mixin L2, then adjust last col/row accordingly.
                      shallow_copy_noclobber(rv, l2);
                      rv.last_line = l2.last_line;
                      rv.last_column = l2.last_column;
                      if (rv.range && l2.range) {
                          rv.range[1] = l2.range[1];
                      }
                  }
                  return rv;
              }
          }
  
          if (!l1) {
              l1 = l2;
              l2 = null;
          }
          if (!l1) {
              return undefined;
          }
  
          // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
          // at unconventional yylloc info objects...
          rv = shallow_copy(l1);
  
          // first_line: ...,
          // first_column: ...,
          // last_line: ...,
          // last_column: ...,
          if (rv.range) {
              // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
              rv.range = rv.range.slice(0);
          }
  
          if (l2) {
              shallow_copy_noclobber(rv, l2);
              rv.last_line = l2.last_line;
              rv.last_column = l2.last_column;
              if (rv.range && l2.range) {
                  rv.range[1] = l2.range[1];
              }
          }
  
          return rv;
      };
  
      // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
      //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
      this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
          var pei = {
              errStr: msg,
              exception: ex,
              text: lexer.match,
              value: lexer.yytext,
              token: this.describeSymbol(symbol) || symbol,
              token_id: symbol,
              line: lexer.yylineno,
              loc: copy_yylloc(lexer.yylloc),
              expected: expected,
              recoverable: recoverable,
              state: state,
              action: action,
              new_state: newState,
              symbol_stack: stack,
              state_stack: sstack,
              value_stack: vstack,
              location_stack: lstack,
              stack_pointer: sp,
              yy: sharedState_yy,
              lexer: lexer,
              parser: this,
  
              // and make sure the error info doesn't stay due to potential
              // ref cycle via userland code manipulations.
              // These would otherwise all be memory leak opportunities!
              //
              // Note that only array and object references are nuked as those
              // constitute the set of elements which can produce a cyclic ref.
              // The rest of the members is kept intact as they are harmless.
              destroy: function destructParseErrorInfo() {
                  // remove cyclic references added to error info:
                  // info.yy = null;
                  // info.lexer = null;
                  // info.value = null;
                  // info.value_stack = null;
                  // ...
                  var rec = !!this.recoverable;
                  for (var key in this) {
                      if (this.hasOwnProperty(key) && typeof key === 'object') {
                          this[key] = undefined;
                      }
                  }
                  this.recoverable = rec;
              }
          };
          // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
          this.__error_infos.push(pei);
          return pei;
      };
  
  
  
  
  
  
  
  
  
  
  
  
  
      function getNonTerminalFromCode(symbol) {
          var tokenName = self.getSymbolName(symbol);
          if (!tokenName) {
              tokenName = symbol;
          }
          return tokenName;
      }
  
  
      function stdLex() {
          var token = lexer.lex();
          // if token isn't its numeric value, convert
          if (typeof token !== 'number') {
              token = self.symbols_[token] || token;
          }
  
          return token || EOF;
      }
  
      function fastLex() {
          var token = lexer.fastLex();
          // if token isn't its numeric value, convert
          if (typeof token !== 'number') {
              token = self.symbols_[token] || token;
          }
  
          return token || EOF;
      }
  
      var lex = stdLex;
  
  
      var state, action, r, t;
      var yyval = {
          $: true,
          _$: undefined,
          yy: sharedState_yy
      };
      var p;
      var yyrulelen;
      var this_production;
      var newState;
      var retval = false;
  
  
  
  
      lexer.setInput(input, sharedState_yy);
  
      // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
      // this initial `setInput()` call: hence we can now check and decide
      // whether we'll go with the standard, slower, lex() API or the
      // `fast_lex()` one:
      if (typeof lexer.canIUse === 'function') {
          var lexerInfo = lexer.canIUse();
          if (lexerInfo.fastLex && typeof fastLex === 'function') {
              lex = fastLex;
          }
      } 
  
      yyloc = lexer.yylloc;
      lstack[sp] = yyloc;
      vstack[sp] = null;
      sstack[sp] = 0;
      stack[sp] = 0;
      ++sp;
  
  
  
  
  
      if (this.pre_parse) {
          this.pre_parse.call(this, sharedState_yy);
      }
      if (sharedState_yy.pre_parse) {
          sharedState_yy.pre_parse.call(this, sharedState_yy);
      }
  
      newState = sstack[sp - 1];
      for (;;) {
          // retrieve state number from top of stack
          state = newState;               // sstack[sp - 1];
  
          // use default actions if available
          if (this.defaultActions[state]) {
              action = 2;
              newState = this.defaultActions[state];
          } else {
              // The single `==` condition below covers both these `===` comparisons in a single
              // operation:
              //
              //     if (symbol === null || typeof symbol === 'undefined') ...
              if (!symbol) {
                  symbol = lex();
              }
              // read action for current state and first input
              t = (table[state] && table[state][symbol]) || NO_ACTION;
              newState = t[1];
              action = t[0];
  
  
  
  
  
  
  
  
  
  
  
              // handle parse error
              if (!action) {
                  var errStr;
                  var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                  var expected = this.collect_expected_token_set(state);
  
                  // Report error
                  if (typeof lexer.yylineno === 'number') {
                      errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                  } else {
                      errStr = 'Parse error: ';
                  }
                  if (typeof lexer.showPosition === 'function') {
                      errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                  }
                  if (expected.length) {
                      errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                  } else {
                      errStr += 'Unexpected ' + errSymbolDescr;
                  }
                  // we cannot recover from the error!
                  p = this.constructParseErrorInfo(errStr, null, expected, false);
                  r = this.parseError(p.errStr, p, this.JisonParserError);
                  if (typeof r !== 'undefined') {
                      retval = r;
                  }
                  break;
              }
  
  
          }
  
  
  
  
  
  
  
  
  
  
          switch (action) {
          // catch misc. parse failures:
          default:
              // this shouldn't happen, unless resolve defaults are off
              if (action instanceof Array) {
                  p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                  r = this.parseError(p.errStr, p, this.JisonParserError);
                  if (typeof r !== 'undefined') {
                      retval = r;
                  }
                  break;
              }
              // Another case of better safe than sorry: in case state transitions come out of another error recovery process
              // or a buggy LUT (LookUp Table):
              p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
              r = this.parseError(p.errStr, p, this.JisonParserError);
              if (typeof r !== 'undefined') {
                  retval = r;
              }
              break;
  
          // shift:
          case 1:
              stack[sp] = symbol;
              vstack[sp] = lexer.yytext;
              lstack[sp] = copy_yylloc(lexer.yylloc);
              sstack[sp] = newState; // push state
  
              ++sp;
              symbol = 0;
  
  
  
  
              // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:
  
  
  
              yyloc = lexer.yylloc;
              continue;
  
          // reduce:
          case 2:
  
  
  
              this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
              yyrulelen = this_production[1];
  
  
  
  
  
  
  
  
  
  
              r = this.performAction.call(yyval, yyloc, newState, sp - 1, vstack, lstack);
  
              if (typeof r !== 'undefined') {
                  retval = r;
                  break;
              }
  
              // pop off stack
              sp -= yyrulelen;
  
              // don't overwrite the `symbol` variable: use a local var to speed things up:
              var ntsymbol = this_production[0];    // push nonterminal (reduce)
              stack[sp] = ntsymbol;
              vstack[sp] = yyval.$;
              lstack[sp] = yyval._$;
              // goto new state = table[STATE][NONTERMINAL]
              newState = table[sstack[sp - 1]][ntsymbol];
              sstack[sp] = newState;
              ++sp;
  
  
  
  
  
  
  
  
  
              continue;
  
          // accept:
          case 3:
              if (sp !== -2) {
                  retval = true;
                  // Return the `$accept` rule's `$$` result, if available.
                  //
                  // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                  // default, action):
                  //
                  //     $accept: <startSymbol> $end
                  //                  %{ $$ = $1; @$ = @1; %}
                  //
                  // which, combined with the parse kernel's `$accept` state behaviour coded below,
                  // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                  // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                  //
                  // In code:
                  //
                  //                  %{
                  //                      @$ = @1;            // if location tracking support is included
                  //                      if (typeof $1 !== 'undefined')
                  //                          return $1;
                  //                      else
                  //                          return true;           // the default parse result if the rule actions don't produce anything
                  //                  %}
                  sp--;
                  if (typeof vstack[sp] !== 'undefined') {
                      retval = vstack[sp];
                  }
              }
              break;
          }
  
          // break out of loop: we accept or fail with error
          break;
      }
      
      // ... AND FINALLY ...
  
      retval = this.cleanupAfterParse(retval, true, true);
  
  
      
  
      return retval;
  }
  };
  parser.originalParseError = parser.parseError;
  parser.originalQuoteName = parser.quoteName;
  
  
  
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  
  return new Parser();
  })();
  
          
  
  
  if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = Elysion;
    exports.Parser = Elysion.Parser;
    exports.parse = function () {
      return Elysion.parse.apply(Elysion, arguments);
    };
    
  }
  