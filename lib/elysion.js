
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var Elysion = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ true
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... true
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 7,
  "!=": 64,
  "!==": 62,
  "$accept": 0,
  "$end": 1,
  "%": 9,
  "&": 14,
  "&&": 72,
  "(": 21,
  ")": 22,
  ")>": 136,
  "*": 8,
  "**": 55,
  "+": 4,
  "++": 51,
  ",": 15,
  "-": 5,
  "--": 52,
  ".": 23,
  "...": 78,
  ":": 20,
  "::": 27,
  ";": 18,
  "<": 12,
  "<(": 135,
  "<<": 58,
  "<=": 66,
  "==": 63,
  "===": 61,
  ">": 11,
  ">=": 65,
  ">>": 59,
  ">>>": 60,
  "?": 19,
  "??": 73,
  "@": 3,
  "AND": 69,
  "ARGUMENT": 143,
  "AS": 140,
  "ASYNC": 33,
  "AT": 141,
  "AWAIT": 37,
  "Access": 241,
  "AlphaNum": 217,
  "Arg": 178,
  "ArgList": 177,
  "Arguments": 176,
  "Array": 243,
  "ArrayArg": 247,
  "ArrayList": 245,
  "Assign": 234,
  "AssignKeyword": 236,
  "Assignable": 237,
  "Assignment": 235,
  "BOOL": 121,
  "BREAK": 92,
  "Block": 181,
  "BlockExpression": 193,
  "Body": 159,
  "CALL_END": 77,
  "CALL_START": 76,
  "CASE": 94,
  "CATCH": 103,
  "CHAIN": 45,
  "CLASS": 79,
  "COMPOUND_AND": 50,
  "COMPOUND_OR": 93,
  "CONST": 153,
  "CONTINUE": 145,
  "Case": 188,
  "Cases": 187,
  "Catch": 197,
  "Class": 180,
  "Clause": 169,
  "Clauses": 189,
  "Code": 163,
  "Compare": 173,
  "DEFAULT": 90,
  "DEFAULTS": 118,
  "DIVISION": 57,
  "DO": 34,
  "Declaration": 272,
  "DeclarationKeyword": 270,
  "Declarations": 271,
  "Declare": 269,
  "EITHER": 46,
  "EITHER_OR": 49,
  "ELSE": 110,
  "EOF": 1,
  "EXISTS": 41,
  "EXPORT": 156,
  "EXTENDS": 80,
  "Else": 201,
  "ElseOtherwise": 204,
  "Export": 276,
  "ExportList": 279,
  "ExportName": 281,
  "ExportNames": 280,
  "Exportable": 282,
  "Expression": 161,
  "FINALLY": 102,
  "FOR": 83,
  "FOR_AS": 98,
  "FOR_AT": 97,
  "FOR_FROM": 96,
  "FOR_IN": 87,
  "FOR_OF": 86,
  "FROM": 142,
  "FUNCTION": 133,
  "FUNC_DIRECTIVE": 28,
  "FUNC_EXISTS": 75,
  "Finally": 196,
  "For": 184,
  "ForAny": 191,
  "ForAssignable": 185,
  "ForExpression": 182,
  "FuncBody": 227,
  "FuncHeader": 229,
  "FuncSpecifiers": 228,
  "Function": 226,
  "GET": 138,
  "IDENTIFIER": 144,
  "IF": 95,
  "IMPORT": 155,
  "IN": 67,
  "INCLUDES": 43,
  "INDENT": 38,
  "INDEX_END": 116,
  "INDEX_START": 115,
  "INFINITY": 120,
  "INSTANCEOF": 68,
  "INTERFACE": 147,
  "INTERPOLATION_END": 129,
  "INTERPOLATION_START": 128,
  "IS": 47,
  "ISNT": 48,
  "Identifier": 239,
  "Identifier?": 256,
  "If": 192,
  "IfBlock": 202,
  "IfUnless": 203,
  "Import": 274,
  "Import(FROM)": 275,
  "ImportList": 278,
  "ImportName": 284,
  "ImportNames": 283,
  "Interface": 251,
  "InterfaceBody": 252,
  "InterfaceKeyword?": 255,
  "InterfaceProperties": 253,
  "InterfaceProperty": 254,
  "Interpolation": 221,
  "Interpolations": 220,
  "Invocation": 175,
  "JointExpression": 183,
  "LET": 152,
  "LOOP": 108,
  "Label": 162,
  "Line": 160,
  "Literal": 216,
  "Logical": 174,
  "Loop": 200,
  "MATH_BIN": 44,
  "MathPostfix": 171,
  "MathPrefix": 170,
  "Multicheck": 165,
  "MulticheckClauses": 168,
  "MulticheckCombinations": 167,
  "Multicondition": 166,
  "NAN": 123,
  "NEW": 113,
  "NEWLINE": 26,
  "NOT": 54,
  "NULL": 122,
  "NUMBER": 124,
  "New": 206,
  "OR": 70,
  "OTHERWISE": 111,
  "OUDENT": 157,
  "OUTDENT": 39,
  "Object": 211,
  "Operation": 164,
  "Operator": 172,
  "OptComma": 179,
  "OptDefault": 277,
  "OptVoids": 248,
  "PARAM_END": 31,
  "PARAM_START": 30,
  "PLUS": 56,
  "POSTCASE": 91,
  "POSTFOR": 88,
  "POSTIF": 99,
  "POSTUNLESS": 100,
  "POSTUNTIL": 107,
  "POSTWHILE": 106,
  "PROPERTY": 114,
  "Param": 233,
  "ParamArray": 242,
  "ParamArrayArg": 246,
  "ParamArrayList": 244,
  "ParamAssignable": 238,
  "ParamIdentifier": 240,
  "ParamList": 232,
  "ParamObject": 210,
  "ParamPropList": 213,
  "ParamPropObj": 215,
  "Params": 231,
  "Parenthetical": 209,
  "PropList": 212,
  "PropObj": 214,
  "READONLY": 148,
  "REGEX": 130,
  "REGEX_END": 132,
  "REGEX_START": 131,
  "RETURN": 154,
  "Regex": 222,
  "RegexInterpolation": 225,
  "RegexInterpolations": 224,
  "RegexWithInterpolations": 223,
  "Return": 273,
  "Root": 158,
  "SET": 139,
  "STATIC": 137,
  "STRING": 125,
  "STRING_END": 127,
  "STRING_START": 126,
  "SUCH": 112,
  "SUPER": 74,
  "SWITCH": 89,
  "SYMBOL_EXISTS": 42,
  "Statement": 250,
  "String": 218,
  "StringWithInterpolations": 219,
  "Super": 207,
  "Switch": 186,
  "TAG": 150,
  "THEN": 32,
  "THIS": 117,
  "THROW": 146,
  "TRY": 101,
  "TYPE": 149,
  "TYPEOF": 36,
  "This": 208,
  "Try": 195,
  "TryBlock": 194,
  "Type": 257,
  "TypeArgument": 263,
  "TypeArguments": 262,
  "TypeArguments?": 230,
  "TypeArray": 267,
  "TypeArrayItems": 268,
  "TypeDeclaration": 258,
  "TypeObjProp": 266,
  "TypeObjProps": 265,
  "TypeObject": 264,
  "TypeSentence": 259,
  "TypeValue": 260,
  "TypeWithArguments": 261,
  "UNDEFINED": 119,
  "UNLESS": 109,
  "UNTIL": 105,
  "VAR": 151,
  "Value": 205,
  "Voids": 249,
  "WHEN": 84,
  "WHETHER": 35,
  "WHILE": 104,
  "WHILST": 85,
  "WITH": 134,
  "WITHIN": 29,
  "When": 190,
  "While": 198,
  "WhileUntil": 199,
  "YIELD": 40,
  "[": 24,
  "]": 25,
  "^": 10,
  "error": 2,
  "{": 16,
  "{{": 81,
  "|": 13,
  "||": 71,
  "}": 17,
  "}}": 82,
  "~": 6,
  "~~": 53
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "@",
  4: "+",
  5: "-",
  6: "~",
  7: "!",
  8: "*",
  9: "%",
  10: "^",
  11: ">",
  12: "<",
  13: "|",
  14: "&",
  15: ",",
  16: "{",
  17: "}",
  18: ";",
  19: "?",
  20: ":",
  21: "(",
  22: ")",
  23: ".",
  24: "[",
  25: "]",
  26: "NEWLINE",
  27: "::",
  28: "FUNC_DIRECTIVE",
  29: "WITHIN",
  30: "PARAM_START",
  31: "PARAM_END",
  32: "THEN",
  33: "ASYNC",
  34: "DO",
  35: "WHETHER",
  36: "TYPEOF",
  37: "AWAIT",
  38: "INDENT",
  39: "OUTDENT",
  40: "YIELD",
  41: "EXISTS",
  42: "SYMBOL_EXISTS",
  43: "INCLUDES",
  44: "MATH_BIN",
  45: "CHAIN",
  46: "EITHER",
  47: "IS",
  48: "ISNT",
  49: "EITHER_OR",
  50: "COMPOUND_AND",
  51: "++",
  52: "--",
  53: "~~",
  54: "NOT",
  55: "**",
  56: "PLUS",
  57: "DIVISION",
  58: "<<",
  59: ">>",
  60: ">>>",
  61: "===",
  62: "!==",
  63: "==",
  64: "!=",
  65: ">=",
  66: "<=",
  67: "IN",
  68: "INSTANCEOF",
  69: "AND",
  70: "OR",
  71: "||",
  72: "&&",
  73: "??",
  74: "SUPER",
  75: "FUNC_EXISTS",
  76: "CALL_START",
  77: "CALL_END",
  78: "...",
  79: "CLASS",
  80: "EXTENDS",
  81: "{{",
  82: "}}",
  83: "FOR",
  84: "WHEN",
  85: "WHILST",
  86: "FOR_OF",
  87: "FOR_IN",
  88: "POSTFOR",
  89: "SWITCH",
  90: "DEFAULT",
  91: "POSTCASE",
  92: "BREAK",
  93: "COMPOUND_OR",
  94: "CASE",
  95: "IF",
  96: "FOR_FROM",
  97: "FOR_AT",
  98: "FOR_AS",
  99: "POSTIF",
  100: "POSTUNLESS",
  101: "TRY",
  102: "FINALLY",
  103: "CATCH",
  104: "WHILE",
  105: "UNTIL",
  106: "POSTWHILE",
  107: "POSTUNTIL",
  108: "LOOP",
  109: "UNLESS",
  110: "ELSE",
  111: "OTHERWISE",
  112: "SUCH",
  113: "NEW",
  114: "PROPERTY",
  115: "INDEX_START",
  116: "INDEX_END",
  117: "THIS",
  118: "DEFAULTS",
  119: "UNDEFINED",
  120: "INFINITY",
  121: "BOOL",
  122: "NULL",
  123: "NAN",
  124: "NUMBER",
  125: "STRING",
  126: "STRING_START",
  127: "STRING_END",
  128: "INTERPOLATION_START",
  129: "INTERPOLATION_END",
  130: "REGEX",
  131: "REGEX_START",
  132: "REGEX_END",
  133: "FUNCTION",
  134: "WITH",
  135: "<(",
  136: ")>",
  137: "STATIC",
  138: "GET",
  139: "SET",
  140: "AS",
  141: "AT",
  142: "FROM",
  143: "ARGUMENT",
  144: "IDENTIFIER",
  145: "CONTINUE",
  146: "THROW",
  147: "INTERFACE",
  148: "READONLY",
  149: "TYPE",
  150: "TAG",
  151: "VAR",
  152: "LET",
  153: "CONST",
  154: "RETURN",
  155: "IMPORT",
  156: "EXPORT",
  157: "OUDENT"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,



    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  158,
  158,
  s,
  [159, 3],
  160,
  160,
  s,
  [161, 11],
  s,
  [162, 3],
  s,
  [163, 15],
  s,
  [164, 21],
  165,
  166,
  167,
  167,
  168,
  168,
  s,
  [169, 3],
  s,
  [170, 8],
  171,
  171,
  s,
  [172, 11],
  s,
  [173, 12],
  s,
  [174, 7],
  s,
  [175, 7],
  s,
  [176, 3],
  s,
  [177, 4],
  s,
  [178, 3],
  179,
  179,
  s,
  [180, 11],
  s,
  [181, 6],
  182,
  182,
  183,
  183,
  s,
  [184, 22],
  185,
  185,
  s,
  [186, 4],
  187,
  187,
  s,
  [188, 10],
  s,
  [189, 3],
  s,
  [190, 3],
  s,
  [191, 3],
  s,
  [192, 9],
  193,
  193,
  s,
  [194, 3],
  195,
  195,
  196,
  196,
  s,
  [197, 5],
  s,
  [198, 7],
  s,
  [199, 4],
  200,
  200,
  s,
  [201, 4],
  s,
  [202, 8],
  203,
  203,
  s,
  [204, 3],
  s,
  [205, 9],
  206,
  207,
  207,
  208,
  s,
  [209, 3],
  210,
  210,
  s,
  [211, 3],
  s,
  [212, 4],
  s,
  [213, 5],
  s,
  [214, 17],
  s,
  [215, 7],
  s,
  [216, 7],
  217,
  217,
  218,
  218,
  219,
  220,
  220,
  221,
  221,
  222,
  222,
  223,
  224,
  224,
  225,
  225,
  s,
  [226, 13],
  s,
  [227, 3],
  s,
  [228, 7],
  s,
  [229, 9],
  s,
  [230, 3],
  231,
  231,
  s,
  [232, 4],
  233,
  234,
  s,
  [235, 4],
  s,
  [236, 3],
  s,
  [237, 5],
  s,
  [238, 5],
  239,
  s,
  [240, 8],
  241,
  241,
  242,
  242,
  s,
  [243, 3],
  s,
  [244, 3],
  s,
  [245, 4],
  246,
  246,
  s,
  [247, 4],
  248,
  248,
  s,
  [249, 3],
  s,
  [250, 12],
  251,
  251,
  s,
  [252, 3],
  s,
  [253, 4],
  s,
  [254, 3],
  s,
  [255, 3],
  256,
  256,
  s,
  [257, 3],
  s,
  [258, 3],
  s,
  [259, 7],
  s,
  [260, 6],
  s,
  [261, 4],
  s,
  [262, 4],
  s,
  [263, 3],
  264,
  264,
  s,
  [265, 4],
  s,
  [266, 5],
  267,
  267,
  s,
  [268, 4],
  269,
  269,
  s,
  [270, 3],
  s,
  [271, 4],
  272,
  272,
  s,
  [273, 4],
  s,
  [274, 8],
  275,
  s,
  [276, 8],
  s,
  [277, 3],
  s,
  [278, 3],
  279,
  279,
  s,
  [280, 3],
  s,
  [281, 6],
  282,
  282,
  s,
  [283, 3],
  s,
  [284, 6]
]),
  rule: u([
  0,
  1,
  3,
  2,
  s,
  [1, 14],
  s,
  [3, 3],
  2,
  5,
  5,
  4,
  5,
  4,
  6,
  5,
  6,
  c,
  [6, 3],
  5,
  s,
  [2, 4],
  3,
  s,
  [2, 5],
  4,
  2,
  4,
  c,
  [11, 3],
  c,
  [32, 4],
  c,
  [37, 3],
  c,
  [23, 5],
  1,
  4,
  1,
  c,
  [62, 15],
  s,
  [1, 26],
  c,
  [59, 4],
  c,
  [74, 4],
  4,
  6,
  1,
  3,
  c,
  [4, 3],
  2,
  2,
  s,
  [0, 5, 1],
  2,
  3,
  c,
  [102, 3],
  4,
  3,
  c,
  [102, 3],
  c,
  [5, 3],
  3,
  c,
  [127, 4],
  7,
  8,
  8,
  c,
  [3, 3],
  5,
  5,
  s,
  [6, 4],
  c,
  [11, 3],
  9,
  9,
  c,
  [13, 4],
  7,
  2,
  1,
  5,
  4,
  7,
  c,
  [58, 3],
  c,
  [68, 3],
  c,
  [124, 5],
  c,
  [43, 3],
  c,
  [8, 5],
  c,
  [90, 5],
  5,
  3,
  7,
  s,
  [3, 4],
  1,
  3,
  c,
  [82, 3],
  s,
  [2, 6],
  3,
  s,
  [4, 4],
  5,
  3,
  3,
  4,
  c,
  [83, 4],
  c,
  [108, 3],
  c,
  [19, 4],
  c,
  [20, 3],
  c,
  [207, 3],
  6,
  6,
  c,
  [151, 15],
  3,
  4,
  c,
  [74, 3],
  5,
  c,
  [56, 3],
  4,
  5,
  c,
  [153, 3],
  5,
  c,
  [273, 3],
  c,
  [9, 4],
  c,
  [18, 3],
  3,
  c,
  [119, 3],
  5,
  c,
  [55, 3],
  c,
  [187, 5],
  2,
  c,
  [38, 4],
  c,
  [77, 5],
  c,
  [295, 8],
  c,
  [58, 3],
  c,
  [7, 9],
  c,
  [93, 4],
  3,
  6,
  4,
  7,
  2,
  5,
  6,
  c,
  [147, 3],
  s,
  [2, 4],
  c,
  [35, 5],
  c,
  [217, 3],
  c,
  [175, 5],
  0,
  c,
  [224, 3],
  c,
  [158, 3],
  c,
  [246, 3],
  1,
  3,
  5,
  c,
  [147, 6],
  c,
  [122, 4],
  c,
  [62, 4],
  c,
  [94, 6],
  c,
  [22, 3],
  c,
  [266, 3],
  c,
  [353, 4],
  c,
  [285, 4],
  1,
  c,
  [75, 3],
  c,
  [69, 4],
  1,
  c,
  [291, 3],
  c,
  [95, 4],
  c,
  [9, 3],
  c,
  [48, 5],
  4,
  1,
  1,
  4,
  6,
  c,
  [305, 3],
  c,
  [162, 4],
  6,
  3,
  4,
  c,
  [29, 3],
  c,
  [323, 3],
  4,
  c,
  [87, 3],
  c,
  [172, 5],
  4,
  c,
  [31, 3],
  s,
  [1, 5],
  5,
  c,
  [105, 4],
  c,
  [197, 5],
  c,
  [110, 5],
  c,
  [47, 5],
  c,
  [434, 3],
  5,
  1,
  c,
  [273, 3],
  c,
  [68, 4],
  c,
  [153, 4],
  5,
  c,
  [80, 5],
  4,
  5,
  s,
  [7, 3],
  9,
  c,
  [355, 3],
  c,
  [71, 4],
  5,
  c,
  [127, 4],
  0,
  c,
  [168, 4],
  5,
  c,
  [52, 5],
  c,
  [281, 6],
  c,
  [46, 5],
  c,
  [11, 3],
  c,
  [10, 3]
])
}),
performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : Root $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 1];
    this._$ = yylstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    break;

case 1:
    /*! Production::    Root : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    return this.$ = Object.assign(new yy["Root"]("", ...['EMPTY']), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 2:
    /*! Production::    Root : Body */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    return this.$ = new yy["Root"]("Body", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 3:
    /*! Production::    Body : Body NEWLINE Line */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 2];
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-)
    
    
    (yyvstack[yysp - 2][1] = [...yyvstack[yysp - 2][1], Object.assign(yyvstack[yysp], { lineCount: yyvstack[yysp - 1] })]) && Object.assign(yyvstack[yysp - 2], { loc: { first_line: yylstack[yysp - 2].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 2].first_column, last_column: yylstack[yysp].last_column } })
    break;

case 4:
    /*! Production::    Body : Body NEWLINE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(yyvstack[yysp - 1][1][yyvstack[yysp - 1][1].length - 1], { lineCount: yyvstack[yysp] }) && Object.assign(yyvstack[yysp - 1], { loc: { first_line: yylstack[yysp - 1].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 1].first_column, last_column: yylstack[yysp].last_column } })
    break;

case 5:
    /*! Production::    Body : Line */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Body"]("Line", ...[[yyvstack[yysp]]]), { rule: "Line", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 6:
    /*! Production::    Line : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Line"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 7:
    /*! Production::    Line : Statement */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Line"]("Statement", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 8:
    /*! Production::    Expression : Code */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Code", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 9:
    /*! Production::    Expression : Value */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Value", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 10:
    /*! Production::    Expression : Operation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Operation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 11:
    /*! Production::    Expression : If */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("If", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 12:
    /*! Production::    Expression : While */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("While", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 13:
    /*! Production::    Expression : For */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("For", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 14:
    /*! Production::    Expression : Switch */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Switch", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 15:
    /*! Production::    Expression : TryBlock */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("TryBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 16:
    /*! Production::    Expression : Assign */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Assign", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 17:
    /*! Production::    Expression : Class */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 18:
    /*! Production::    Expression : Label */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Label", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 19:
    /*! Production::    Label : Identifier "::" Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("Identifier :: Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Identifier :: Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 20:
    /*! Production::    Label : Identifier "::" Statement */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("Identifier :: Statement", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Identifier :: Statement", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 21:
    /*! Production::    Label : Identifier "::" Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("Identifier :: Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier :: Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 22:
    /*! Production::    Code : FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 23:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Block", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 24:
    /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 25:
    /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Block", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 26:
    /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 27:
    /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 28:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Block", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp - 1]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 29:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Expression", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 30:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Expression", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 31:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 32:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 33:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 34:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 35:
    /*! Production::    Code : WITHIN Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 36:
    /*! Production::    Code : ASYNC Code */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("ASYNC Code", ...[...yyvstack[yysp].contents]), { rule: "ASYNC Code", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"async":true}, { generated: undefined })
    break;

case 37:
    /*! Production::    Operation : MathPrefix Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("MathPrefix Expression", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "MathPrefix Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 38:
    /*! Production::    Operation : Expression MathPostfix */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression MathPostfix", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MathPostfix", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 39:
    /*! Production::    Operation : Expression Operator Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Operator Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Operator Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 40:
    /*! Production::    Operation : "@" Value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("@ Value", ...[yyvstack[yysp]]), { rule: "@ Value", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 41:
    /*! Production::    Operation : DO Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("DO Expression", ...[yyvstack[yysp]]), { rule: "DO Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 42:
    /*! Production::    Operation : WHETHER Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("WHETHER Expression", ...[yyvstack[yysp]]), { rule: "WHETHER Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 43:
    /*! Production::    Operation : TYPEOF Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("TYPEOF Expression", ...[yyvstack[yysp]]), { rule: "TYPEOF Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 44:
    /*! Production::    Operation : AWAIT Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("AWAIT Expression", ...[yyvstack[yysp]]), { rule: "AWAIT Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 45:
    /*! Production::    Operation : AWAIT INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("AWAIT INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "AWAIT INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 46:
    /*! Production::    Operation : YIELD Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("YIELD Expression", ...[yyvstack[yysp]]), { rule: "YIELD Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 47:
    /*! Production::    Operation : YIELD INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("YIELD INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "YIELD INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 48:
    /*! Production::    Operation : Expression EXISTS */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression EXISTS", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 49:
    /*! Production::    Operation : Expression SYMBOL_EXISTS */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression SYMBOL_EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression SYMBOL_EXISTS", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 50:
    /*! Production::    Operation : Expression Compare Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Compare Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Compare Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 51:
    /*! Production::    Operation : Expression Logical Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Logical Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Logical Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 52:
    /*! Production::    Operation : Expression INCLUDES Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression INCLUDES Expression", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Expression INCLUDES Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 53:
    /*! Production::    Operation : Expression MATH_BIN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression MATH_BIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MATH_BIN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 54:
    /*! Production::    Operation : Expression Multicheck */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Multicheck", ...[yyvstack[yysp - 1], yyvstack[yysp].contents]), { rule: "Expression Multicheck", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 55:
    /*! Production::    Operation : Multicondition */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Multicondition", ...[null, yyvstack[yysp].contents]), { rule: "Multicondition", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 56:
    /*! Production::    Operation : Expression CHAIN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 57:
    /*! Production::    Operation : Expression CHAIN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 58:
    /*! Production::    Multicheck : MulticheckCombinations MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Multicheck"]("MulticheckCombinations MulticheckClauses", ...[yyvstack[yysp - 1].rule, yyvstack[yysp]]), { rule: "MulticheckCombinations MulticheckClauses", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 59:
    /*! Production::    Multicondition : EITHER MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Multicondition"]("EITHER MulticheckClauses", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "EITHER MulticheckClauses", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 60:
    /*! Production::    MulticheckCombinations : IS EITHER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MulticheckCombinations"]("IS EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type })
    break;

case 61:
    /*! Production::    MulticheckCombinations : ISNT EITHER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MulticheckCombinations"]("ISNT EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type })
    break;

case 62:
    /*! Production::    MulticheckClauses : MulticheckClauses EITHER_OR Clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["MulticheckClauses"]("MulticheckClauses EITHER_OR Clause", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "MulticheckClauses EITHER_OR Clause", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 63:
    /*! Production::    MulticheckClauses : Clause */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["MulticheckClauses"]("Clause", ...[yyvstack[yysp]]), { rule: "Clause", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 64:
    /*! Production::    Clause : Clause COMPOUND_AND Compare Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Clause COMPOUND_AND Compare Expression", ...[...yyvstack[yysp - 3].contents, [yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Clause COMPOUND_AND Compare Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 65:
    /*! Production::    Clause : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Expression", ...[[yyvstack[yysp]]]), { rule: "Expression", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 66:
    /*! Production::    Clause : Compare Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Compare Expression", ...[[yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Compare Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 67:
    /*! Production::    MathPrefix : "++" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 68:
    /*! Production::    MathPrefix : "--" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 69:
    /*! Production::    MathPrefix : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 70:
    /*! Production::    MathPrefix : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 71:
    /*! Production::    MathPrefix : "~" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 72:
    /*! Production::    MathPrefix : "~~" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("~~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 73:
    /*! Production::    MathPrefix : NOT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("NOT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 74:
    /*! Production::    MathPrefix : "!" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("!", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 75:
    /*! Production::    MathPostfix : "++" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPostfix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 76:
    /*! Production::    MathPostfix : "--" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPostfix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 77:
    /*! Production::    Operator : "*" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("*", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 78:
    /*! Production::    Operator : "**" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("**", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 79:
    /*! Production::    Operator : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 80:
    /*! Production::    Operator : PLUS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("PLUS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 81:
    /*! Production::    Operator : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 82:
    /*! Production::    Operator : DIVISION */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("DIVISION", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 83:
    /*! Production::    Operator : "%" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("%", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 84:
    /*! Production::    Operator : "<<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("<<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 85:
    /*! Production::    Operator : ">>" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"](">>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 86:
    /*! Production::    Operator : ">>>" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"](">>>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 87:
    /*! Production::    Operator : "^" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("^", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 88:
    /*! Production::    Compare : IS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("IS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 89:
    /*! Production::    Compare : "===" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("===", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 90:
    /*! Production::    Compare : ISNT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("ISNT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 91:
    /*! Production::    Compare : "!==" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("!==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 92:
    /*! Production::    Compare : "==" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 93:
    /*! Production::    Compare : "!=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("!=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 94:
    /*! Production::    Compare : ">=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"](">=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 95:
    /*! Production::    Compare : "<=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("<=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 96:
    /*! Production::    Compare : ">" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"](">", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 97:
    /*! Production::    Compare : "<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 98:
    /*! Production::    Compare : IN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("IN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 99:
    /*! Production::    Compare : INSTANCEOF */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("INSTANCEOF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 100:
    /*! Production::    Logical : AND */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("AND", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 101:
    /*! Production::    Logical : OR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 102:
    /*! Production::    Logical : "||" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("||", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 103:
    /*! Production::    Logical : "&&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("&&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 104:
    /*! Production::    Logical : "|" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("|", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 105:
    /*! Production::    Logical : "&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 106:
    /*! Production::    Logical : "??" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("??", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 107:
    /*! Production::    Invocation : Value Arguments */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Arguments", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 108:
    /*! Production::    Invocation : SUPER Arguments */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "SUPER Arguments", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 109:
    /*! Production::    Invocation : Value FUNC_EXISTS Arguments */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Value FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined })
    break;

case 110:
    /*! Production::    Invocation : SUPER FUNC_EXISTS Arguments */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "SUPER FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined })
    break;

case 111:
    /*! Production::    Invocation : "@" SUPER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("@ SUPER", ...[yyvstack[yysp], new yy.Arguments(null)]), { rule: "@ SUPER", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 112:
    /*! Production::    Invocation : Value String */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value String", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value String", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"templ":true}, { generated: undefined })
    break;

case 113:
    /*! Production::    Invocation : Value FUNC_EXISTS String */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS String", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Value FUNC_EXISTS String", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"templ":true,"soak":true}, { generated: undefined })
    break;

case 114:
    /*! Production::    Arguments : CALL_START CALL_END */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START CALL_END", ...[/* */]), { rule: "CALL_START CALL_END", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 115:
    /*! Production::    Arguments : CALL_START ArgList OptComma CALL_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START ArgList OptComma CALL_END", ...[yyvstack[yysp - 2]]), { rule: "CALL_START ArgList OptComma CALL_END", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 116:
    /*! Production::    Arguments : CALL_START INDENT ArgList OptComma OUTDENT CALL_END */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START INDENT ArgList OptComma OUTDENT CALL_END", ...[yyvstack[yysp - 3]]), { rule: "CALL_START INDENT ArgList OptComma OUTDENT CALL_END", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined })
    break;

case 117:
    /*! Production::    ArgList : Arg */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ArgList"]("Arg", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 118:
    /*! Production::    ArgList : ArgList "," Arg */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList , Arg", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "ArgList , Arg", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 119:
    /*! Production::    ArgList : ArgList OptComma NEWLINE Arg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma NEWLINE Arg", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp]]), { rule: "ArgList OptComma NEWLINE Arg", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 120:
    /*! Production::    ArgList : ArgList OptComma INDENT ArgList OptComma OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma INDENT ArgList OptComma OUTDENT", ...[...yyvstack[yysp - 5].contents, false, ...yyvstack[yysp - 2].contents]), { rule: "ArgList OptComma INDENT ArgList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 121:
    /*! Production::    Arg : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Arg"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 122:
    /*! Production::    Arg : "..." Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arg"]("... Expression", ...[yyvstack[yysp]]), { rule: "... Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
    break;

case 123:
    /*! Production::    Arg : Expression "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arg"]("Expression ...", ...[yyvstack[yysp - 1]]), { rule: "Expression ...", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
    break;

case 124:
    /*! Production::    OptComma : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["OptComma"]("", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 125:
    /*! Production::    OptComma : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["OptComma"](",", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 126:
    /*! Production::    Class : CLASS Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier", ...[yyvstack[yysp], false, false]), { rule: "CLASS Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 127:
    /*! Production::    Class : CLASS Identifier Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier Block", ...[yyvstack[yysp - 1], false, yyvstack[yysp][1]]), { rule: "CLASS Identifier Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 128:
    /*! Production::    Class : CLASS Identifier THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier THEN Block", ...[yyvstack[yysp - 2], false, yyvstack[yysp][1]]), { rule: "CLASS Identifier THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 129:
    /*! Production::    Class : CLASS Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Block", ...[undefined, false, yyvstack[yysp][1]]), { rule: "CLASS Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 130:
    /*! Production::    Class : CLASS THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS THEN Block", ...[undefined, false, yyvstack[yysp][1]]), { rule: "CLASS THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 131:
    /*! Production::    Class : CLASS Identifier EXTENDS Value Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier EXTENDS Value Block", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp][1]]), { rule: "CLASS Identifier EXTENDS Value Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 132:
    /*! Production::    Class : CLASS Identifier EXTENDS Value THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier EXTENDS Value THEN Block", ...[yyvstack[yysp - 4], yyvstack[yysp - 2], yyvstack[yysp][1]]), { rule: "CLASS Identifier EXTENDS Value THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 133:
    /*! Production::    Class : CLASS EXTENDS Value Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS EXTENDS Value Block", ...[undefined, yyvstack[yysp - 1], yyvstack[yysp][1]]), { rule: "CLASS EXTENDS Value Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 134:
    /*! Production::    Class : CLASS Identifier EXTENDS Value */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier EXTENDS Value", ...[yyvstack[yysp - 2], yyvstack[yysp],false]), { rule: "CLASS Identifier EXTENDS Value", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 135:
    /*! Production::    Class : CLASS EXTENDS Value */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS EXTENDS Value", ...[undefined, yyvstack[yysp],false]), { rule: "CLASS EXTENDS Value", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 136:
    /*! Production::    Class : CLASS EXTENDS Value THEN Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS EXTENDS Value THEN Block", ...[undefined, yyvstack[yysp - 2], yyvstack[yysp][1]]), { rule: "CLASS EXTENDS Value THEN Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 137:
    /*! Production::    Block : "{{" "}}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ }}", ...[yy.Block.wrap()]), { rule: "{{ }}", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 138:
    /*! Production::    Block : INDENT OUTDENT */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("INDENT OUTDENT", ...[yy.Block.wrap()]), { rule: "INDENT OUTDENT", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 139:
    /*! Production::    Block : "{{" INDENT OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ INDENT OUTDENT }}", ...[yy.Block.wrap()]), { rule: "{{ INDENT OUTDENT }}", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 140:
    /*! Production::    Block : INDENT Body OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 141:
    /*! Production::    Block : "{{" INDENT Body OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ INDENT Body OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT Body OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 142:
    /*! Production::    Block : "{" Body "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{ Body }", ...[yyvstack[yysp - 1]]), { rule: "{ Body }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 143:
    /*! Production::    ForExpression : JointExpression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ForExpression"]("JointExpression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 144:
    /*! Production::    ForExpression : Declare */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ForExpression"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 145:
    /*! Production::    JointExpression : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["JointExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 146:
    /*! Production::    JointExpression : JointExpression "," Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["JointExpression"]("JointExpression , Expression", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "JointExpression , Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 147:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 148:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 149:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression ; Expression ; Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 150:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 151:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 152:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 153:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_OF Expression Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 154:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_IN Expression Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 155:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 156:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 157:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 158:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 159:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 160:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 161:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 162:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 163:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 164:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 6]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 165:
    /*! Production::    For : Expression POSTFOR DeclarationKeyword Identifier "," Assignable ForAny Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 7]), yyvstack[yysp - 5]]), { rule: "Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 166:
    /*! Production::    For : Expression POSTFOR ForAssignable FOR_OF Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_OF Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_OF Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 167:
    /*! Production::    For : Expression POSTFOR ForAssignable FOR_IN Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_IN Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_IN Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 168:
    /*! Production::    For : Expression POSTFOR Identifier "," Assignable ForAny Expression */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 6])]), { rule: "Expression POSTFOR Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 169:
    /*! Production::    ForAssignable : DeclarationKeyword Assignable */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ForAssignable"]("DeclarationKeyword Assignable", ...[yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "DeclarationKeyword Assignable", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 170:
    /*! Production::    ForAssignable : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ForAssignable"]("Assignable", ...[yyvstack[yysp]]), { rule: "Assignable", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 171:
    /*! Production::    Switch : SWITCH Expression INDENT Cases OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH Expression INDENT Cases OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "SWITCH Expression INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 172:
    /*! Production::    Switch : SWITCH INDENT Cases OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH INDENT Cases OUTDENT", ...[false, yyvstack[yysp - 1]]), { rule: "SWITCH INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 173:
    /*! Production::    Switch : SWITCH Expression "{{" INDENT Cases OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH Expression {{ INDENT Cases OUTDENT }}", ...[yyvstack[yysp - 5], yyvstack[yysp - 2]]), { rule: "SWITCH Expression {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 174:
    /*! Production::    Switch : SWITCH "{{" INDENT Cases OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH {{ INDENT Cases OUTDENT }}", ...[false, yyvstack[yysp - 2]]), { rule: "SWITCH {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 175:
    /*! Production::    Cases : Case */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Cases"]("Case", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 176:
    /*! Production::    Cases : Cases NEWLINE Case */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Cases"]("Cases NEWLINE Case", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "Cases NEWLINE Case", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 177:
    /*! Production::    Case : Clauses THEN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Clauses THEN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 178:
    /*! Production::    Case : Clauses THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Clauses THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 179:
    /*! Production::    Case : Clauses Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Clauses Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 180:
    /*! Production::    Case : Multicondition THEN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Multicondition THEN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 181:
    /*! Production::    Case : Multicondition THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Multicondition THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 182:
    /*! Production::    Case : Multicondition Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Multicondition Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 183:
    /*! Production::    Case : DEFAULT Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("DEFAULT Expression", ...[false, yy.Block.wrap(yyvstack[yysp])]), { rule: "DEFAULT Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 184:
    /*! Production::    Case : DEFAULT Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("DEFAULT Block", ...[false, yyvstack[yysp].unwrap]), { rule: "DEFAULT Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 185:
    /*! Production::    Case : Expression POSTCASE MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Expression POSTCASE MulticheckClauses", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2])]), { rule: "Expression POSTCASE MulticheckClauses", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 186:
    /*! Production::    Case : BREAK */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Case"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 187:
    /*! Production::    Clauses : When */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("When", ...[yyvstack[yysp].contents]), { rule: "When", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 188:
    /*! Production::    Clauses : Clauses NEWLINE When */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("Clauses NEWLINE When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses NEWLINE When", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 189:
    /*! Production::    Clauses : Clauses COMPOUND_OR When */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("Clauses COMPOUND_OR When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses COMPOUND_OR When", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 190:
    /*! Production::    When : CASE Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("CASE Clause", ...[...yyvstack[yysp].contents]), { rule: "CASE Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 191:
    /*! Production::    When : IF Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("IF Clause", ...[...yyvstack[yysp].contents]), { rule: "IF Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 192:
    /*! Production::    When : WHEN Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("WHEN Clause", ...[...yyvstack[yysp].contents]), { rule: "WHEN Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 193:
    /*! Production::    ForAny : FOR_FROM */
case 194:
    /*! Production::    ForAny : FOR_AT */
case 195:
    /*! Production::    ForAny : FOR_AS */
case 279:
    /*! Production::    PropObj : Function */
case 293:
    /*! Production::    PropObj : Assignment */
case 299:
    /*! Production::    ParamPropObj : ParamIdentifier */
case 416:
    /*! Production::    OptVoids : Voids */
case 519:
    /*! Production::    Import(FROM) : FROM */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]
    break;

case 196:
    /*! Production::    If : IfBlock */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["If"]("IfBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 197:
    /*! Production::    If : IfBlock Else */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("IfBlock Else", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "IfBlock Else", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 198:
    /*! Production::    If : Expression "?" BlockExpression ":" BlockExpression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression : BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 4], yyvstack[yysp - 2].unwrap), new yy.Else('Else', yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression : BlockExpression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined })
    break;

case 199:
    /*! Production::    If : Expression "?" BlockExpression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 2], yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined })
    break;

case 200:
    /*! Production::    If : Expression "?" INDENT BlockExpression ":" BlockExpression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? INDENT BlockExpression : BlockExpression OUTDENT", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 6], yyvstack[yysp - 3].unwrap), new yy.Else('Else', yyvstack[yysp - 1].unwrap)]), { rule: "Expression ? INDENT BlockExpression : BlockExpression OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined })
    break;

case 201:
    /*! Production::    If : Expression POSTIF Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTIF Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true}, { generated: undefined })
    break;

case 202:
    /*! Production::    If : Statement POSTIF Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Statement POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTIF Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true}, { generated: undefined })
    break;

case 203:
    /*! Production::    If : Expression POSTUNLESS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"unless":true}, { generated: undefined })
    break;

case 204:
    /*! Production::    If : Statement POSTUNLESS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Statement POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true,"unless":true}, { generated: undefined })
    break;

case 205:
    /*! Production::    BlockExpression : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["BlockExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 206:
    /*! Production::    BlockExpression : INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["BlockExpression"]("INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 207:
    /*! Production::    TryBlock : Try */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try", ...[yyvstack[yysp], null, null]), { rule: "Try", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 208:
    /*! Production::    TryBlock : Try Catch */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try Catch", ...[yyvstack[yysp - 1], yyvstack[yysp], null]), { rule: "Try Catch", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 209:
    /*! Production::    TryBlock : Try Catch Finally */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try Catch Finally", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Try Catch Finally", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 210:
    /*! Production::    Try : TRY Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Try"]("TRY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "TRY Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 211:
    /*! Production::    Try : TRY Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Try"]("TRY Block", ...[yyvstack[yysp]]), { rule: "TRY Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 212:
    /*! Production::    Finally : FINALLY Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Finally"]("FINALLY Block", ...[yyvstack[yysp]]), { rule: "FINALLY Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 213:
    /*! Production::    Finally : FINALLY Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Finally"]("FINALLY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "FINALLY Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 214:
    /*! Production::    Catch : CATCH Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Block", ...[null, yyvstack[yysp]]), { rule: "CATCH Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 215:
    /*! Production::    Catch : CATCH Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Expression", ...[null, yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 216:
    /*! Production::    Catch : CATCH Identifier Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier Block", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "CATCH Identifier Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 217:
    /*! Production::    Catch : CATCH Identifier THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "CATCH Identifier THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 218:
    /*! Production::    Catch : CATCH Identifier THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Identifier THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 219:
    /*! Production::    While : WhileUntil Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap, yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 220:
    /*! Production::    While : WhileUntil Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 221:
    /*! Production::    While : WhileUntil "(" Expression ")" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil ( Expression ) Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4]]), { rule: "WhileUntil ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 222:
    /*! Production::    While : WhileUntil Expression Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap, yyvstack[yysp - 2]]), { rule: "WhileUntil Expression Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 223:
    /*! Production::    While : Loop WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Loop WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 2].unwrap, yyvstack[yysp - 1]]), { rule: "Loop WhileUntil Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 224:
    /*! Production::    While : Loop NEWLINE WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Loop NEWLINE WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 3].unwrap, yyvstack[yysp - 1]]), { rule: "Loop NEWLINE WhileUntil Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 225:
    /*! Production::    While : Expression WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Expression WhileUntil Expression", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2]), yyvstack[yysp - 1]]), { rule: "Expression WhileUntil Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 226:
    /*! Production::    WhileUntil : WHILE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("WHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 227:
    /*! Production::    WhileUntil : UNTIL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("UNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 228:
    /*! Production::    WhileUntil : POSTWHILE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("POSTWHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 229:
    /*! Production::    WhileUntil : POSTUNTIL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("POSTUNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 230:
    /*! Production::    Loop : LOOP Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Loop"]("LOOP Block", ...[yyvstack[yysp].unwrap]), { rule: "LOOP Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 231:
    /*! Production::    Loop : LOOP Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Loop"]("LOOP Expression", ...[yy.Block.wrap(yyvstack[yysp]).unwrap]), { rule: "LOOP Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 232:
    /*! Production::    Else : ElseOtherwise Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 233:
    /*! Production::    Else : ElseOtherwise Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Expression", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 234:
    /*! Production::    Else : ElseOtherwise Statement */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Statement", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Statement", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 235:
    /*! Production::    Else : ElseOtherwise THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise THEN Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 236:
    /*! Production::    IfBlock : IfUnless Expression Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "IfUnless Expression Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 237:
    /*! Production::    IfBlock : IfUnless Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 238:
    /*! Production::    IfBlock : IfUnless Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 239:
    /*! Production::    IfBlock : IfUnless "(" Expression ")" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless ( Expression ) Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 4]]), { rule: "IfUnless ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 240:
    /*! Production::    IfBlock : IfUnless Expression THEN Statement */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Statement", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Statement", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 241:
    /*! Production::    IfBlock : IfUnless Expression "{" Expression "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression { Expression }", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp - 4]]), { rule: "IfUnless Expression { Expression }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 242:
    /*! Production::    IfBlock : IfUnless Expression THEN "{" Expression "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Expression }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Expression }", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 243:
    /*! Production::    IfBlock : IfUnless Expression THEN "{" Statement "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Statement }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Statement }", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 244:
    /*! Production::    IfUnless : IF */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["IfUnless"]("IF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 245:
    /*! Production::    IfUnless : UNLESS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["IfUnless"]("UNLESS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 246:
    /*! Production::    ElseOtherwise : ELSE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("ELSE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 247:
    /*! Production::    ElseOtherwise : OTHERWISE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("OTHERWISE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 248:
    /*! Production::    ElseOtherwise : OR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 249:
    /*! Production::    Value : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Assignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 250:
    /*! Production::    Value : Parenthetical */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Parenthetical", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 251:
    /*! Production::    Value : Literal */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 252:
    /*! Production::    Value : Invocation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Invocation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 253:
    /*! Production::    Value : Function */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 254:
    /*! Production::    Value : New */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("New", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 255:
    /*! Production::    Value : This */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("This", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 256:
    /*! Production::    Value : Super */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Super", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 257:
    /*! Production::    Value : SUCH */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("SUCH", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 258:
    /*! Production::    New : NEW Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["New"]("NEW Expression", ...[yyvstack[yysp]]), { rule: "NEW Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 259:
    /*! Production::    Super : SUPER "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Super"]("SUPER . PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] })]), { rule: "SUPER . PROPERTY", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 260:
    /*! Production::    Super : SUPER INDEX_START PROPERTY INDEX_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Super"]("SUPER INDEX_START PROPERTY INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "SUPER INDEX_START PROPERTY INDEX_END", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 261:
    /*! Production::    This : THIS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["This"]("THIS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 262:
    /*! Production::    Parenthetical : "(" Expression ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( Expression )", ...[yyvstack[yysp - 1]]), { rule: "( Expression )", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 263:
    /*! Production::    Parenthetical : "(" Body ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( Body )", ...[yyvstack[yysp - 1]]), { rule: "( Body )", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 264:
    /*! Production::    Parenthetical : "(" INDENT Body OUTDENT ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( INDENT Body OUTDENT )", ...[yyvstack[yysp - 2]]), { rule: "( INDENT Body OUTDENT )", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 265:
    /*! Production::    ParamObject : "{" ParamPropList "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamObject"]("{ ParamPropList }", ...[yyvstack[yysp - 1]]), { rule: "{ ParamPropList }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
    break;

case 266:
    /*! Production::    ParamObject : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamObject"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined })
    break;

case 267:
    /*! Production::    Object : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 268:
    /*! Production::    Object : "{" PropList OptComma "}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ PropList OptComma }", ...[yyvstack[yysp - 2]]), { rule: "{ PropList OptComma }", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"indentOf":1}, { generated: undefined, indented: yylstack[yysp - 3].indented })
    break;

case 269:
    /*! Production::    Object : "{" INDENT PropList OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ INDENT PropList OUTDENT }", ...[yyvstack[yysp - 2]]), { rule: "{ INDENT PropList OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined })
    break;

case 270:
    /*! Production::    PropList : PropObj */
case 275:
    /*! Production::    ParamPropList : ParamPropObj */
case 409:
    /*! Production::    ParamArrayArg : ParamAssignable */
case 413:
    /*! Production::    ArrayArg : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp]]
    break;

case 271:
    /*! Production::    PropList : PropList "," PropObj */
case 276:
    /*! Production::    ParamPropList : ParamPropList "," ParamPropObj */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].push(yyvstack[yysp]) && yyvstack[yysp - 2]
    break;

case 272:
    /*! Production::    PropList : PropList OptComma NEWLINE PropObj */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].push(yylstack[yysp - 1].generated, yyvstack[yysp]) && yyvstack[yysp - 3]
    break;

case 273:
    /*! Production::    PropList : PropList OptComma INDENT PropList OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4].concat(false, ...[yyvstack[yysp - 1]])
    break;

case 274:
    /*! Production::    ParamPropList : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = []
    break;

case 277:
    /*! Production::    ParamPropList : ParamPropList OptComma NEWLINE ParamPropObj */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].push(yyvstack[yysp]) && yyvstack[yysp - 3]
    break;

case 278:
    /*! Production::    ParamPropList : ParamPropList OptComma INDENT ParamPropObj OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4].push(yyvstack[yysp - 1]) && yyvstack[yysp - 4]
    break;

case 280:
    /*! Production::    PropObj : PROPERTY ":" Expression */
case 283:
    /*! Production::    PropObj : AlphaNum ":" Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp], [yylstack[yysp - 2], yylstack[yysp]]]
    break;

case 281:
    /*! Production::    PropObj : PROPERTY ":" Block */
case 284:
    /*! Production::    PropObj : AlphaNum ":" Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 2], yylstack[yysp], true]]
    break;

case 282:
    /*! Production::    PropObj : PROPERTY ":" INDENT Expression OUTDENT */
case 285:
    /*! Production::    PropObj : AlphaNum ":" INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 4], yyvstack[yysp - 1], [yylstack[yysp - 4], yylstack[yysp], true]]
    break;

case 286:
    /*! Production::    PropObj : "[" Expression "]" ":" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yyvstack[yysp], [yylstack[yysp - 4], yylstack[yysp]]]
    break;

case 287:
    /*! Production::    PropObj : "[" Expression "]" ":" INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 5], yyvstack[yysp - 1], [yylstack[yysp - 6], yylstack[yysp - 1], true]]
    break;

case 288:
    /*! Production::    PropObj : "[" Expression "]" ":" Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 4], yylstack[yysp], true]]
    break;

case 289:
    /*! Production::    PropObj : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 1], yylstack[yysp]]]
    break;

case 290:
    /*! Production::    PropObj : "..." PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 2], yylstack[yysp]], true]
    break;

case 291:
    /*! Production::    PropObj : PROPERTY ":" "..." */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], false, [yylstack[yysp - 2], yylstack[yysp]], true]
    break;

case 292:
    /*! Production::    PropObj : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp][1], false, [yylstack[yysp], yylstack[yysp]]]
    break;

case 294:
    /*! Production::    PropObj : "..." Value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]
    break;

case 295:
    /*! Production::    PropObj : Value "..." */
case 529:
    /*! Production::    OptDefault : Identifier "," */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1]
    break;

case 296:
    /*! Production::    ParamPropObj : PROPERTY ":" ParamAssignable */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp]]
    break;

case 297:
    /*! Production::    ParamPropObj : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1]]
    break;

case 298:
    /*! Production::    ParamPropObj : PROPERTY ":" DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3],,yyvstack[yysp]]
    break;

case 300:
    /*! Production::    ParamPropObj : ParamIdentifier DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],,yyvstack[yysp]]
    break;

case 301:
    /*! Production::    ParamPropObj : "..." PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1],,,true]
    break;

case 302:
    /*! Production::    ParamPropObj : PROPERTY ":" "..." */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],,,true]
    break;

case 303:
    /*! Production::    Literal : AlphaNum */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("AlphaNum", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 304:
    /*! Production::    Literal : Regex */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 305:
    /*! Production::    Literal : UNDEFINED */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("UNDEFINED", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 306:
    /*! Production::    Literal : INFINITY */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("INFINITY", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 307:
    /*! Production::    Literal : BOOL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("BOOL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 308:
    /*! Production::    Literal : NULL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("NULL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 309:
    /*! Production::    Literal : NAN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("NAN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 310:
    /*! Production::    AlphaNum : String */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AlphaNum"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 311:
    /*! Production::    AlphaNum : NUMBER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AlphaNum"]("NUMBER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 312:
    /*! Production::    String : STRING */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["String"]("STRING", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 313:
    /*! Production::    String : StringWithInterpolations */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["String"]("StringWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 314:
    /*! Production::    StringWithInterpolations : STRING_START Interpolations STRING_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["StringWithInterpolations"]("STRING_START Interpolations STRING_END", ...[yyvstack[yysp - 1], yyvstack[yysp - 2]]), { rule: "STRING_START Interpolations STRING_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 315:
    /*! Production::    Interpolations : Interpolation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolation", ...[yyvstack[yysp]]), { rule: "Interpolation", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 316:
    /*! Production::    Interpolations : Interpolations Interpolation */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolations Interpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "Interpolations Interpolation", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 317:
    /*! Production::    Interpolation : INTERPOLATION_START Expression INTERPOLATION_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 318:
    /*! Production::    Interpolation : String */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Interpolation"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 319:
    /*! Production::    Regex : REGEX */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Regex"]("REGEX", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 320:
    /*! Production::    Regex : RegexWithInterpolations */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Regex"]("RegexWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 321:
    /*! Production::    RegexWithInterpolations : REGEX_START RegexInterpolations REGEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexWithInterpolations"]("REGEX_START RegexInterpolations REGEX_END", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "REGEX_START RegexInterpolations REGEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 322:
    /*! Production::    RegexInterpolations : RegexInterpolation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolation", ...[yyvstack[yysp]]), { rule: "RegexInterpolation", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 323:
    /*! Production::    RegexInterpolations : RegexInterpolations RegexInterpolation */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolations RegexInterpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "RegexInterpolations RegexInterpolation", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 324:
    /*! Production::    RegexInterpolation : INTERPOLATION_START Expression INTERPOLATION_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 325:
    /*! Production::    RegexInterpolation : Regex */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["RegexInterpolation"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 326:
    /*! Production::    Function : FuncHeader */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FuncHeader", ...[yyvstack[yysp].contents, yy.Block.wrap(), { arguments: yyvstack[yysp][3] }]), { rule: "FuncHeader", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 327:
    /*! Production::    Function : FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 328:
    /*! Production::    Function : FuncSpecifiers FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FuncSpecifiers FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { ...yyvstack[yysp - 2].unwrap, arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FuncSpecifiers FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 329:
    /*! Production::    Function : FUNCTION FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNCTION FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { yields: yylstack[yysp - 2].origin === 'function*', arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 330:
    /*! Production::    Function : ASYNC FUNCTION FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 2].origin === 'function*', arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 331:
    /*! Production::    Function : FUNCTION WITH FuncBody */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNCTION WITH FuncBody", ...[[], yyvstack[yysp].unwrap, { yields: yylstack[yysp - 2].origin === 'function*', returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION WITH FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 332:
    /*! Production::    Function : FUNCTION WITH "<(" TypeArguments ")>" FuncBody */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNCTION WITH <( TypeArguments )> FuncBody", ...[[], yyvstack[yysp].unwrap, { yields: yylstack[yysp - 5].origin === 'function*', arguments: yyvstack[yysp - 2], returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION WITH <( TypeArguments )> FuncBody", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 333:
    /*! Production::    Function : ASYNC FUNCTION WITH FuncBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION WITH FuncBody", ...[[], yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 2].origin === 'function*', returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION WITH FuncBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 334:
    /*! Production::    Function : ASYNC FUNCTION WITH "<(" TypeArguments ")>" FuncBody */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION WITH <( TypeArguments )> FuncBody", ...[[], yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 5].origin === 'function*', arguments: yyvstack[yysp - 2], returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION WITH <( TypeArguments )> FuncBody", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 335:
    /*! Production::    Function : WITH Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("WITH Block", ...[[], yyvstack[yysp].unwrap, {}]), { rule: "WITH Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 336:
    /*! Production::    Function : WITH "<(" TypeArguments ")>" Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("WITH <( TypeArguments )> Block", ...[[], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 2] }]), { rule: "WITH <( TypeArguments )> Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 337:
    /*! Production::    Function : WITH "<(" TypeArguments ")>" THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("WITH <( TypeArguments )> THEN Block", ...[[], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 3], returns: [yylstack[yysp - 1].type].filter(Boolean) }]), { rule: "WITH <( TypeArguments )> THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 338:
    /*! Production::    Function : FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNC_DIRECTIVE Block", ...[[], yyvstack[yysp].unwrap]), { rule: "FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 339:
    /*! Production::    FuncBody : THEN Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncBody"]("THEN Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp - 1], yylstack[yysp])]), { rule: "THEN Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 340:
    /*! Production::    FuncBody : Block */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncBody"]("Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp])]), { rule: "Block", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined })
    break;

case 341:
    /*! Production::    FuncBody : THEN Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncBody"]("THEN Expression", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "THEN Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 342:
    /*! Production::    FuncSpecifiers : STATIC GET */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC GET", ...[{ static: true, get: true }]), { rule: "STATIC GET", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 343:
    /*! Production::    FuncSpecifiers : STATIC SET */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC SET", ...[{ static: true, set: true }]), { rule: "STATIC SET", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 344:
    /*! Production::    FuncSpecifiers : STATIC ASYNC */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC ASYNC", ...[{ static: true, async: true }]), { rule: "STATIC ASYNC", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 345:
    /*! Production::    FuncSpecifiers : GET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("GET", ...[{ get: true }]), { rule: "GET", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 346:
    /*! Production::    FuncSpecifiers : SET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("SET", ...[{ set: true }]), { rule: "SET", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 347:
    /*! Production::    FuncSpecifiers : STATIC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC", ...[{ static: true }]), { rule: "STATIC", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 348:
    /*! Production::    FuncSpecifiers : ASYNC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("ASYNC", ...[{ async: true }]), { rule: "ASYNC", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 349:
    /*! Production::    FuncHeader : Identifier TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? Params", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Identifier TypeArguments? Params", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
    break;

case 350:
    /*! Production::    FuncHeader : Identifier WITH TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier WITH TypeArguments? Params", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Identifier WITH TypeArguments? Params", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined })
    break;

case 351:
    /*! Production::    FuncHeader : Identifier TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? WITH Params", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined })
    break;

case 352:
    /*! Production::    FuncHeader : WITH TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("WITH TypeArguments? Params", ...[null, yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "WITH TypeArguments? Params", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
    break;

case 353:
    /*! Production::    FuncHeader : TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("TypeArguments? WITH Params", ...[null, yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":2,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
    break;

case 354:
    /*! Production::    FuncHeader : Identifier TypeArguments? */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments?", ...[yyvstack[yysp - 1], null, yyvstack[yysp].unwrap]), { rule: "Identifier TypeArguments?", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined })
    break;

case 355:
    /*! Production::    FuncHeader : Identifier TypeArguments? WITH */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? WITH", ...[yyvstack[yysp - 2], null, yyvstack[yysp - 1].unwrap]), { rule: "Identifier TypeArguments? WITH", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src } }, {"first":1,"last":3,"typeOf":0,"checkGenerated":false}, { generated: undefined })
    break;

case 356:
    /*! Production::    FuncHeader : Identifier WITH TypeArguments? */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier WITH TypeArguments?", ...[yyvstack[yysp - 2], null, yyvstack[yysp].unwrap]), { rule: "Identifier WITH TypeArguments?", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 2].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined })
    break;

case 357:
    /*! Production::    FuncHeader : TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("TypeArguments? Params", ...[null, yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "TypeArguments? Params", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":2,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
    break;

case 358:
    /*! Production::    TypeArguments? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 359:
    /*! Production::    TypeArguments? : "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("<( TypeArguments )>", ...[yyvstack[yysp - 1]]), { rule: "<( TypeArguments )>", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 360:
    /*! Production::    TypeArguments? : "<(" INDENT TypeArguments OUTDENT ")>" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("<( INDENT TypeArguments OUTDENT )>", ...[yyvstack[yysp - 2]]), { rule: "<( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 361:
    /*! Production::    Params : PARAM_START PARAM_END */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Params"]("PARAM_START PARAM_END", ...[[]]), { rule: "PARAM_START PARAM_END", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
    break;

case 362:
    /*! Production::    Params : PARAM_START ParamList PARAM_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Params"]("PARAM_START ParamList PARAM_END", ...[yyvstack[yysp - 1].setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "PARAM_START ParamList PARAM_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
    break;

case 363:
    /*! Production::    ParamList : Param */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("Param", ...[yyvstack[yysp]]), { rule: "Param", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 364:
    /*! Production::    ParamList : ParamList "," Param */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList , Param", ...[...yyvstack[yysp - 2].addParam(yyvstack[yysp]).setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "ParamList , Param", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 365:
    /*! Production::    ParamList : ParamList OptComma NEWLINE Param */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma NEWLINE Param", ...[...yyvstack[yysp - 3].addParam(yyvstack[yysp])]), { rule: "ParamList OptComma NEWLINE Param", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 366:
    /*! Production::    ParamList : ParamList OptComma INDENT ParamList OptComma OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma INDENT ParamList OptComma OUTDENT", ...[...yyvstack[yysp - 5].addParams(yyvstack[yysp - 2].contents)]), { rule: "ParamList OptComma INDENT ParamList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 367:
    /*! Production::    Param : ParamAssignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Param"]("ParamAssignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 368:
    /*! Production::    Assign : Assignment */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assign"]("Assignment", ...[yyvstack[yysp]]), { rule: "Assignment", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 369:
    /*! Production::    Assignment : Assignable AssignKeyword Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 370:
    /*! Production::    Assignment : Assignable AssignKeyword INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword INDENT Expression OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 3]]), { rule: "Assignable AssignKeyword INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 371:
    /*! Production::    Assignment : Assignable AssignKeyword NEWLINE Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword NEWLINE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Assignable AssignKeyword NEWLINE Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 372:
    /*! Production::    Assignment : Assignable AssignKeyword Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Block", ...[yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 373:
    /*! Production::    AssignKeyword : AS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["AssignKeyword"]("AS", ...[yylstack[yysp].origin]), { rule: "AS", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 374:
    /*! Production::    AssignKeyword : AT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AssignKeyword"]("AT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 375:
    /*! Production::    AssignKeyword : FROM */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AssignKeyword"]("FROM", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 376:
    /*! Production::    Assignable : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 377:
    /*! Production::    Assignable : ARGUMENT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("ARGUMENT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 378:
    /*! Production::    Assignable : Object */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Object", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 379:
    /*! Production::    Assignable : Array */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Array", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 380:
    /*! Production::    Assignable : Value Access */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignable"]("Value Access", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Access", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
    break;

case 381:
    /*! Production::    ParamAssignable : ParamIdentifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamIdentifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 382:
    /*! Production::    ParamAssignable : ParamObject */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 383:
    /*! Production::    ParamAssignable : ParamObject DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy.ParamAssignable('ParamObject', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
    break;

case 384:
    /*! Production::    ParamAssignable : ParamArray */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 385:
    /*! Production::    ParamAssignable : ParamArray DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy.ParamAssignable('ParamArray', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
    break;

case 386:
    /*! Production::    Identifier : IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Identifier"]("IDENTIFIER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 387:
    /*! Production::    ParamIdentifier : IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER", ...[yyvstack[yysp]]), { rule: "IDENTIFIER", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 388:
    /*! Production::    ParamIdentifier : "..." IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("... IDENTIFIER", ...[yyvstack[yysp]]), { rule: "... IDENTIFIER", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
    break;

case 389:
    /*! Production::    ParamIdentifier : IDENTIFIER "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER ...", ...[yyvstack[yysp - 1]]), { rule: "IDENTIFIER ...", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
    break;

case 390:
    /*! Production::    ParamIdentifier : IDENTIFIER DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER DEFAULTS Expression", ...[yyvstack[yysp - 2],,yyvstack[yysp]]), { rule: "IDENTIFIER DEFAULTS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 391:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "THIS . PROPERTY", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 392:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY DEFAULTS Expression", ...[yyvstack[yysp - 2],true,yyvstack[yysp]]), { rule: "THIS . PROPERTY DEFAULTS Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 393:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY "..." */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY ...", ...[yyvstack[yysp - 1], true]), { rule: "THIS . PROPERTY ...", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
    break;

case 394:
    /*! Production::    ParamIdentifier : "..." THIS "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("... THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "... THIS . PROPERTY", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined })
    break;

case 395:
    /*! Production::    Access : "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Access"](". PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] }), yylstack[yysp - 1].origin === '?.']), { rule: ". PROPERTY", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined })
    break;

case 396:
    /*! Production::    Access : INDEX_START Expression INDEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Access"]("INDEX_START Expression INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "INDEX_START Expression INDEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined })
    break;

case 397:
    /*! Production::    ParamArray : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamArray"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined })
    break;

case 398:
    /*! Production::    ParamArray : "[" ParamArrayList OptVoids "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamArray"]("[ ParamArrayList OptVoids ]", ...[yyvstack[yysp - 2]]), { rule: "[ ParamArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined })
    break;

case 399:
    /*! Production::    Array : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 1].generated })
    break;

case 400:
    /*! Production::    Array : "[" ArrayList OptVoids "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ ArrayList OptVoids ]", ...[...yyvstack[yysp - 2]]), { rule: "[ ArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 3].generated })
    break;

case 401:
    /*! Production::    Array : "[" INDENT ArrayList OptVoids OUTDENT "]" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ INDENT ArrayList OptVoids OUTDENT ]", ...[...yyvstack[yysp - 3]]), { rule: "[ INDENT ArrayList OptVoids OUTDENT ]", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":1,"indented":true}, { generated: yylstack[yysp - 5].generated })
    break;

case 402:
    /*! Production::    ParamArrayList : ParamArrayArg */
case 405:
    /*! Production::    ArrayList : ArrayArg */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [...yyvstack[yysp]]
    break;

case 403:
    /*! Production::    ParamArrayList : ParamArrayList "," ParamArrayArg */
case 406:
    /*! Production::    ArrayList : ArrayList "," ArrayArg */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp])
    break;

case 404:
    /*! Production::    ParamArrayList : ParamArrayList OptComma NEWLINE ParamArrayArg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].concat(yyvstack[yysp])
    break;

case 407:
    /*! Production::    ArrayList : ArrayList OptComma INDENT ArrayList OptVoids OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 5].concat(false, yyvstack[yysp - 2])
    break;

case 408:
    /*! Production::    ArrayList : ArrayList OptComma NEWLINE ArrayArg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].concat(yylstack[yysp - 1].generated, yyvstack[yysp])
    break;

case 410:
    /*! Production::    ParamArrayArg : Voids ParamAssignable */
case 414:
    /*! Production::    ArrayArg : Voids Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [...yyvstack[yysp - 1], yyvstack[yysp]]
    break;

case 411:
    /*! Production::    ArrayArg : "..." Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [Object.assign(yyvstack[yysp], { expansion: true })]
    break;

case 412:
    /*! Production::    ArrayArg : Expression "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [Object.assign(yyvstack[yysp - 1], { expansion: true })]
    break;

case 415:
    /*! Production::    OptVoids : %epsilon */
case 528:
    /*! Production::    OptDefault : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = undefined
    break;

case 417:
    /*! Production::    Voids : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null]
    break;

case 418:
    /*! Production::    Voids : "," Voids */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null, ...yyvstack[yysp - 1]]
    break;

case 419:
    /*! Production::    Voids : "," NEWLINE Voids */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null, ...yyvstack[yysp - 1]]
    break;

case 420:
    /*! Production::    Statement : Return */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Return", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 421:
    /*! Production::    Statement : BREAK Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("BREAK Identifier", ...[yyvstack[yysp]]), { rule: "BREAK Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 422:
    /*! Production::    Statement : BREAK */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 423:
    /*! Production::    Statement : CONTINUE Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("CONTINUE Identifier", ...[yyvstack[yysp]]), { rule: "CONTINUE Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 424:
    /*! Production::    Statement : CONTINUE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("CONTINUE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 425:
    /*! Production::    Statement : Import */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Import", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 426:
    /*! Production::    Statement : Export */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Export", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 427:
    /*! Production::    Statement : Declare */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 428:
    /*! Production::    Statement : THROW Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("THROW Expression", ...[yyvstack[yysp]]), { rule: "THROW Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 429:
    /*! Production::    Statement : THROW INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("THROW INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "THROW INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 430:
    /*! Production::    Statement : Type */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Type", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 431:
    /*! Production::    Statement : Interface */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Interface", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 432:
    /*! Production::    Interface : INTERFACE Identifier TypeArguments? InterfaceBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? InterfaceBody", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "INTERFACE Identifier TypeArguments? InterfaceBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 433:
    /*! Production::    Interface : INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 434:
    /*! Production::    InterfaceBody : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 435:
    /*! Production::    InterfaceBody : "{" InterfaceProperties "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ InterfaceProperties }", ...[yyvstack[yysp - 1].contents]), { rule: "{ InterfaceProperties }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 436:
    /*! Production::    InterfaceBody : "{" INDENT InterfaceProperties OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ INDENT InterfaceProperties OUTDENT }", ...[yyvstack[yysp - 2].contents]), { rule: "{ INDENT InterfaceProperties OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 437:
    /*! Production::    InterfaceProperties : InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["InterfaceProperties"]("InterfaceProperty", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 438:
    /*! Production::    InterfaceProperties : InterfaceProperties "," InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties , InterfaceProperty", ...[...yyvstack[yysp - 2].unwrap, yyvstack[yysp]]), { rule: "InterfaceProperties , InterfaceProperty", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 439:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma NEWLINE InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma NEWLINE InterfaceProperty", ...[...yyvstack[yysp - 3].unwrap, yyvstack[yysp]]), { rule: "InterfaceProperties OptComma NEWLINE InterfaceProperty", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 440:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT", ...[...yyvstack[yysp - 4].unwrap, yyvstack[yysp - 1]]), { rule: "InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 441:
    /*! Production::    InterfaceProperty : InterfaceKeyword? TypeArguments? Identifier? Params ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("InterfaceKeyword? TypeArguments? Identifier? Params : TypeSentence", ...[yyvstack[yysp - 3].unwrap, yyvstack[yysp], yyvstack[yysp - 2], { ...yyvstack[yysp - 5].unwrap, arguments: yyvstack[yysp - 4].unwrap, optional: yylstack[yysp - 4].origin === "?:" }]), { rule: "InterfaceKeyword? TypeArguments? Identifier? Params : TypeSentence", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 442:
    /*! Production::    InterfaceProperty : PROPERTY ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("PROPERTY : TypeSentence", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], null, { optional: yylstack[yysp - 1].origin === "?:" }]), { rule: "PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 443:
    /*! Production::    InterfaceProperty : READONLY PROPERTY ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY PROPERTY : TypeSentence", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], null, { optional: yylstack[yysp - 1].origin === "?:", readonly: true }]), { rule: "READONLY PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 444:
    /*! Production::    InterfaceKeyword? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceKeyword?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 445:
    /*! Production::    InterfaceKeyword? : NEW */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceKeyword?"]("NEW", ...[{ new: true }]), { rule: "NEW", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 446:
    /*! Production::    InterfaceKeyword? : READONLY */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceKeyword?"]("READONLY", ...[{ readonly: true }]), { rule: "READONLY", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 447:
    /*! Production::    Identifier? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Identifier?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 448:
    /*! Production::    Identifier? : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Identifier?"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 449:
    /*! Production::    Type : TYPE TypeDeclaration */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE TypeDeclaration", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 450:
    /*! Production::    Type : TYPE INDENT TypeDeclaration OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE INDENT TypeDeclaration OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "TYPE INDENT TypeDeclaration OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 451:
    /*! Production::    Type : TYPE NEWLINE TypeDeclaration */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE NEWLINE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE NEWLINE TypeDeclaration", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 452:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS TypeSentence", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? AS TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 453:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 5], yyvstack[yysp - 1], yyvstack[yysp - 4].unwrap]), { rule: "Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 454:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS NEWLINE TypeSentence", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 3].unwrap]), { rule: "Identifier TypeArguments? AS NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 455:
    /*! Production::    TypeSentence : TypeSentence "&" TypeValue */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & TypeValue", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "TypeSentence & TypeValue", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 456:
    /*! Production::    TypeSentence : TypeSentence "|" TypeValue */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | TypeValue", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "TypeSentence | TypeValue", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 457:
    /*! Production::    TypeSentence : TypeSentence "&" INDENT TypeValue OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & INDENT TypeValue OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeSentence & INDENT TypeValue OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 458:
    /*! Production::    TypeSentence : TypeSentence "|" INDENT TypeValue OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | INDENT TypeValue OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeSentence | INDENT TypeValue OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 459:
    /*! Production::    TypeSentence : TypeSentence "&" NEWLINE TypeValue */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & NEWLINE TypeValue", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "TypeSentence & NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 460:
    /*! Production::    TypeSentence : TypeSentence "|" NEWLINE TypeValue */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | NEWLINE TypeValue", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "TypeSentence | NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 461:
    /*! Production::    TypeSentence : TypeValue */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeValue", ...[yyvstack[yysp]]), { rule: "TypeValue", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 462:
    /*! Production::    TypeValue : TypeArray */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 463:
    /*! Production::    TypeValue : TypeObject */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 464:
    /*! Production::    TypeValue : Literal */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 465:
    /*! Production::    TypeValue : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 466:
    /*! Production::    TypeValue : TAG */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TAG", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 467:
    /*! Production::    TypeValue : TypeWithArguments */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 468:
    /*! Production::    TypeWithArguments : "(" TypeSentence ")" INDEX_START INDEX_END */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("( TypeSentence ) INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 3] }]), { rule: "( TypeSentence ) INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 469:
    /*! Production::    TypeWithArguments : TypeValue INDEX_START INDEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("TypeValue INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 2] }]), { rule: "TypeValue INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 470:
    /*! Production::    TypeWithArguments : Identifier "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( TypeArguments )>", ...[{ type: yyvstack[yysp - 3], arguments: yyvstack[yysp - 1] }]), { rule: "Identifier <( TypeArguments )>", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 471:
    /*! Production::    TypeWithArguments : Identifier "<(" INDENT TypeArguments OUTDENT ")>" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( INDENT TypeArguments OUTDENT )>", ...[{ type: yyvstack[yysp - 5], arguments: yyvstack[yysp - 2] }]), { rule: "Identifier <( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 472:
    /*! Production::    TypeArguments : TypeArgument */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArguments"]("TypeArgument", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 473:
    /*! Production::    TypeArguments : TypeArguments "," TypeArgument */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments , TypeArgument", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArguments , TypeArgument", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 474:
    /*! Production::    TypeArguments : TypeArguments OptComma NEWLINE TypeArgument */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma NEWLINE TypeArgument", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArguments OptComma NEWLINE TypeArgument", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 475:
    /*! Production::    TypeArguments : TypeArguments OptComma INDENT TypeArgument OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma INDENT TypeArgument OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArguments OptComma INDENT TypeArgument OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 476:
    /*! Production::    TypeArgument : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArgument"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 477:
    /*! Production::    TypeArgument : Identifier EXTENDS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArgument"]("Identifier EXTENDS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier EXTENDS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 478:
    /*! Production::    TypeArgument : TypeWithArguments */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArgument"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 479:
    /*! Production::    TypeObject : "{" TypeObjProps "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ TypeObjProps }", ...[...yyvstack[yysp - 1].contents]), { rule: "{ TypeObjProps }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 480:
    /*! Production::    TypeObject : "{" INDENT TypeObjProps OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ INDENT TypeObjProps OUTDENT }", ...[...yyvstack[yysp - 2].contents]), { rule: "{ INDENT TypeObjProps OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 481:
    /*! Production::    TypeObjProps : TypeObjProps OptComma NEWLINE TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma NEWLINE TypeObjProp", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeObjProps OptComma NEWLINE TypeObjProp", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 482:
    /*! Production::    TypeObjProps : TypeObjProps "," TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps , TypeObjProp", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeObjProps , TypeObjProp", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 483:
    /*! Production::    TypeObjProps : TypeObjProps OptComma INDENT TypeObjProp OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma INDENT TypeObjProp OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeObjProps OptComma INDENT TypeObjProp OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 484:
    /*! Production::    TypeObjProps : TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeObjProps"]("TypeObjProp", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 485:
    /*! Production::    TypeObjProp : PROPERTY ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : TypeSentence", ...[yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1].origin === '?:']), { rule: "PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 486:
    /*! Production::    TypeObjProp : PROPERTY ":" NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : NEWLINE TypeSentence", ...[yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2].origin === '?:']), { rule: "PROPERTY : NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 487:
    /*! Production::    TypeObjProp : PROPERTY ":" INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yylstack[yysp - 3].origin === '?:']), { rule: "PROPERTY : INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 488:
    /*! Production::    TypeObjProp : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY :", ...[yyvstack[yysp - 1], , yylstack[yysp].origin === '?:']), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 489:
    /*! Production::    TypeObjProp : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 490:
    /*! Production::    TypeArray : "[" TypeArrayItems "]" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArray"]("[ TypeArrayItems ]", ...[...yyvstack[yysp - 1].contents]), { rule: "[ TypeArrayItems ]", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 491:
    /*! Production::    TypeArray : "[" INDENT TypeArrayItems OUTDENT "]" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArray"]("[ INDENT TypeArrayItems OUTDENT ]", ...[...yyvstack[yysp - 2].contents]), { rule: "[ INDENT TypeArrayItems OUTDENT ]", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 492:
    /*! Production::    TypeArrayItems : TypeSentence */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArrayItems"]("TypeSentence", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 493:
    /*! Production::    TypeArrayItems : TypeArrayItems OptComma NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma NEWLINE TypeSentence", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArrayItems OptComma NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 494:
    /*! Production::    TypeArrayItems : TypeArrayItems OptComma INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma INDENT TypeSentence OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArrayItems OptComma INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 495:
    /*! Production::    TypeArrayItems : TypeArrayItems "," TypeSentence */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems , TypeSentence", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArrayItems , TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 496:
    /*! Production::    Declare : DeclarationKeyword Declarations */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword Declarations", ...[{ keyword: yyvstack[yysp - 1], statements: yyvstack[yysp] }, [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "DeclarationKeyword Declarations", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 497:
    /*! Production::    Declare : DeclarationKeyword INDENT Declarations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword INDENT Declarations OUTDENT", ...[{ keyword: yyvstack[yysp - 3], statements: yyvstack[yysp - 1], indented: true }, [yylstack[yysp - 3], yylstack[yysp - 1]]]), { rule: "DeclarationKeyword INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 498:
    /*! Production::    DeclarationKeyword : VAR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("VAR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 499:
    /*! Production::    DeclarationKeyword : LET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("LET", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 500:
    /*! Production::    DeclarationKeyword : CONST */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("CONST", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 501:
    /*! Production::    Declarations : Declaration */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declaration", ...[yyvstack[yysp].unwrap]), { rule: "Declaration", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 502:
    /*! Production::    Declarations : Declarations "," Declaration */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations , Declaration", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].unwrap]), { rule: "Declarations , Declaration", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 503:
    /*! Production::    Declarations : Declarations OptComma NEWLINE Declaration */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma NEWLINE Declaration", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp].unwrap]), { rule: "Declarations OptComma NEWLINE Declaration", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 504:
    /*! Production::    Declarations : Declarations OptComma INDENT Declarations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma INDENT Declarations OUTDENT", ...[...yyvstack[yysp - 4].contents, false, ...yyvstack[yysp - 1].contents]), { rule: "Declarations OptComma INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 505:
    /*! Production::    Declaration : Assignment */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Declaration"]("Assignment", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 506:
    /*! Production::    Declaration : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Declaration"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 507:
    /*! Production::    Return : RETURN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN", ...[/* */]), { rule: "RETURN", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 508:
    /*! Production::    Return : RETURN Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN Expression", ...[yyvstack[yysp]]), { rule: "RETURN Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 509:
    /*! Production::    Return : RETURN INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 510:
    /*! Production::    Return : RETURN INDENT Body OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 511:
    /*! Production::    Import : IMPORT OptDefault ImportList Import(FROM) STRING */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault ImportList Import(FROM) STRING", ...[yyvstack[yysp - 2].contents, yyvstack[yysp], false, yyvstack[yysp - 3]]), { rule: "IMPORT OptDefault ImportList Import(FROM) STRING", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 512:
    /*! Production::    Import : IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 4]]), { rule: "IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 513:
    /*! Production::    Import : IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 514:
    /*! Production::    Import : IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING", ...[yyvstack[yysp - 3].contents, yyvstack[yysp], false, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 515:
    /*! Production::    Import : IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 4].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 6]]), { rule: "IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 516:
    /*! Production::    Import : IMPORT OptDefault "*" AS Identifier Import(FROM) STRING */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault * AS Identifier Import(FROM) STRING", ...[yyvstack[yysp - 2], yyvstack[yysp], true, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault * AS Identifier Import(FROM) STRING", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 517:
    /*! Production::    Import : IMPORT INDENT OptDefault "*" AS Identifier Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault * AS Identifier Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], true, yyvstack[yysp - 6]]), { rule: "IMPORT INDENT OptDefault * AS Identifier Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 518:
    /*! Production::    Import : IMPORT OptDefault INDENT "*" AS Identifier Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT * AS Identifier Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], true, yyvstack[yysp - 7]]), { rule: "IMPORT OptDefault INDENT * AS Identifier Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 520:
    /*! Production::    Export : EXPORT ExportList */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT ExportList", ...[{ list: yyvstack[yysp] }]), { rule: "EXPORT ExportList", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 521:
    /*! Production::    Export : EXPORT INDENT ExportList OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT ExportList OUTDENT", ...[{ list: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT ExportList OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 522:
    /*! Production::    Export : EXPORT DEFAULT Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT DEFAULT Expression", ...[{ defaults: yyvstack[yysp] }]), { rule: "EXPORT DEFAULT Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 523:
    /*! Production::    Export : EXPORT INDENT DEFAULT Expression OUDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT DEFAULT Expression OUDENT", ...[{ defaults: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT DEFAULT Expression OUDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 524:
    /*! Production::    Export : EXPORT Declare */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT Declare", ...[{ declarations: yyvstack[yysp] }]), { rule: "EXPORT Declare", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 525:
    /*! Production::    Export : EXPORT INDENT Declare OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Declare OUTDENT", ...[{ declarations: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT Declare OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 526:
    /*! Production::    Export : EXPORT Exportable */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT Exportable", ...[{ exportable: yyvstack[yysp].unwrap }]), { rule: "EXPORT Exportable", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 527:
    /*! Production::    Export : EXPORT INDENT Exportable OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Exportable OUTDENT", ...[{ exportable: yyvstack[yysp - 1].unwrap }]), { rule: "EXPORT INDENT Exportable OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 530:
    /*! Production::    OptDefault : Identifier OptComma NEWLINE */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2]
    break;

case 531:
    /*! Production::    ImportList : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ImportList"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 532:
    /*! Production::    ImportList : "{" ImportNames "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("{ ImportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ImportNames }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 533:
    /*! Production::    ImportList : "{{" INDENT ImportNames OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("{{ INDENT ImportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ImportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 534:
    /*! Production::    ExportList : "{" ExportNames "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportList"]("{ ExportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ExportNames }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 535:
    /*! Production::    ExportList : "{{" INDENT ExportNames OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportList"]("{{ INDENT ExportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ExportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 536:
    /*! Production::    ExportNames : ExportName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportName", ...[yyvstack[yysp].contents]), { rule: "ExportName", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 537:
    /*! Production::    ExportNames : ExportNames "," ExportName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportNames , ExportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ExportNames , ExportName", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 538:
    /*! Production::    ExportNames : ExportNames OptComma NEWLINE ExportName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportNames OptComma NEWLINE ExportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ExportNames OptComma NEWLINE ExportName", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 539:
    /*! Production::    ExportName : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1])]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 540:
    /*! Production::    ExportName : PROPERTY ":" Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 541:
    /*! Production::    ExportName : PROPERTY ":" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 542:
    /*! Production::    ExportName : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ExportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 543:
    /*! Production::    ExportName : Identifier AS DEFAULT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("Identifier AS DEFAULT", ...[yyvstack[yysp - 2],,true]), { rule: "Identifier AS DEFAULT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 544:
    /*! Production::    ExportName : Identifier AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2],yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 545:
    /*! Production::    Exportable : Class */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Exportable"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 546:
    /*! Production::    Exportable : Function */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Exportable"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

case 547:
    /*! Production::    ImportNames : ImportName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportName", ...[yyvstack[yysp].contents]), { rule: "ImportName", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 548:
    /*! Production::    ImportNames : ImportNames "," ImportName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportNames , ImportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ImportNames , ImportName", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 549:
    /*! Production::    ImportNames : ImportNames OptComma NEWLINE ImportName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportNames OptComma NEWLINE ImportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ImportNames OptComma NEWLINE ImportName", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 550:
    /*! Production::    ImportName : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1]), , [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 551:
    /*! Production::    ImportName : PROPERTY ":" Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 552:
    /*! Production::    ImportName : PROPERTY ":" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 553:
    /*! Production::    ImportName : Identifier AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 554:
    /*! Production::    ImportName : DEFAULT AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("DEFAULT AS Identifier", ...[(new yy.Identifier(null, 'default')).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "DEFAULT AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined })
    break;

case 555:
    /*! Production::    ImportName : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ImportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type })
    break;

}
},
table: bt({
  len: u([
  117,
  1,
  2,
  0,
  57,
  7,
  0,
  85,
  s,
  [0, 10],
  83,
  83,
  s,
  [0, 3],
  114,
  0,
  0,
  116,
  5,
  12,
  9,
  c,
  [23, 9],
  113,
  49,
  s,
  [113, 3],
  114,
  114,
  0,
  83,
  113,
  6,
  116,
  115,
  82,
  0,
  8,
  89,
  183,
  7,
  28,
  53,
  5,
  2,
  s,
  [0, 3],
  116,
  s,
  [0, 7],
  5,
  83,
  s,
  [7, 3],
  113,
  s,
  [0, 9],
  128,
  c,
  [11, 5],
  116,
  c,
  [30, 5],
  56,
  120,
  s,
  [0, 4],
  3,
  7,
  s,
  [0, 6],
  7,
  29,
  7,
  119,
  0,
  c,
  [30, 3],
  s,
  [113, 4],
  0,
  116,
  115,
  s,
  [113, 3],
  54,
  s,
  [0, 13],
  66,
  0,
  66,
  s,
  [0, 16],
  128,
  c,
  [42, 3],
  0,
  6,
  0,
  1,
  113,
  118,
  0,
  0,
  88,
  113,
  2,
  88,
  0,
  2,
  116,
  121,
  12,
  0,
  115,
  5,
  1,
  s,
  [0, 3],
  8,
  8,
  9,
  2,
  1,
  11,
  14,
  0,
  7,
  113,
  5,
  117,
  s,
  [0, 3],
  88,
  85,
  82,
  0,
  88,
  1,
  5,
  4,
  s,
  [88, 4],
  113,
  88,
  113,
  0,
  c,
  [20, 4],
  57,
  116,
  113,
  5,
  2,
  2,
  68,
  53,
  3,
  4,
  60,
  55,
  54,
  120,
  1,
  82,
  116,
  83,
  0,
  4,
  49,
  116,
  84,
  84,
  88,
  115,
  7,
  7,
  3,
  0,
  27,
  c,
  [92, 3],
  c,
  [74, 4],
  85,
  82,
  52,
  c,
  [63, 3],
  10,
  0,
  s,
  [3, 3],
  4,
  54,
  2,
  115,
  0,
  2,
  1,
  1,
  c,
  [221, 3],
  6,
  3,
  6,
  9,
  0,
  29,
  2,
  88,
  81,
  81,
  c,
  [77, 3],
  c,
  [74, 3],
  0,
  53,
  88,
  c,
  [47, 3],
  54,
  0,
  57,
  1,
  55,
  120,
  50,
  22,
  0,
  11,
  0,
  7,
  118,
  0,
  113,
  58,
  113,
  72,
  2,
  0,
  12,
  c,
  [220, 4],
  c,
  [217, 3],
  5,
  28,
  0,
  8,
  6,
  27,
  c,
  [155, 4],
  0,
  29,
  6,
  c,
  [17, 4],
  0,
  s,
  [88, 6],
  0,
  81,
  115,
  s,
  [88, 4],
  49,
  2,
  17,
  8,
  0,
  0,
  81,
  c,
  [16, 3],
  0,
  0,
  53,
  0,
  5,
  116,
  0,
  58,
  113,
  53,
  c,
  [104, 3],
  2,
  2,
  67,
  49,
  58,
  5,
  117,
  1,
  13,
  2,
  116,
  c,
  [237, 3],
  113,
  0,
  1,
  1,
  5,
  0,
  0,
  1,
  6,
  3,
  c,
  [247, 3],
  0,
  9,
  6,
  9,
  88,
  116,
  c,
  [72, 3],
  53,
  53,
  0,
  88,
  81,
  4,
  116,
  0,
  54,
  88,
  s,
  [113, 5],
  49,
  25,
  12,
  113,
  120,
  c,
  [447, 3],
  7,
  51,
  116,
  53,
  6,
  0,
  s,
  [127, 3],
  120,
  c,
  [72, 3],
  88,
  90,
  c,
  [220, 3],
  0,
  86,
  88,
  81,
  c,
  [457, 4],
  54,
  2,
  2,
  6,
  1,
  0,
  6,
  1,
  7,
  6,
  1,
  1,
  113,
  1,
  1,
  88,
  4,
  0,
  1,
  5,
  5,
  53,
  2,
  c,
  [238, 3],
  1,
  3,
  0,
  0,
  c,
  [446, 3],
  1,
  0,
  c,
  [135, 4],
  29,
  5,
  0,
  127,
  13,
  88,
  c,
  [396, 3],
  54,
  3,
  56,
  5,
  121,
  116,
  57,
  1,
  15,
  0,
  1,
  121,
  c,
  [88, 3],
  57,
  0,
  57,
  c,
  [37, 4],
  c,
  [137, 3],
  53,
  c,
  [259, 3],
  5,
  2,
  29,
  3,
  81,
  82,
  c,
  [66, 3],
  28,
  7,
  5,
  5,
  c,
  [58, 3],
  c,
  [22, 3],
  115,
  1,
  54,
  113,
  17,
  8,
  c,
  [138, 3],
  0,
  3,
  119,
  5,
  c,
  [45, 3],
  c,
  [141, 3],
  c,
  [369, 3],
  116,
  88,
  116,
  0,
  10,
  11,
  0,
  88,
  59,
  59,
  60,
  1,
  9,
  0,
  8,
  2,
  15,
  c,
  [123, 3],
  14,
  c,
  [48, 4],
  29,
  54,
  c,
  [110, 4],
  0,
  88,
  157,
  88,
  53,
  53,
  57,
  57,
  10,
  49,
  55,
  2,
  120,
  0,
  119,
  116,
  0,
  4,
  c,
  [211, 4],
  0,
  128,
  s,
  [7, 3],
  2,
  c,
  [143, 3],
  116,
  0,
  86,
  0,
  4,
  s,
  [0, 4],
  1,
  0,
  3,
  1,
  2,
  c,
  [178, 4],
  1,
  6,
  c,
  [178, 4],
  c,
  [132, 3],
  c,
  [424, 4],
  7,
  3,
  4,
  0,
  51,
  c,
  [425, 3],
  29,
  0,
  2,
  11,
  1,
  0,
  5,
  6,
  81,
  113,
  c,
  [276, 3],
  121,
  54,
  157,
  0,
  53,
  54,
  c,
  [127, 3],
  57,
  c,
  [63, 3],
  c,
  [4, 3],
  c,
  [109, 4],
  115,
  118,
  117,
  c,
  [388, 5],
  27,
  c,
  [395, 3],
  5,
  28,
  1,
  28,
  28,
  c,
  [241, 3],
  c,
  [233, 3],
  2,
  6,
  5,
  32,
  c,
  [29, 3],
  0,
  53,
  49,
  88,
  c,
  [492, 3],
  115,
  116,
  0,
  3,
  c,
  [105, 3],
  116,
  88,
  c,
  [121, 3],
  88,
  c,
  [233, 3],
  c,
  [615, 4],
  6,
  0,
  113,
  c,
  [250, 3],
  0,
  0,
  10,
  12,
  5,
  c,
  [621, 3],
  c,
  [675, 3],
  0,
  c,
  [380, 4],
  0,
  10,
  c,
  [267, 3],
  c,
  [681, 3],
  127,
  c,
  [5, 3],
  3,
  c,
  [311, 4],
  c,
  [164, 3],
  1,
  s,
  [2, 3],
  c,
  [350, 4],
  2,
  2,
  4,
  1,
  c,
  [251, 4],
  4,
  c,
  [339, 6],
  5,
  81,
  c,
  [116, 5],
  9,
  0,
  4,
  1,
  c,
  [37, 3],
  7,
  0,
  4,
  88,
  54,
  4,
  c,
  [94, 5],
  54,
  54,
  116,
  7,
  c,
  [32, 3],
  c,
  [151, 3],
  5,
  1,
  81,
  26,
  26,
  c,
  [3, 3],
  27,
  27,
  7,
  1,
  4,
  c,
  [228, 3],
  7,
  c,
  [50, 3],
  10,
  c,
  [571, 3],
  c,
  [27, 3],
  88,
  3,
  60,
  0,
  1,
  57,
  c,
  [381, 3],
  57,
  c,
  [148, 4],
  57,
  113,
  c,
  [19, 3],
  c,
  [93, 3],
  c,
  [80, 3],
  c,
  [93, 5],
  c,
  [115, 3],
  c,
  [844, 5],
  c,
  [479, 3],
  10,
  2,
  5,
  4,
  c,
  [615, 6],
  c,
  [739, 5],
  c,
  [87, 4],
  1,
  0,
  2,
  81,
  2,
  81,
  c,
  [724, 3],
  c,
  [10, 3],
  c,
  [6, 3],
  113,
  88,
  c,
  [10, 3],
  c,
  [931, 5],
  c,
  [904, 3],
  c,
  [211, 4],
  c,
  [46, 6],
  c,
  [728, 3],
  c,
  [822, 3],
  c,
  [569, 4],
  27,
  c,
  [890, 8],
  c,
  [408, 3],
  c,
  [109, 3],
  c,
  [381, 4],
  s,
  [1, 3],
  c,
  [163, 4],
  7,
  c,
  [537, 5],
  c,
  [318, 3],
  7
]),
  symbol: u([
  1,
  s,
  [3, 5, 1],
  16,
  21,
  24,
  28,
  29,
  30,
  s,
  [33, 5, 1],
  40,
  46,
  s,
  [51, 4, 1],
  74,
  79,
  83,
  89,
  92,
  95,
  101,
  s,
  [104, 6, 1],
  112,
  113,
  117,
  s,
  [119, 8, 1],
  130,
  131,
  133,
  134,
  135,
  137,
  138,
  139,
  s,
  [143, 5, 1],
  149,
  s,
  [151, 6, 1],
  s,
  [158, 7, 1],
  166,
  170,
  175,
  180,
  184,
  186,
  192,
  194,
  195,
  198,
  199,
  200,
  202,
  203,
  s,
  [205, 5, 1],
  211,
  s,
  [216, 4, 1],
  222,
  223,
  226,
  228,
  229,
  230,
  234,
  235,
  237,
  239,
  243,
  250,
  251,
  257,
  269,
  270,
  273,
  274,
  276,
  1,
  1,
  26,
  1,
  4,
  5,
  s,
  [8, 7, 1],
  17,
  19,
  22,
  26,
  39,
  s,
  [41, 5, 1],
  47,
  48,
  51,
  52,
  s,
  [55, 19, 1],
  88,
  99,
  100,
  c,
  [136, 4],
  165,
  167,
  s,
  [171, 4, 1],
  199,
  1,
  17,
  c,
  [47, 3],
  99,
  100,
  c,
  [64, 10],
  s,
  [15, 6, 1],
  22,
  23,
  25,
  26,
  31,
  32,
  38,
  c,
  [73, 8],
  s,
  [49, 4, 1],
  c,
  [75, 19],
  s,
  [75, 4, 1],
  81,
  84,
  85,
  88,
  91,
  93,
  99,
  100,
  s,
  [102, 6, 1],
  110,
  111,
  115,
  116,
  118,
  125,
  126,
  129,
  157,
  176,
  218,
  219,
  241,
  c,
  [85, 80],
  144,
  157,
  239,
  c,
  [83, 83],
  c,
  [434, 16],
  38,
  c,
  [435, 50],
  c,
  [432, 47],
  c,
  [114, 25],
  81,
  c,
  [115, 50],
  181,
  c,
  [116, 39],
  16,
  30,
  38,
  81,
  181,
  16,
  24,
  31,
  78,
  117,
  144,
  210,
  232,
  233,
  238,
  240,
  242,
  c,
  [125, 4],
  c,
  [87, 3],
  144,
  163,
  c,
  [339, 80],
  140,
  141,
  142,
  157,
  236,
  c,
  [775, 66],
  c,
  [340, 48],
  c,
  [109, 4],
  30,
  33,
  74,
  c,
  [86, 21],
  175,
  c,
  [59, 16],
  c,
  [57, 3],
  c,
  [162, 114],
  c,
  [113, 241],
  c,
  [842, 123],
  c,
  [114, 89],
  c,
  [1321, 81],
  201,
  204,
  c,
  [424, 113],
  26,
  c,
  [85, 4],
  199,
  c,
  [119, 74],
  s,
  [182, 5, 1],
  c,
  [1274, 113],
  c,
  [433, 120],
  197,
  16,
  32,
  38,
  80,
  81,
  144,
  181,
  c,
  [1676, 21],
  27,
  30,
  c,
  [92, 60],
  134,
  135,
  c,
  [1341, 4],
  230,
  c,
  [2117, 6],
  s,
  [8, 19, 1],
  s,
  [28, 52, 1],
  81,
  83,
  c,
  [107, 3],
  89,
  91,
  92,
  93,
  95,
  s,
  [99, 15, 1],
  s,
  [115, 12, 1],
  129,
  c,
  [361, 20],
  157,
  c,
  [362, 47],
  8,
  16,
  38,
  81,
  144,
  239,
  277,
  16,
  c,
  [1415, 3],
  38,
  79,
  81,
  90,
  c,
  [81, 6],
  144,
  c,
  [76, 3],
  180,
  c,
  [43, 4],
  239,
  269,
  270,
  279,
  282,
  c,
  [1446, 7],
  38,
  c,
  [1447, 39],
  c,
  [94, 4],
  271,
  272,
  26,
  38,
  144,
  239,
  258,
  144,
  c,
  [1960, 68],
  c,
  [2394, 49],
  23,
  75,
  76,
  115,
  176,
  c,
  [578, 81],
  181,
  227,
  30,
  c,
  [1913, 3],
  c,
  [275, 3],
  c,
  [7, 7],
  c,
  [1948, 4],
  135,
  181,
  230,
  c,
  [1456, 118],
  11,
  12,
  c,
  [115, 13],
  c,
  [2613, 4],
  53,
  54,
  c,
  [202, 8],
  c,
  [125, 49],
  168,
  169,
  170,
  173,
  c,
  [1697, 179],
  c,
  [2425, 91],
  c,
  [116, 117],
  16,
  17,
  c,
  [872, 7],
  78,
  112,
  113,
  114,
  c,
  [874, 26],
  212,
  214,
  c,
  [876, 14],
  c,
  [172, 5],
  15,
  c,
  [173, 3],
  25,
  c,
  [174, 16],
  78,
  c,
  [405, 82],
  245,
  247,
  249,
  c,
  [176, 8],
  30,
  134,
  231,
  30,
  33,
  134,
  135,
  c,
  [1070, 3],
  128,
  130,
  131,
  s,
  [222, 4, 1],
  c,
  [131, 3],
  38,
  c,
  [99, 10],
  144,
  150,
  c,
  [59, 6],
  239,
  s,
  [260, 5, 1],
  267,
  125,
  126,
  128,
  s,
  [218, 4, 1],
  c,
  [3435, 7],
  17,
  21,
  s,
  [22, 4, 2],
  c,
  [175, 7],
  39,
  c,
  [579, 50],
  c,
  [1043, 48],
  c,
  [2616, 355],
  c,
  [2842, 235],
  c,
  [1145, 116],
  c,
  [230, 53],
  193,
  c,
  [570, 376],
  c,
  [3800, 28],
  c,
  [82, 3],
  175,
  185,
  c,
  [3804, 19],
  270,
  c,
  [167, 66],
  c,
  [66, 71],
  c,
  [2142, 252],
  c,
  [113, 97],
  76,
  125,
  126,
  c,
  [4967, 3],
  114,
  c,
  [1230, 137],
  c,
  [3182, 3],
  c,
  [116, 49],
  177,
  178,
  c,
  [3529, 121],
  c,
  [5378, 7],
  c,
  [319, 113],
  c,
  [5486, 83],
  c,
  [203, 7],
  38,
  82,
  c,
  [205, 16],
  c,
  [2321, 51],
  c,
  [3365, 49],
  c,
  [2440, 8],
  c,
  [528, 17],
  c,
  [527, 15],
  c,
  [2697, 20],
  c,
  [119, 36],
  c,
  [2726, 12],
  c,
  [5332, 14],
  c,
  [5327, 11],
  c,
  [454, 66],
  c,
  [248, 49],
  15,
  26,
  31,
  38,
  179,
  28,
  15,
  17,
  c,
  [444, 3],
  38,
  39,
  118,
  c,
  [8, 15],
  78,
  118,
  117,
  144,
  23,
  15,
  17,
  26,
  38,
  78,
  114,
  117,
  144,
  213,
  215,
  240,
  15,
  16,
  24,
  25,
  c,
  [173, 4],
  s,
  [238, 5, 2],
  249,
  c,
  [3577, 7],
  c,
  [635, 113],
  c,
  [105, 4],
  163,
  c,
  [118, 8],
  c,
  [2870, 9],
  c,
  [2190, 100],
  c,
  [755, 88],
  c,
  [6329, 165],
  157,
  c,
  [4164, 21],
  c,
  [4651, 45],
  s,
  [96, 5, 1],
  c,
  [4654, 16],
  157,
  230,
  74,
  30,
  c,
  [6084, 4],
  c,
  [4473, 3],
  181,
  c,
  [353, 169],
  c,
  [88, 183],
  c,
  [940, 113],
  c,
  [201, 201],
  c,
  [113, 11],
  c,
  [5309, 7],
  c,
  [1136, 99],
  c,
  [317, 9],
  16,
  19,
  32,
  38,
  c,
  [7439, 28],
  81,
  c,
  [7440, 13],
  181,
  c,
  [287, 17],
  c,
  [5223, 100],
  c,
  [403, 113],
  c,
  [6145, 5],
  18,
  84,
  86,
  87,
  c,
  [612, 11],
  18,
  19,
  23,
  27,
  30,
  c,
  [300, 30],
  75,
  76,
  81,
  c,
  [52, 3],
  c,
  [305, 7],
  115,
  125,
  126,
  c,
  [5808, 5],
  230,
  c,
  [5589, 53],
  15,
  18,
  84,
  18,
  84,
  99,
  100,
  c,
  [128, 10],
  c,
  [127, 3],
  c,
  [123, 30],
  c,
  [122, 13],
  c,
  [120, 3],
  236,
  c,
  [60, 12],
  c,
  [59, 28],
  84,
  c,
  [7922, 14],
  c,
  [55, 9],
  19,
  c,
  [536, 43],
  c,
  [822, 26],
  84,
  89,
  90,
  92,
  94,
  c,
  [422, 49],
  s,
  [187, 4, 1],
  c,
  [426, 37],
  38,
  c,
  [1031, 81],
  196,
  c,
  [4237, 116],
  c,
  [198, 58],
  80,
  c,
  [5957, 24],
  c,
  [1781, 4],
  c,
  [7670, 65],
  c,
  [252, 120],
  c,
  [6695, 62],
  157,
  231,
  c,
  [84, 81],
  c,
  [2124, 3],
  c,
  [1649, 154],
  c,
  [1361, 49],
  c,
  [6795, 6],
  278,
  c,
  [6802, 7],
  15,
  26,
  179,
  c,
  [6805, 4],
  c,
  [6804, 24],
  c,
  [1405, 112],
  114,
  144,
  239,
  280,
  281,
  c,
  [984, 21],
  c,
  [7229, 63],
  c,
  [451, 83],
  179,
  c,
  [866, 46],
  c,
  [1500, 6],
  c,
  [219, 83],
  c,
  [7448, 5],
  c,
  [7054, 4],
  c,
  [4339, 5],
  241,
  c,
  [7185, 5],
  258,
  135,
  140,
  230,
  16,
  38,
  135,
  230,
  c,
  [1489, 10],
  22,
  26,
  c,
  [9465, 42],
  22,
  26,
  c,
  [664, 115],
  76,
  176,
  114,
  c,
  [4527, 17],
  c,
  [9214, 101],
  32,
  c,
  [1325, 3],
  227,
  30,
  135,
  230,
  c,
  [9, 6],
  16,
  c,
  [2024, 3],
  c,
  [7282, 3],
  227,
  230,
  c,
  [6504, 29],
  30,
  c,
  [1126, 21],
  c,
  [2980, 149],
  c,
  [81, 162],
  c,
  [2941, 120],
  c,
  [2824, 173],
  c,
  [970, 10],
  c,
  [969, 43],
  c,
  [427, 88],
  c,
  [4541, 4],
  c,
  [1279, 9],
  c,
  [7496, 46],
  c,
  [146, 10],
  17,
  19,
  23,
  26,
  c,
  [139, 9],
  c,
  [137, 23],
  78,
  c,
  [2775, 10],
  20,
  c,
  [10695, 11],
  20,
  23,
  c,
  [261, 29],
  c,
  [56, 13],
  c,
  [7609, 120],
  c,
  [1566, 10],
  c,
  [286, 27],
  c,
  [2433, 13],
  c,
  [420, 3],
  23,
  26,
  c,
  [1151, 3],
  39,
  c,
  [192, 3],
  81,
  c,
  [3139, 9],
  c,
  [1498, 3],
  78,
  c,
  [1499, 7],
  15,
  25,
  c,
  [375, 3],
  248,
  249,
  c,
  [210, 9],
  c,
  [810, 15],
  c,
  [208, 95],
  c,
  [927, 121],
  15,
  19,
  c,
  [248, 3],
  c,
  [553, 29],
  c,
  [495, 8],
  c,
  [4039, 125],
  c,
  [612, 5],
  c,
  [8047, 17],
  c,
  [405, 44],
  249,
  30,
  231,
  c,
  [5560, 12],
  c,
  [8177, 3],
  132,
  222,
  223,
  225,
  c,
  [206, 113],
  15,
  26,
  38,
  136,
  179,
  c,
  [113, 3],
  c,
  [1790, 25],
  c,
  [33, 3],
  39,
  80,
  115,
  135,
  136,
  c,
  [8, 4],
  115,
  136,
  c,
  [42, 22],
  259,
  260,
  261,
  264,
  267,
  115,
  c,
  [1861, 23],
  c,
  [29, 5],
  268,
  38,
  c,
  [2542, 3],
  265,
  266,
  s,
  [125, 4, 1],
  218,
  219,
  221,
  c,
  [4676, 201],
  c,
  [88, 521],
  c,
  [8293, 115],
  c,
  [5865, 353],
  c,
  [4436, 48],
  86,
  87,
  15,
  16,
  23,
  c,
  [2003, 3],
  c,
  [5150, 3],
  86,
  87,
  c,
  [2003, 5],
  c,
  [2000, 4],
  c,
  [11, 5],
  c,
  [2968, 169],
  c,
  [88, 88],
  c,
  [2770, 10],
  c,
  [2769, 35],
  116,
  c,
  [2682, 8],
  26,
  38,
  77,
  179,
  c,
  [1580, 23],
  c,
  [8035, 93],
  c,
  [2190, 11],
  c,
  [2189, 31],
  77,
  c,
  [2190, 128],
  c,
  [345, 10],
  c,
  [13549, 43],
  c,
  [7966, 116],
  26,
  39,
  17,
  26,
  c,
  [605, 12],
  c,
  [3089, 3],
  c,
  [5991, 34],
  78,
  c,
  [3470, 8],
  c,
  [2850, 9],
  c,
  [3155, 12],
  26,
  c,
  [62, 29],
  c,
  [58, 7],
  c,
  [3146, 11],
  c,
  [3145, 43],
  c,
  [2946, 5],
  c,
  [7896, 4],
  c,
  [6581, 117],
  28,
  16,
  24,
  c,
  [632, 3],
  c,
  [2588, 4],
  c,
  [2587, 4],
  26,
  38,
  c,
  [10039, 132],
  c,
  [9924, 323],
  23,
  114,
  c,
  [3916, 5],
  20,
  c,
  [6, 4],
  39,
  118,
  c,
  [8464, 3],
  c,
  [3556, 3],
  c,
  [3555, 3],
  16,
  24,
  c,
  [8465, 7],
  c,
  [4757, 15],
  c,
  [4476, 104],
  c,
  [8988, 106],
  c,
  [1304, 160],
  c,
  [53, 53],
  c,
  [1931, 169],
  c,
  [6697, 5],
  c,
  [1098, 115],
  c,
  [5784, 54],
  c,
  [8183, 212],
  c,
  [113, 442],
  c,
  [3084, 48],
  c,
  [8263, 3],
  c,
  [5087, 5],
  c,
  [8234, 6],
  99,
  100,
  c,
  [5090, 12],
  c,
  [3090, 5],
  c,
  [8121, 4],
  c,
  [312, 138],
  c,
  [8125, 96],
  26,
  39,
  16,
  26,
  c,
  [1750, 3],
  93,
  181,
  c,
  [6023, 43],
  91,
  c,
  [1039, 6],
  c,
  [1203, 127],
  c,
  [1201, 29],
  c,
  [163, 7],
  c,
  [1114, 7],
  c,
  [16448, 4],
  c,
  [14239, 7],
  c,
  [11759, 78],
  c,
  [11758, 49],
  c,
  [127, 254],
  c,
  [737, 115],
  c,
  [8779, 174],
  c,
  [2168, 50],
  c,
  [15311, 68],
  181,
  c,
  [7845, 3],
  c,
  [8874, 51],
  c,
  [10884, 82],
  181,
  c,
  [10970, 84],
  c,
  [7634, 108],
  c,
  [397, 61],
  c,
  [9012, 83],
  157,
  231,
  c,
  [7345, 11],
  c,
  [2874, 43],
  26,
  39,
  142,
  275,
  8,
  16,
  c,
  [8865, 4],
  140,
  90,
  c,
  [6175, 3],
  283,
  284,
  38,
  c,
  [8880, 9],
  26,
  c,
  [8, 3],
  26,
  39,
  c,
  [1825, 113],
  39,
  39,
  c,
  [7494, 91],
  c,
  [3577, 5],
  39,
  140,
  c,
  [8951, 5],
  c,
  [775, 4],
  26,
  c,
  [10285, 47],
  c,
  [15873, 3],
  c,
  [6533, 4],
  179,
  39,
  140,
  16,
  38,
  252,
  26,
  39,
  116,
  c,
  [171, 88],
  c,
  [8461, 29],
  c,
  [6704, 5],
  c,
  [1510, 127],
  11,
  12,
  47,
  48,
  c,
  [105, 8],
  173,
  c,
  [3112, 104],
  c,
  [4468, 166],
  c,
  [8299, 59],
  c,
  [3485, 44],
  c,
  [4289, 3],
  c,
  [15708, 5],
  c,
  [707, 6],
  c,
  [8213, 30],
  c,
  [8212, 15],
  c,
  [707, 5],
  c,
  [7492, 7],
  c,
  [66, 5],
  c,
  [352, 8],
  c,
  [7493, 10],
  c,
  [16006, 207],
  c,
  [7900, 14],
  c,
  [7899, 43],
  c,
  [1072, 3],
  c,
  [8502, 4],
  c,
  [9710, 9],
  25,
  c,
  [7803, 19],
  c,
  [311, 11],
  c,
  [1302, 81],
  c,
  [8208, 10],
  c,
  [1146, 7],
  248,
  249,
  c,
  [8104, 43],
  c,
  [4443, 23],
  c,
  [57, 48],
  15,
  249,
  c,
  [5512, 5],
  c,
  [6209, 45],
  129,
  c,
  [1226, 10],
  26,
  c,
  [1227, 22],
  c,
  [1226, 3],
  c,
  [212, 7],
  144,
  239,
  c,
  [1264, 29],
  13,
  14,
  22,
  c,
  [6589, 161],
  135,
  157,
  116,
  c,
  [8750, 5],
  c,
  [8093, 27],
  268,
  c,
  [108, 3],
  c,
  [376, 4],
  c,
  [5249, 5],
  c,
  [8075, 5],
  c,
  [9059, 10],
  c,
  [338, 44],
  c,
  [7400, 115],
  c,
  [169, 11],
  20,
  c,
  [6372, 59],
  c,
  [8522, 98],
  c,
  [7165, 24],
  c,
  [4383, 275],
  c,
  [7129, 3],
  c,
  [14206, 18],
  c,
  [1226, 8],
  c,
  [15167, 52],
  c,
  [7131, 41],
  c,
  [1012, 5],
  c,
  [7136, 43],
  c,
  [597, 14],
  82,
  c,
  [2708, 13],
  c,
  [6673, 106],
  c,
  [3680, 204],
  c,
  [11256, 117],
  c,
  [6499, 5],
  c,
  [6989, 4],
  c,
  [10, 6],
  c,
  [9587, 5],
  c,
  [7916, 97],
  c,
  [7331, 3],
  c,
  [15108, 5],
  c,
  [1830, 52],
  c,
  [59, 101],
  118,
  c,
  [60, 7],
  c,
  [6808, 3],
  c,
  [15277, 7],
  c,
  [15272, 6],
  215,
  240,
  c,
  [1821, 3],
  16,
  17,
  c,
  [7301, 6],
  118,
  c,
  [6812, 5],
  c,
  [1108, 113],
  20,
  25,
  c,
  [15403, 4],
  26,
  c,
  [6939, 7],
  246,
  249,
  26,
  c,
  [1959, 29],
  c,
  [3713, 54],
  c,
  [14716, 181],
  c,
  [5441, 9],
  21,
  23,
  c,
  [1157, 12],
  c,
  [19719, 8],
  c,
  [19717, 26],
  c,
  [865, 3],
  88,
  c,
  [430, 3],
  c,
  [19711, 3],
  c,
  [432, 8],
  115,
  c,
  [10084, 164],
  c,
  [87, 9],
  c,
  [14046, 30],
  c,
  [7114, 24],
  c,
  [52, 28],
  85,
  c,
  [53, 23],
  c,
  [11812, 48],
  c,
  [57, 57],
  c,
  [2083, 3],
  c,
  [15569, 3],
  c,
  [2084, 3],
  191,
  c,
  [1859, 49],
  c,
  [14326, 55],
  c,
  [4437, 27],
  c,
  [5412, 111],
  c,
  [120, 63],
  c,
  [5531, 156],
  84,
  94,
  95,
  190,
  c,
  [4, 4],
  c,
  [6331, 126],
  c,
  [1290, 44],
  c,
  [18085, 128],
  c,
  [6687, 4],
  50,
  81,
  93,
  c,
  [7, 14],
  26,
  c,
  [5006, 89],
  c,
  [2384, 197],
  c,
  [5833, 5],
  c,
  [5972, 4],
  125,
  c,
  [5448, 3],
  140,
  144,
  239,
  c,
  [5219, 10],
  c,
  [5455, 7],
  142,
  275,
  c,
  [5469, 6],
  c,
  [3562, 45],
  c,
  [291, 8],
  26,
  c,
  [67, 3],
  281,
  26,
  c,
  [79, 5],
  144,
  239,
  90,
  c,
  [94, 3],
  26,
  c,
  [4535, 3],
  c,
  [14085, 49],
  272,
  c,
  [14136, 52],
  c,
  [4023, 24],
  c,
  [3786, 5],
  16,
  252,
  17,
  30,
  38,
  113,
  114,
  135,
  144,
  148,
  253,
  254,
  255,
  22,
  c,
  [11967, 6],
  c,
  [9010, 4],
  c,
  [16889, 82],
  c,
  [11942, 282],
  c,
  [18154, 121],
  c,
  [10189, 11],
  c,
  [5294, 43],
  c,
  [2359, 157],
  c,
  [13658, 38],
  c,
  [21153, 16],
  c,
  [13711, 53],
  c,
  [4604, 3],
  c,
  [10559, 14],
  c,
  [10803, 159],
  c,
  [173, 173],
  20,
  c,
  [117, 8],
  c,
  [13947, 9],
  c,
  [118, 51],
  c,
  [13451, 56],
  c,
  [13853, 114],
  c,
  [118, 102],
  c,
  [117, 10],
  39,
  c,
  [13476, 24],
  c,
  [3581, 3],
  c,
  [27, 27],
  c,
  [13495, 4],
  c,
  [13536, 30],
  c,
  [13495, 4],
  c,
  [5669, 23],
  c,
  [90, 5],
  c,
  [28, 25],
  26,
  38,
  c,
  [1704, 29],
  c,
  [4713, 5],
  26,
  38,
  26,
  c,
  [13561, 4],
  266,
  c,
  [13, 5],
  c,
  [6384, 6],
  38,
  39,
  c,
  [50, 24],
  c,
  [5468, 115],
  c,
  [11838, 54],
  c,
  [8131, 129],
  c,
  [3943, 95],
  c,
  [3478, 11],
  c,
  [12413, 73],
  c,
  [5281, 41],
  c,
  [12528, 116],
  c,
  [661, 3],
  c,
  [20274, 17],
  c,
  [19725, 269],
  c,
  [15715, 96],
  c,
  [7444, 9],
  c,
  [2671, 108],
  c,
  [5098, 6],
  c,
  [6, 6],
  c,
  [6446, 114],
  c,
  [12036, 4],
  117,
  144,
  c,
  [2019, 57],
  c,
  [20551, 10],
  c,
  [5159, 3],
  c,
  [5157, 9],
  c,
  [1518, 5],
  c,
  [11322, 330],
  c,
  [24088, 217],
  c,
  [12794, 113],
  c,
  [1618, 9],
  26,
  39,
  c,
  [4513, 137],
  c,
  [4512, 44],
  c,
  [9697, 56],
  49,
  82,
  c,
  [9382, 89],
  c,
  [4345, 4],
  142,
  275,
  144,
  239,
  142,
  275,
  26,
  c,
  [4335, 4],
  284,
  c,
  [4268, 8],
  144,
  239,
  c,
  [4269, 6],
  125,
  39,
  144,
  239,
  c,
  [4292, 4],
  144,
  239,
  82,
  c,
  [1376, 5],
  c,
  [12624, 82],
  c,
  [8047, 26],
  c,
  [27, 27],
  c,
  [8067, 6],
  30,
  c,
  [4290, 8],
  30,
  135,
  144,
  230,
  20,
  30,
  c,
  [13, 3],
  c,
  [4293, 6],
  227,
  c,
  [21187, 92],
  c,
  [3902, 54],
  17,
  26,
  c,
  [22441, 90],
  c,
  [7566, 14],
  c,
  [604, 45],
  c,
  [839, 59],
  c,
  [1134, 111],
  c,
  [9019, 7],
  25,
  39,
  c,
  [9, 5],
  c,
  [10167, 82],
  c,
  [3294, 24],
  c,
  [3353, 26],
  264,
  267,
  c,
  [133, 133],
  c,
  [833, 54],
  c,
  [8906, 7],
  25,
  c,
  [3416, 4],
  c,
  [4, 4],
  17,
  c,
  [2109, 4],
  c,
  [17, 3],
  c,
  [911, 55],
  c,
  [3053, 33],
  c,
  [17276, 93],
  39,
  179,
  77,
  c,
  [860, 88],
  c,
  [93, 3],
  c,
  [7700, 60],
  c,
  [61, 13],
  c,
  [2459, 46],
  c,
  [1226, 6],
  c,
  [6990, 114],
  c,
  [16149, 185],
  c,
  [19092, 64],
  c,
  [682, 97],
  82,
  39,
  c,
  [1899, 3],
  125,
  c,
  [1895, 5],
  c,
  [1871, 3],
  c,
  [6255, 3],
  142,
  275,
  13,
  14,
  c,
  [6558, 82],
  26,
  c,
  [6106, 7],
  254,
  255,
  c,
  [10141, 7],
  30,
  144,
  239,
  256,
  c,
  [957, 27],
  c,
  [9755, 10],
  c,
  [5154, 164],
  39,
  136,
  39,
  115,
  c,
  [307, 81],
  c,
  [83, 83],
  c,
  [1377, 7],
  c,
  [481, 3],
  c,
  [4, 3],
  c,
  [1371, 5],
  c,
  [11, 3],
  c,
  [6413, 201],
  c,
  [207, 3],
  c,
  [3303, 248],
  c,
  [23152, 157],
  s,
  [125, 3],
  c,
  [2837, 6],
  c,
  [2836, 3],
  c,
  [8, 7],
  17,
  30,
  231,
  c,
  [2012, 34],
  c,
  [9210, 230],
  c,
  [24102, 192],
  c,
  [635, 100],
  s,
  [39, 4],
  20,
  c,
  [561, 7],
  c,
  [13084, 91],
  c,
  [2712, 27],
  c,
  [122, 4]
]),
  type: u([
  s,
  [2, 67],
  s,
  [0, 50],
  1,
  c,
  [103, 59],
  s,
  [2, 88],
  c,
  [92, 86],
  c,
  [83, 151],
  s,
  [0, 47],
  c,
  [352, 72],
  c,
  [116, 48],
  c,
  [121, 7],
  c,
  [133, 14],
  c,
  [514, 85],
  c,
  [85, 67],
  c,
  [340, 76],
  c,
  [389, 86],
  c,
  [502, 113],
  c,
  [113, 226],
  c,
  [114, 229],
  c,
  [128, 16],
  c,
  [196, 118],
  c,
  [119, 114],
  c,
  [1274, 118],
  c,
  [1244, 88],
  c,
  [1851, 91],
  s,
  [2, 136],
  c,
  [599, 53],
  c,
  [190, 19],
  c,
  [397, 40],
  c,
  [88, 26],
  c,
  [5, 3],
  c,
  [1004, 115],
  c,
  [1846, 13],
  c,
  [1011, 81],
  c,
  [95, 8],
  c,
  [313, 27],
  c,
  [795, 173],
  c,
  [1038, 116],
  c,
  [2425, 167],
  c,
  [116, 145],
  c,
  [529, 93],
  c,
  [521, 52],
  c,
  [123, 11],
  c,
  [137, 20],
  c,
  [1040, 18],
  c,
  [702, 73],
  c,
  [693, 227],
  c,
  [113, 452],
  c,
  [1145, 117],
  c,
  [796, 419],
  c,
  [2805, 103],
  c,
  [2700, 176],
  c,
  [540, 232],
  c,
  [3844, 186],
  c,
  [3644, 117],
  c,
  [5378, 86],
  c,
  [201, 128],
  c,
  [5581, 78],
  c,
  [409, 119],
  s,
  [0, 51],
  c,
  [5327, 20],
  c,
  [3613, 149],
  c,
  [160, 10],
  c,
  [59, 12],
  c,
  [635, 119],
  c,
  [550, 118],
  c,
  [755, 157],
  c,
  [6329, 97],
  c,
  [1937, 88],
  c,
  [88, 10],
  c,
  [353, 174],
  c,
  [88, 245],
  c,
  [1776, 317],
  c,
  [1136, 97],
  c,
  [3383, 123],
  c,
  [1544, 188],
  c,
  [72, 33],
  c,
  [243, 90],
  c,
  [768, 102],
  c,
  [2395, 125],
  c,
  [8004, 153],
  c,
  [199, 134],
  c,
  [7670, 116],
  c,
  [252, 132],
  c,
  [2128, 85],
  c,
  [1649, 202],
  c,
  [6482, 14],
  c,
  [5727, 15],
  c,
  [6804, 47],
  c,
  [1405, 85],
  c,
  [4514, 88],
  c,
  [2745, 112],
  c,
  [753, 106],
  c,
  [8895, 15],
  c,
  [7185, 5],
  c,
  [472, 7],
  c,
  [1489, 123],
  c,
  [664, 50],
  c,
  [3885, 119],
  c,
  [776, 13],
  c,
  [3897, 11],
  c,
  [6504, 30],
  c,
  [2980, 170],
  c,
  [5312, 169],
  c,
  [2941, 162],
  c,
  [2824, 170],
  c,
  [3368, 99],
  c,
  [93, 32],
  c,
  [1281, 110],
  c,
  [5988, 176],
  c,
  [50, 41],
  c,
  [4894, 12],
  c,
  [4891, 73],
  c,
  [6196, 216],
  c,
  [4240, 191],
  c,
  [1623, 9],
  c,
  [5386, 146],
  c,
  [10833, 54],
  c,
  [138, 30],
  c,
  [9193, 18],
  c,
  [4676, 262],
  c,
  [88, 455],
  c,
  [6218, 288],
  c,
  [88, 208],
  c,
  [401, 38],
  c,
  [2305, 171],
  c,
  [421, 141],
  c,
  [5534, 79],
  c,
  [2303, 100],
  c,
  [2190, 166],
  c,
  [6108, 189],
  c,
  [850, 108],
  c,
  [7717, 135],
  c,
  [8280, 123],
  c,
  [9924, 345],
  c,
  [120, 14],
  c,
  [5541, 10],
  c,
  [4766, 10],
  c,
  [3579, 75],
  c,
  [1022, 202],
  c,
  [1304, 146],
  c,
  [2724, 179],
  c,
  [6648, 164],
  c,
  [8183, 274],
  c,
  [113, 415],
  c,
  [49, 44],
  c,
  [25, 12],
  c,
  [8834, 231],
  c,
  [2256, 13],
  c,
  [1203, 213],
  c,
  [14927, 79],
  c,
  [11294, 139],
  c,
  [127, 245],
  c,
  [8862, 119],
  c,
  [4608, 217],
  c,
  [14830, 12],
  c,
  [8874, 118],
  c,
  [101, 18],
  c,
  [7634, 251],
  c,
  [9547, 131],
  c,
  [6164, 11],
  c,
  [15368, 17],
  c,
  [15954, 78],
  c,
  [12435, 140],
  c,
  [17515, 10],
  c,
  [105, 33],
  c,
  [3648, 33],
  c,
  [3102, 86],
  c,
  [261, 22],
  c,
  [15882, 96],
  c,
  [1390, 61],
  c,
  [970, 157],
  c,
  [3878, 161],
  c,
  [3485, 93],
  c,
  [16459, 100],
  c,
  [1961, 214],
  c,
  [744, 20],
  c,
  [1182, 76],
  c,
  [13410, 58],
  c,
  [847, 107],
  c,
  [9598, 13],
  c,
  [4507, 71],
  c,
  [1358, 20],
  c,
  [1264, 34],
  c,
  [6595, 168],
  c,
  [200, 39],
  c,
  [10617, 53],
  c,
  [15693, 170],
  c,
  [4132, 136],
  c,
  [2246, 188],
  c,
  [19573, 162],
  c,
  [19968, 67],
  c,
  [3039, 123],
  c,
  [3680, 320],
  c,
  [12040, 55],
  c,
  [10, 13],
  c,
  [225, 141],
  c,
  [59, 118],
  c,
  [3058, 26],
  c,
  [14859, 83],
  c,
  [639, 57],
  c,
  [9823, 39],
  c,
  [9399, 337],
  c,
  [1072, 181],
  c,
  [7114, 109],
  c,
  [11869, 74],
  c,
  [1859, 98],
  c,
  [10942, 79],
  c,
  [14274, 119],
  c,
  [5531, 169],
  c,
  [13202, 52],
  c,
  [7534, 201],
  c,
  [14815, 132],
  c,
  [4573, 211],
  c,
  [5833, 23],
  c,
  [4, 7],
  c,
  [626, 15],
  c,
  [3899, 8],
  c,
  [530, 59],
  c,
  [17326, 10],
  c,
  [14951, 56],
  c,
  [3099, 51],
  c,
  [4023, 33],
  c,
  [5447, 17],
  c,
  [7033, 85],
  c,
  [1858, 250],
  c,
  [13159, 155],
  c,
  [2535, 136],
  c,
  [501, 107],
  c,
  [53, 75],
  c,
  [3107, 77],
  c,
  [7630, 150],
  c,
  [10976, 192],
  c,
  [2268, 163],
  c,
  [15410, 120],
  c,
  [13434, 42],
  c,
  [23523, 33],
  c,
  [12214, 32],
  c,
  [1674, 38],
  c,
  [13583, 35],
  c,
  [7377, 13],
  c,
  [312, 21],
  c,
  [21161, 173],
  c,
  [5102, 130],
  c,
  [3943, 111],
  c,
  [21564, 182],
  c,
  [9142, 122],
  c,
  [13507, 316],
  c,
  [14843, 119],
  c,
  [11893, 13],
  c,
  [1723, 164],
  c,
  [20724, 17],
  c,
  [15174, 17],
  c,
  [11322, 380],
  c,
  [6363, 232],
  c,
  [11009, 106],
  c,
  [10585, 181],
  c,
  [3449, 92],
  c,
  [4964, 13],
  c,
  [4111, 4],
  c,
  [1219, 14],
  c,
  [18, 8],
  c,
  [33, 8],
  c,
  [4145, 8],
  c,
  [3590, 97],
  c,
  [2706, 51],
  c,
  [9752, 15],
  c,
  [10532, 37],
  c,
  [1217, 106],
  c,
  [453, 102],
  c,
  [18616, 103],
  c,
  [27763, 128],
  c,
  [13822, 22],
  c,
  [648, 95],
  c,
  [3261, 45],
  c,
  [133, 129],
  c,
  [833, 44],
  c,
  [19666, 10],
  c,
  [203, 24],
  c,
  [78, 50],
  c,
  [21118, 189],
  c,
  [747, 74],
  c,
  [15620, 70],
  c,
  [6990, 125],
  c,
  [3151, 216],
  c,
  [21800, 130],
  c,
  [6229, 8],
  c,
  [1224, 94],
  c,
  [1325, 11],
  c,
  [1062, 44],
  c,
  [16130, 229],
  c,
  [25274, 232],
  c,
  [973, 159],
  c,
  [9666, 232],
  c,
  [23152, 114],
  c,
  [12807, 12],
  c,
  [79, 23],
  c,
  [9210, 323],
  c,
  [10213, 216],
  c,
  [8249, 110],
  c,
  [127, 19]
]),
  state: u([
  s,
  [1, 4, 1],
  16,
  6,
  8,
  46,
  39,
  33,
  15,
  11,
  12,
  9,
  13,
  52,
  10,
  48,
  49,
  47,
  89,
  7,
  35,
  37,
  36,
  31,
  63,
  32,
  66,
  102,
  113,
  67,
  105,
  34,
  75,
  74,
  106,
  14,
  53,
  30,
  55,
  64,
  5,
  25,
  24,
  22,
  59,
  17,
  20,
  21,
  126,
  165,
  118,
  119,
  122,
  123,
  131,
  169,
  171,
  113,
  168,
  175,
  176,
  177,
  c,
  [60, 38],
  179,
  c,
  [60, 7],
  180,
  c,
  [47, 7],
  181,
  c,
  [48, 39],
  186,
  193,
  188,
  190,
  191,
  192,
  194,
  200,
  204,
  208,
  c,
  [104, 46],
  33,
  209,
  c,
  [30, 15],
  211,
  212,
  64,
  216,
  c,
  [67, 46],
  217,
  c,
  [47, 46],
  218,
  c,
  [47, 46],
  219,
  c,
  [47, 46],
  221,
  c,
  [47, 46],
  223,
  224,
  228,
  c,
  [49, 46],
  230,
  239,
  c,
  [48, 7],
  232,
  236,
  11,
  233,
  c,
  [51, 27],
  238,
  234,
  c,
  [51, 4],
  237,
  235,
  c,
  [51, 3],
  240,
  c,
  [98, 46],
  243,
  246,
  245,
  250,
  252,
  c,
  [51, 46],
  256,
  254,
  264,
  265,
  c,
  [20, 3],
  266,
  260,
  59,
  257,
  261,
  33,
  272,
  c,
  [42, 15],
  270,
  30,
  271,
  64,
  267,
  269,
  276,
  273,
  277,
  279,
  3,
  278,
  c,
  [704, 46],
  281,
  287,
  285,
  288,
  106,
  266,
  290,
  106,
  266,
  292,
  294,
  295,
  c,
  [145, 46],
  298,
  c,
  [47, 4],
  296,
  297,
  39,
  299,
  c,
  [50, 41],
  302,
  c,
  [97, 46],
  305,
  c,
  [47, 7],
  304,
  c,
  [48, 39],
  306,
  c,
  [48, 7],
  307,
  c,
  [791, 40],
  319,
  c,
  [30, 5],
  309,
  311,
  32,
  314,
  c,
  [32, 4],
  312,
  c,
  [32, 3],
  318,
  30,
  317,
  64,
  325,
  c,
  [166, 38],
  321,
  323,
  326,
  c,
  [73, 8],
  329,
  337,
  105,
  334,
  335,
  347,
  c,
  [31, 5],
  341,
  344,
  342,
  338,
  340,
  346,
  345,
  354,
  113,
  351,
  352,
  355,
  c,
  [1098, 47],
  356,
  c,
  [286, 46],
  357,
  c,
  [47, 46],
  358,
  c,
  [47, 46],
  359,
  c,
  [47, 46],
  360,
  c,
  [47, 46],
  361,
  c,
  [47, 7],
  362,
  c,
  [48, 39],
  365,
  c,
  [95, 10],
  363,
  c,
  [48, 36],
  366,
  c,
  [143, 46],
  367,
  c,
  [47, 46],
  368,
  c,
  [1406, 47],
  370,
  c,
  [942, 16],
  372,
  371,
  64,
  369,
  c,
  [830, 5],
  375,
  c,
  [830, 44],
  376,
  c,
  [119, 46],
  377,
  c,
  [47, 46],
  378,
  379,
  113,
  381,
  c,
  [50, 46],
  386,
  c,
  [47, 6],
  383,
  385,
  c,
  [49, 40],
  c,
  [1835, 7],
  388,
  c,
  [103, 46],
  c,
  [54, 7],
  392,
  c,
  [1945, 48],
  393,
  c,
  [49, 19],
  396,
  c,
  [1009, 17],
  14,
  395,
  30,
  394,
  c,
  [51, 9],
  193,
  397,
  c,
  [1887, 4],
  c,
  [57, 20],
  c,
  [106, 29],
  401,
  410,
  412,
  414,
  193,
  419,
  192,
  194,
  417,
  418,
  420,
  421,
  106,
  266,
  c,
  [2005, 8],
  c,
  [223, 39],
  200,
  423,
  c,
  [48, 7],
  426,
  c,
  [272, 46],
  c,
  [2161, 4],
  281,
  250,
  181,
  c,
  [14, 7],
  c,
  [7, 21],
  428,
  c,
  [361, 53],
  429,
  c,
  [54, 46],
  431,
  c,
  [47, 7],
  430,
  c,
  [48, 31],
  432,
  c,
  [102, 13],
  435,
  131,
  279,
  3,
  436,
  c,
  [358, 46],
  437,
  c,
  [152, 46],
  438,
  250,
  c,
  [1829, 18],
  445,
  444,
  c,
  [1829, 3],
  204,
  c,
  [293, 14],
  454,
  c,
  [87, 3],
  452,
  c,
  [87, 5],
  449,
  450,
  451,
  456,
  c,
  [91, 37],
  461,
  464,
  c,
  [139, 7],
  463,
  c,
  [140, 29],
  465,
  c,
  [49, 9],
  466,
  469,
  33,
  470,
  c,
  [2434, 18],
  471,
  c,
  [70, 7],
  473,
  c,
  [210, 31],
  472,
  c,
  [70, 7],
  474,
  476,
  c,
  [179, 7],
  478,
  3,
  477,
  c,
  [315, 46],
  482,
  479,
  256,
  485,
  487,
  c,
  [2110, 6],
  490,
  59,
  488,
  491,
  492,
  c,
  [330, 46],
  496,
  493,
  494,
  250,
  499,
  c,
  [2162, 21],
  500,
  269,
  250,
  c,
  [647, 4],
  276,
  501,
  276,
  502,
  503,
  504,
  c,
  [157, 7],
  507,
  c,
  [830, 48],
  508,
  512,
  c,
  [48, 7],
  511,
  c,
  [144, 39],
  287,
  513,
  294,
  287,
  514,
  287,
  515,
  294,
  c,
  [1905, 9],
  517,
  c,
  [1905, 3],
  518,
  c,
  [470, 14],
  521,
  c,
  [763, 52],
  522,
  c,
  [661, 3],
  525,
  c,
  [3070, 53],
  c,
  [7, 7],
  526,
  c,
  [2130, 7],
  528,
  c,
  [2130, 15],
  531,
  c,
  [2130, 49],
  33,
  533,
  c,
  [560, 18],
  c,
  [364, 5],
  537,
  535,
  538,
  c,
  [2208, 39],
  539,
  c,
  [78, 10],
  540,
  c,
  [1033, 53],
  542,
  c,
  [54, 46],
  543,
  545,
  193,
  547,
  c,
  [1343, 4],
  337,
  105,
  549,
  550,
  c,
  [58, 46],
  553,
  c,
  [458, 9],
  554,
  c,
  [458, 3],
  c,
  [13, 6],
  559,
  557,
  558,
  560,
  c,
  [12, 9],
  564,
  c,
  [12, 4],
  562,
  569,
  565,
  567,
  354,
  113,
  571,
  572,
  c,
  [204, 53],
  c,
  [7, 35],
  575,
  c,
  [89, 10],
  574,
  c,
  [90, 64],
  c,
  [814, 17],
  578,
  577,
  64,
  250,
  c,
  [42, 21],
  583,
  c,
  [1862, 7],
  585,
  c,
  [1862, 48],
  587,
  c,
  [264, 53],
  590,
  c,
  [926, 48],
  c,
  [629, 5],
  401,
  596,
  c,
  [53, 7],
  594,
  c,
  [110, 39],
  193,
  598,
  c,
  [521, 3],
  602,
  c,
  [53, 7],
  601,
  c,
  [53, 39],
  603,
  c,
  [210, 46],
  604,
  c,
  [47, 46],
  605,
  c,
  [47, 46],
  610,
  616,
  614,
  538,
  193,
  617,
  192,
  194,
  287,
  618,
  287,
  619,
  294,
  c,
  [2179, 9],
  621,
  c,
  [317, 46],
  622,
  c,
  [684, 67],
  625,
  627,
  c,
  [69, 7],
  626,
  c,
  [70, 53],
  629,
  c,
  [131, 46],
  630,
  c,
  [47, 46],
  631,
  c,
  [47, 46],
  632,
  c,
  [47, 46],
  633,
  c,
  [2920, 47],
  c,
  [885, 16],
  634,
  c,
  [1332, 3],
  204,
  636,
  c,
  [69, 46],
  c,
  [2063, 10],
  637,
  c,
  [2063, 40],
  642,
  646,
  647,
  c,
  [100, 7],
  648,
  c,
  [419, 46],
  175,
  c,
  [3076, 5],
  650,
  c,
  [3075, 43],
  c,
  [49, 5],
  651,
  c,
  [49, 48],
  652,
  c,
  [49, 43],
  c,
  [256, 10],
  653,
  c,
  [256, 40],
  655,
  c,
  [254, 7],
  654,
  c,
  [254, 46],
  656,
  250,
  658,
  33,
  659,
  c,
  [1766, 18],
  169,
  660,
  c,
  [1137, 3],
  c,
  [35, 7],
  662,
  663,
  c,
  [9, 7],
  666,
  482,
  668,
  674,
  671,
  672,
  482,
  677,
  682,
  c,
  [849, 53],
  687,
  496,
  690,
  494,
  c,
  [2240, 21],
  691,
  499,
  697,
  c,
  [35, 7],
  c,
  [1666, 9],
  702,
  c,
  [1666, 3],
  553,
  c,
  [310, 5],
  704,
  c,
  [310, 43],
  705,
  c,
  [71, 7],
  707,
  c,
  [160, 7],
  706,
  c,
  [56, 31],
  708,
  c,
  [3236, 9],
  710,
  c,
  [2160, 53],
  c,
  [2152, 7],
  715,
  c,
  [2151, 14],
  717,
  718,
  c,
  [77, 7],
  719,
  c,
  [183, 39],
  722,
  c,
  [48, 7],
  723,
  c,
  [3195, 50],
  c,
  [2181, 39],
  728,
  729,
  c,
  [60, 8],
  537,
  732,
  538,
  c,
  [1178, 14],
  733,
  401,
  c,
  [380, 16],
  736,
  c,
  [379, 3],
  740,
  c,
  [14, 9],
  741,
  c,
  [394, 3],
  748,
  c,
  [2049, 12],
  750,
  752,
  569,
  754,
  567,
  c,
  [52, 7],
  c,
  [4113, 11],
  757,
  c,
  [186, 43],
  760,
  c,
  [576, 46],
  250,
  762,
  c,
  [48, 46],
  763,
  c,
  [1201, 63],
  764,
  212,
  64,
  c,
  [2063, 7],
  768,
  c,
  [68, 40],
  769,
  c,
  [218, 7],
  774,
  c,
  [123, 7],
  772,
  c,
  [56, 39],
  776,
  c,
  [48, 7],
  775,
  c,
  [507, 46],
  778,
  c,
  [55, 7],
  777,
  c,
  [2057, 40],
  779,
  c,
  [2057, 3],
  193,
  780,
  c,
  [2584, 4],
  c,
  [2352, 28],
  784,
  414,
  193,
  787,
  192,
  194,
  790,
  c,
  [319, 46],
  c,
  [3955, 4],
  793,
  794,
  c,
  [560, 9],
  796,
  c,
  [560, 3],
  c,
  [93, 21],
  798,
  c,
  [2610, 73],
  801,
  c,
  [8, 7],
  803,
  131,
  805,
  c,
  [444, 17],
  809,
  212,
  64,
  c,
  [3666, 17],
  811,
  c,
  [1347, 40],
  c,
  [51, 10],
  812,
  c,
  [50, 39],
  813,
  c,
  [213, 7],
  814,
  c,
  [214, 39],
  815,
  817,
  818,
  c,
  [50, 7],
  819,
  c,
  [264, 46],
  c,
  [1292, 5],
  820,
  c,
  [4776, 44],
  c,
  [57, 7],
  823,
  c,
  [112, 7],
  822,
  c,
  [55, 39],
  169,
  824,
  c,
  [1111, 3],
  826,
  828,
  831,
  834,
  674,
  838,
  672,
  839,
  482,
  840,
  c,
  [70, 7],
  496,
  843,
  845,
  848,
  687,
  c,
  [1469, 21],
  850,
  c,
  [22, 21],
  851,
  269,
  c,
  [1075, 7],
  852,
  c,
  [1075, 4],
  855,
  857,
  859,
  860,
  553,
  866,
  868,
  c,
  [513, 53],
  393,
  3,
  869,
  c,
  [4672, 40],
  870,
  c,
  [58, 14],
  872,
  c,
  [1031, 47],
  c,
  [1485, 6],
  873,
  c,
  [1485, 14],
  c,
  [22, 7],
  874,
  c,
  [3659, 15],
  c,
  [2699, 9],
  876,
  c,
  [1593, 53],
  392,
  3,
  877,
  c,
  [56, 46],
  c,
  [3589, 47],
  c,
  [1559, 39],
  879,
  c,
  [3740, 10],
  c,
  [50, 39],
  880,
  c,
  [49, 9],
  c,
  [1009, 9],
  882,
  c,
  [3616, 8],
  c,
  [12, 3],
  883,
  c,
  [1595, 3],
  c,
  [13, 9],
  886,
  c,
  [3654, 10],
  888,
  c,
  [3653, 10],
  891,
  c,
  [11, 10],
  896,
  c,
  [540, 4],
  748,
  569,
  900,
  752,
  c,
  [16, 7],
  902,
  c,
  [16, 4],
  c,
  [1619, 11],
  905,
  c,
  [551, 43],
  c,
  [646, 17],
  906,
  c,
  [1033, 9],
  c,
  [7, 7],
  907,
  c,
  [1492, 7],
  908,
  c,
  [5465, 47],
  909,
  c,
  [3603, 41],
  913,
  c,
  [187, 7],
  912,
  c,
  [1251, 60],
  914,
  915,
  c,
  [491, 46],
  916,
  414,
  917,
  414,
  918,
  c,
  [858, 53],
  c,
  [3416, 4],
  c,
  [1469, 4],
  919,
  420,
  553,
  c,
  [18, 7],
  921,
  c,
  [72, 46],
  922,
  c,
  [47, 46],
  924,
  c,
  [47, 7],
  923,
  c,
  [48, 39],
  926,
  c,
  [48, 7],
  925,
  c,
  [48, 39],
  927,
  c,
  [143, 46],
  928,
  c,
  [1370, 12],
  c,
  [3021, 44],
  c,
  [432, 14],
  931,
  933,
  934,
  935,
  674,
  936,
  938,
  940,
  941,
  834,
  945,
  496,
  946,
  947,
  499,
  c,
  [715, 7],
  950,
  c,
  [4407, 11],
  951,
  c,
  [12, 4],
  955,
  956,
  859,
  860,
  957,
  287,
  960,
  961,
  c,
  [500, 21],
  717,
  c,
  [15, 14],
  967,
  c,
  [201, 7],
  969,
  c,
  [145, 39],
  537,
  970,
  538,
  c,
  [886, 7],
  559,
  975,
  c,
  [119, 10],
  976,
  c,
  [11, 10],
  977,
  c,
  [11, 10],
  978,
  c,
  [11, 10],
  979,
  c,
  [164, 11],
  980,
  c,
  [12, 4],
  569,
  982,
  569,
  983,
  c,
  [16, 7],
  985,
  c,
  [28, 11],
  986,
  c,
  [12, 4],
  988,
  989,
  c,
  [350, 46],
  990,
  c,
  [233, 21],
  287,
  994,
  c,
  [9, 6],
  995,
  c,
  [17, 7],
  997,
  c,
  [2016, 21],
  1000,
  131,
  1001,
  c,
  [109, 46],
  1005,
  674,
  1007,
  1008,
  1011,
  1012,
  1014,
  860,
  955,
  1019,
  1018,
  c,
  [180, 7],
  1020,
  c,
  [180, 4],
  c,
  [1389, 9],
  1022,
  c,
  [1389, 46],
  1030,
  c,
  [847, 53],
  1033,
  c,
  [54, 7],
  1032,
  c,
  [55, 39],
  1035,
  c,
  [48, 7],
  1034,
  c,
  [48, 39],
  1036,
  c,
  [48, 7],
  1037,
  c,
  [151, 45],
  1039,
  131,
  1043,
  860,
  1044,
  860,
  1046,
  c,
  [279, 7],
  1047,
  c,
  [279, 11],
  c,
  [7, 28],
  1049,
  c,
  [108, 7],
  1050,
  c,
  [259, 46],
  c,
  [102, 7],
  1056,
  c,
  [102, 4]
]),
  mode: u([
  2,
  s,
  [1, 66],
  2,
  1,
  c,
  [69, 10],
  c,
  [12, 3],
  2,
  c,
  [83, 36],
  s,
  [2, 5],
  c,
  [7, 7],
  s,
  [2, 12],
  c,
  [18, 18],
  s,
  [2, 19],
  c,
  [56, 19],
  c,
  [57, 4],
  c,
  [23, 20],
  s,
  [2, 64],
  c,
  [83, 82],
  c,
  [301, 11],
  s,
  [1, 141],
  s,
  [2, 83],
  c,
  [528, 5],
  c,
  [158, 71],
  s,
  [1, 355],
  c,
  [798, 72],
  c,
  [74, 9],
  c,
  [286, 255],
  c,
  [303, 31],
  c,
  [87, 26],
  c,
  [108, 62],
  c,
  [1373, 9],
  c,
  [94, 11],
  c,
  [9, 5],
  c,
  [1315, 4],
  c,
  [917, 6],
  c,
  [124, 8],
  c,
  [42, 7],
  c,
  [47, 8],
  c,
  [139, 24],
  c,
  [1494, 7],
  c,
  [8, 6],
  c,
  [46, 11],
  c,
  [4, 5],
  c,
  [486, 9],
  c,
  [495, 21],
  c,
  [1265, 8],
  c,
  [29, 22],
  c,
  [439, 110],
  c,
  [12, 10],
  c,
  [462, 37],
  c,
  [36, 24],
  c,
  [185, 8],
  c,
  [1171, 357],
  c,
  [99, 100],
  c,
  [528, 5],
  c,
  [128, 29],
  c,
  [764, 6],
  c,
  [1675, 363],
  s,
  [1, 363],
  c,
  [719, 27],
  c,
  [2830, 83],
  c,
  [66, 49],
  c,
  [508, 359],
  c,
  [1824, 17],
  c,
  [2117, 11],
  c,
  [530, 13],
  c,
  [535, 10],
  c,
  [2141, 10],
  c,
  [57, 12],
  c,
  [149, 71],
  c,
  [1973, 22],
  c,
  [149, 14],
  c,
  [126, 12],
  c,
  [149, 96],
  c,
  [442, 146],
  c,
  [243, 17],
  c,
  [2934, 13],
  c,
  [2538, 7],
  c,
  [1716, 151],
  c,
  [632, 26],
  c,
  [614, 10],
  c,
  [1167, 25],
  c,
  [2681, 8],
  c,
  [2964, 29],
  c,
  [4168, 81],
  c,
  [81, 60],
  s,
  [2, 88],
  c,
  [519, 9],
  c,
  [2921, 7],
  c,
  [822, 32],
  c,
  [308, 11],
  c,
  [822, 34],
  c,
  [81, 35],
  c,
  [389, 12],
  c,
  [81, 196],
  c,
  [1361, 215],
  c,
  [4313, 266],
  c,
  [406, 15],
  c,
  [3920, 43],
  c,
  [1350, 31],
  c,
  [4904, 65],
  c,
  [529, 14],
  c,
  [4872, 151],
  c,
  [5455, 81],
  c,
  [4065, 127],
  c,
  [37, 23],
  c,
  [364, 100],
  c,
  [4599, 81],
  c,
  [5884, 86],
  c,
  [1231, 151],
  c,
  [132, 8],
  c,
  [419, 85],
  c,
  [1959, 84],
  c,
  [424, 81],
  c,
  [673, 29],
  c,
  [194, 87],
  c,
  [5077, 13],
  c,
  [6044, 190],
  c,
  [4568, 9],
  c,
  [5300, 24],
  c,
  [2379, 80],
  c,
  [6756, 112],
  c,
  [1667, 57],
  c,
  [2961, 71],
  c,
  [5241, 228],
  c,
  [1310, 68],
  c,
  [2207, 17],
  c,
  [2153, 88],
  c,
  [1156, 56],
  c,
  [340, 100],
  c,
  [2418, 26],
  c,
  [1133, 18],
  c,
  [3964, 134],
  c,
  [149, 105],
  c,
  [2743, 58],
  c,
  [4934, 91],
  c,
  [730, 20],
  c,
  [6694, 8],
  c,
  [1021, 109],
  c,
  [4168, 82],
  c,
  [81, 187],
  c,
  [1141, 55],
  c,
  [243, 109],
  c,
  [46, 9],
  c,
  [81, 27],
  c,
  [7310, 27],
  c,
  [5765, 72],
  c,
  [634, 175],
  c,
  [310, 54],
  c,
  [81, 108],
  c,
  [2084, 58],
  c,
  [6271, 40],
  c,
  [1787, 41],
  c,
  [8391, 52],
  c,
  [379, 160],
  c,
  [1589, 50],
  c,
  [1776, 81],
  c,
  [9117, 220],
  c,
  [578, 61],
  c,
  [3439, 65],
  c,
  [64, 30],
  c,
  [537, 11],
  c,
  [10091, 15],
  c,
  [245, 66],
  c,
  [5163, 277],
  c,
  [9022, 13],
  c,
  [6806, 16],
  c,
  [3367, 272],
  c,
  [6634, 131],
  c,
  [4493, 60],
  c,
  [387, 86],
  c,
  [3644, 62],
  c,
  [586, 280],
  c,
  [4096, 135],
  c,
  [5087, 32],
  c,
  [6398, 157],
  c,
  [840, 30],
  c,
  [4795, 11],
  c,
  [164, 116],
  c,
  [9806, 197],
  c,
  [8705, 243],
  c,
  [6351, 33],
  c,
  [12187, 40],
  c,
  [11342, 28],
  c,
  [451, 32],
  c,
  [71, 17],
  c,
  [5574, 15],
  c,
  [1549, 26],
  c,
  [2558, 19],
  c,
  [2333, 14],
  c,
  [1721, 152],
  c,
  [5707, 152],
  c,
  [1885, 22],
  c,
  [892, 54],
  c,
  [1168, 76],
  c,
  [5551, 82],
  c,
  [5130, 14],
  c,
  [10789, 13],
  c,
  [4916, 27],
  c,
  [2043, 98],
  c,
  [1356, 93],
  c,
  [2234, 226],
  c,
  [146, 41],
  c,
  [9089, 8],
  c,
  [501, 33],
  c,
  [1915, 6],
  c,
  [1672, 139],
  c,
  [4230, 26],
  c,
  [3345, 22],
  c,
  [516, 27],
  c,
  [3710, 66],
  c,
  [5968, 50],
  c,
  [50, 43],
  c,
  [3890, 52],
  c,
  [240, 18],
  c,
  [725, 29],
  c,
  [13927, 149],
  c,
  [13932, 10],
  c,
  [1057, 21],
  c,
  [9502, 11],
  c,
  [12255, 222],
  c,
  [5194, 28],
  c,
  [1138, 172],
  c,
  [6928, 11],
  c,
  [317, 53],
  c,
  [881, 17],
  c,
  [2857, 176],
  c,
  [1656, 159],
  c,
  [11446, 90],
  c,
  [4755, 13],
  c,
  [4807, 52],
  c,
  [52, 82],
  c,
  [7146, 11],
  c,
  [1763, 12],
  c,
  [7727, 103],
  c,
  [677, 44],
  c,
  [7121, 162],
  c,
  [32, 14],
  c,
  [5224, 12],
  c,
  [3274, 10],
  c,
  [14237, 26],
  c,
  [50, 7],
  c,
  [989, 13],
  c,
  [4728, 299],
  c,
  [11580, 11],
  c,
  [594, 36],
  c,
  [10653, 156],
  c,
  [5993, 178],
  c,
  [4709, 117],
  c,
  [3535, 14],
  c,
  [14331, 14],
  c,
  [3608, 73],
  c,
  [10966, 83],
  c,
  [4304, 64],
  c,
  [8895, 72],
  c,
  [252, 8],
  c,
  [10055, 34],
  c,
  [789, 50],
  c,
  [1226, 9],
  c,
  [407, 8],
  c,
  [13902, 147],
  c,
  [6353, 243],
  c,
  [3856, 42],
  c,
  [1734, 104],
  c,
  [35, 36],
  c,
  [3807, 59],
  c,
  [7269, 102],
  c,
  [2880, 120],
  c,
  [1702, 220],
  c,
  [1240, 59],
  c,
  [58, 14],
  c,
  [16680, 10],
  c,
  [720, 16],
  c,
  [3625, 149],
  c,
  [9912, 163],
  c,
  [2410, 13],
  c,
  [7904, 283],
  c,
  [81, 85],
  c,
  [3737, 77],
  c,
  [453, 143],
  c,
  [1781, 16],
  c,
  [162, 43],
  c,
  [2326, 12],
  c,
  [19142, 13],
  c,
  [8084, 404],
  c,
  [1090, 21],
  c,
  [357, 125],
  c,
  [19690, 39],
  c,
  [3171, 90],
  c,
  [21, 9],
  c,
  [6038, 18],
  c,
  [9887, 73],
  c,
  [717, 41],
  c,
  [3200, 9],
  c,
  [18473, 9],
  c,
  [4211, 98],
  c,
  [4612, 40],
  c,
  [132, 82],
  c,
  [16223, 60],
  c,
  [12065, 107],
  c,
  [3407, 10],
  c,
  [6316, 80],
  c,
  [14149, 104],
  c,
  [7684, 69],
  c,
  [1769, 18],
  c,
  [1133, 52],
  c,
  [389, 59],
  c,
  [1628, 93],
  c,
  [5562, 45],
  c,
  [1832, 51],
  c,
  [688, 102],
  c,
  [12506, 107],
  c,
  [4569, 123],
  c,
  [4632, 71],
  c,
  [866, 77],
  c,
  [604, 9],
  c,
  [12174, 30],
  c,
  [2553, 110],
  c,
  [1090, 83],
  c,
  [83, 88],
  c,
  [1111, 42],
  c,
  [8547, 264],
  c,
  [8434, 120],
  c,
  [5387, 10],
  c,
  [280, 30],
  c,
  [6748, 144],
  c,
  [1282, 136],
  c,
  [1363, 156],
  c,
  [161, 103],
  s,
  [2, 5]
]),
  goto: u([
  1,
  40,
  82,
  83,
  84,
  87,
  100,
  65,
  101,
  s,
  [26, 4, 1],
  s,
  [41, 5, 1],
  88,
  80,
  81,
  85,
  86,
  73,
  54,
  50,
  51,
  18,
  110,
  95,
  s,
  [90, 5, 1],
  111,
  38,
  78,
  79,
  s,
  [68, 5, 1],
  103,
  112,
  116,
  104,
  114,
  76,
  77,
  115,
  107,
  108,
  109,
  62,
  96,
  19,
  23,
  61,
  60,
  97,
  98,
  99,
  56,
  57,
  58,
  2,
  117,
  6,
  137,
  139,
  135,
  141,
  145,
  154,
  155,
  162,
  163,
  6,
  128,
  s,
  [6, 3],
  120,
  121,
  124,
  125,
  127,
  146,
  148,
  133,
  s,
  [134, 5, 2],
  143,
  144,
  147,
  s,
  [149, 5, 1],
  s,
  [156, 6, 1],
  164,
  132,
  129,
  130,
  c,
  [85, 4],
  s,
  [7, 5],
  166,
  167,
  s,
  [9, 17],
  172,
  s,
  [9, 36],
  170,
  174,
  s,
  [9, 18],
  173,
  9,
  9,
  112,
  116,
  9,
  9,
  s,
  [422, 80],
  96,
  422,
  s,
  [424, 80],
  96,
  424,
  c,
  [370, 16],
  178,
  c,
  [371, 50],
  c,
  [67, 5],
  184,
  c,
  [67, 10],
  183,
  c,
  [67, 8],
  182,
  c,
  [68, 42],
  187,
  185,
  183,
  182,
  198,
  199,
  189,
  196,
  197,
  195,
  202,
  27,
  28,
  203,
  201,
  s,
  [348, 3],
  s,
  [249, 80],
  205,
  206,
  207,
  249,
  c,
  [607, 66],
  213,
  c,
  [62, 3],
  215,
  358,
  214,
  210,
  c,
  [39, 21],
  c,
  [95, 66],
  c,
  [66, 148],
  220,
  c,
  [67, 66],
  222,
  c,
  [67, 50],
  s,
  [196, 50],
  227,
  s,
  [196, 21],
  225,
  226,
  s,
  [196, 7],
  c,
  [148, 6],
  229,
  c,
  [281, 59],
  231,
  c,
  [38, 4],
  c,
  [352, 82],
  241,
  c,
  [67, 8],
  242,
  c,
  [68, 42],
  s,
  [207, 67],
  244,
  s,
  [207, 13],
  187,
  247,
  183,
  248,
  182,
  96,
  s,
  [376, 20],
  249,
  358,
  s,
  [376, 60],
  251,
  115,
  s,
  [376, 4],
  507,
  c,
  [244, 5],
  s,
  [507, 8],
  100,
  s,
  [507, 4],
  65,
  507,
  507,
  101,
  507,
  507,
  c,
  [260, 3],
  507,
  507,
  c,
  [262, 5],
  253,
  507,
  45,
  s,
  [507, 5],
  88,
  s,
  [507, 4],
  c,
  [272, 4],
  s,
  [507, 19],
  73,
  s,
  [507, 4],
  54,
  507,
  50,
  s,
  [507, 3],
  51,
  507,
  18,
  507,
  110,
  507,
  507,
  95,
  s,
  [507, 4],
  c,
  [304, 4],
  507,
  507,
  38,
  78,
  507,
  507,
  79,
  507,
  c,
  [309, 8],
  507,
  c,
  [310, 20],
  507,
  528,
  528,
  255,
  528,
  96,
  262,
  c,
  [960, 3],
  258,
  54,
  263,
  259,
  c,
  [32, 6],
  s,
  [96, 4, 1],
  c,
  [981, 7],
  268,
  73,
  c,
  [374, 21],
  275,
  274,
  96,
  c,
  [986, 17],
  280,
  c,
  [503, 50],
  283,
  282,
  174,
  284,
  s,
  [326, 11],
  187,
  s,
  [326, 9],
  286,
  183,
  s,
  [326, 35],
  182,
  s,
  [326, 22],
  358,
  289,
  115,
  96,
  358,
  291,
  115,
  96,
  187,
  358,
  183,
  182,
  293,
  c,
  [667, 71],
  154,
  155,
  c,
  [68, 13],
  300,
  301,
  c,
  [70, 4],
  c,
  [1847, 8],
  c,
  [745, 50],
  303,
  c,
  [144, 64],
  c,
  [1626, 63],
  c,
  [68, 68],
  213,
  100,
  308,
  65,
  315,
  c,
  [546, 3],
  310,
  73,
  316,
  38,
  78,
  313,
  c,
  [1530, 24],
  327,
  c,
  [312, 3],
  320,
  c,
  [103, 8],
  322,
  c,
  [103, 7],
  324,
  c,
  [239, 43],
  330,
  328,
  347,
  333,
  347,
  347,
  331,
  332,
  347,
  336,
  104,
  114,
  350,
  343,
  349,
  339,
  c,
  [44, 10],
  96,
  348,
  112,
  116,
  353,
  4,
  c,
  [337, 6],
  4,
  65,
  4,
  101,
  4,
  c,
  [103, 8],
  4,
  c,
  [1636, 198],
  c,
  [66, 187],
  c,
  [671, 68],
  c,
  [134, 11],
  364,
  c,
  [333, 248],
  c,
  [1413, 7],
  c,
  [1412, 22],
  c,
  [35, 3],
  s,
  [88, 17],
  373,
  s,
  [88, 48],
  s,
  [90, 17],
  374,
  s,
  [90, 48],
  c,
  [1312, 84],
  c,
  [374, 126],
  174,
  112,
  116,
  380,
  c,
  [136, 82],
  384,
  c,
  [67, 7],
  382,
  387,
  c,
  [69, 43],
  428,
  c,
  [3512, 9],
  s,
  [428, 4],
  128,
  s,
  [428, 9],
  120,
  121,
  428,
  125,
  s,
  [428, 5],
  c,
  [3523, 16],
  428,
  428,
  c,
  [3523, 3],
  s,
  [428, 7],
  132,
  s,
  [428, 8],
  92,
  93,
  s,
  [428, 9],
  c,
  [216, 66],
  166,
  167,
  22,
  c,
  [149, 4],
  s,
  [22, 9],
  128,
  s,
  [22, 9],
  120,
  121,
  22,
  125,
  s,
  [22, 5],
  c,
  [149, 8],
  s,
  [22, 6],
  156,
  157,
  s,
  [22, 4],
  164,
  s,
  [22, 7],
  132,
  s,
  [22, 8],
  92,
  93,
  s,
  [22, 9],
  390,
  389,
  c,
  [151, 16],
  391,
  c,
  [368, 56],
  c,
  [1684, 3],
  c,
  [68, 8],
  310,
  c,
  [68, 7],
  316,
  c,
  [69, 14],
  c,
  [1707, 20],
  c,
  [70, 10],
  198,
  199,
  398,
  c,
  [3440, 3],
  c,
  [294, 66],
  400,
  124,
  399,
  124,
  402,
  s,
  [382, 7],
  403,
  s,
  [384, 7],
  404,
  s,
  [387, 7],
  405,
  406,
  408,
  407,
  409,
  274,
  411,
  274,
  274,
  415,
  413,
  197,
  195,
  327,
  198,
  199,
  416,
  c,
  [114, 3],
  358,
  422,
  115,
  c,
  [3371, 67],
  c,
  [3624, 4],
  c,
  [1409, 8],
  425,
  c,
  [71, 8],
  424,
  c,
  [1410, 51],
  37,
  c,
  [632, 9],
  s,
  [37, 4],
  128,
  s,
  [37, 9],
  c,
  [4153, 7],
  37,
  37,
  c,
  [4155, 21],
  s,
  [37, 7],
  132,
  37,
  37,
  129,
  130,
  37,
  37,
  c,
  [105, 4],
  s,
  [37, 9],
  s,
  [40, 17],
  172,
  s,
  [40, 36],
  170,
  174,
  s,
  [40, 18],
  173,
  40,
  40,
  112,
  116,
  40,
  40,
  s,
  [111, 17],
  283,
  s,
  [111, 36],
  282,
  174,
  s,
  [111, 18],
  284,
  s,
  [111, 6],
  s,
  [376, 20],
  c,
  [3047, 61],
  c,
  [3050, 6],
  427,
  348,
  c,
  [4025, 4],
  187,
  183,
  182,
  s,
  [41, 3],
  135,
  141,
  s,
  [41, 9],
  128,
  s,
  [41, 9],
  120,
  121,
  41,
  125,
  s,
  [41, 5],
  c,
  [339, 3],
  41,
  c,
  [339, 4],
  s,
  [41, 6],
  156,
  157,
  s,
  [41, 4],
  164,
  s,
  [41, 7],
  132,
  s,
  [41, 8],
  92,
  93,
  s,
  [41, 9],
  s,
  [42, 3],
  135,
  141,
  s,
  [42, 9],
  128,
  s,
  [42, 9],
  120,
  121,
  42,
  125,
  s,
  [42, 5],
  133,
  134,
  42,
  42,
  c,
  [81, 4],
  s,
  [42, 6],
  156,
  157,
  s,
  [42, 4],
  164,
  s,
  [42, 7],
  132,
  s,
  [42, 8],
  92,
  93,
  s,
  [42, 9],
  s,
  [43, 3],
  135,
  141,
  s,
  [43, 9],
  128,
  s,
  [43, 9],
  120,
  121,
  43,
  125,
  s,
  [43, 5],
  133,
  134,
  43,
  43,
  c,
  [81, 4],
  s,
  [43, 6],
  156,
  157,
  s,
  [43, 4],
  164,
  s,
  [43, 7],
  132,
  s,
  [43, 8],
  92,
  93,
  s,
  [43, 9],
  s,
  [44, 3],
  135,
  141,
  s,
  [44, 9],
  128,
  s,
  [44, 9],
  120,
  121,
  44,
  125,
  s,
  [44, 5],
  133,
  134,
  44,
  44,
  c,
  [81, 4],
  s,
  [44, 6],
  156,
  157,
  s,
  [44, 4],
  164,
  s,
  [44, 7],
  132,
  s,
  [44, 8],
  92,
  93,
  s,
  [44, 9],
  c,
  [802, 66],
  46,
  c,
  [729, 9],
  s,
  [46, 4],
  128,
  s,
  [46, 9],
  120,
  121,
  46,
  125,
  s,
  [46, 5],
  c,
  [729, 16],
  46,
  46,
  c,
  [729, 3],
  s,
  [46, 7],
  132,
  s,
  [46, 8],
  92,
  93,
  s,
  [46, 9],
  c,
  [2354, 77],
  433,
  c,
  [2355, 57],
  c,
  [215, 9],
  187,
  128,
  434,
  183,
  c,
  [5087, 28],
  182,
  c,
  [5088, 7],
  c,
  [3518, 67],
  c,
  [251, 66],
  c,
  [37, 4],
  s,
  [439, 4, 1],
  s,
  [376, 9],
  443,
  c,
  [882, 4],
  249,
  s,
  [358, 3],
  s,
  [376, 30],
  c,
  [31, 14],
  c,
  [3920, 5],
  c,
  [3760, 30],
  446,
  143,
  143,
  144,
  144,
  427,
  427,
  s,
  [249, 44],
  170,
  170,
  c,
  [4904, 13],
  c,
  [353, 9],
  145,
  145,
  128,
  c,
  [352, 28],
  145,
  c,
  [352, 7],
  c,
  [48, 9],
  128,
  447,
  c,
  [47, 28],
  448,
  c,
  [399, 23],
  c,
  [332, 9],
  459,
  51,
  453,
  455,
  457,
  458,
  c,
  [335, 38],
  460,
  s,
  [208, 66],
  462,
  s,
  [208, 14],
  c,
  [3022, 68],
  s,
  [126, 11],
  187,
  s,
  [126, 9],
  467,
  183,
  s,
  [126, 35],
  468,
  182,
  s,
  [126, 22],
  c,
  [1358, 3],
  c,
  [2842, 29],
  c,
  [182, 68],
  s,
  [354, 20],
  330,
  s,
  [354, 60],
  475,
  354,
  s,
  [358, 81],
  115,
  358,
  508,
  c,
  [615, 9],
  s,
  [508, 4],
  128,
  s,
  [508, 9],
  120,
  121,
  508,
  125,
  s,
  [508, 5],
  c,
  [629, 16],
  508,
  508,
  c,
  [629, 3],
  s,
  [508, 7],
  132,
  s,
  [508, 8],
  92,
  93,
  s,
  [508, 9],
  c,
  [980, 66],
  481,
  483,
  480,
  484,
  96,
  s,
  [528, 4],
  96,
  486,
  124,
  c,
  [4695, 4],
  54,
  263,
  489,
  c,
  [4694, 10],
  c,
  [95, 66],
  495,
  96,
  497,
  s,
  [358, 81],
  251,
  115,
  358,
  s,
  [496, 10],
  498,
  s,
  [496, 70],
  c,
  [673, 29],
  s,
  [506, 20],
  358,
  s,
  [506, 60],
  c,
  [1283, 5],
  506,
  172,
  170,
  174,
  173,
  112,
  116,
  96,
  96,
  115,
  c,
  [540, 4],
  c,
  [1153, 10],
  505,
  c,
  [6640, 36],
  506,
  117,
  c,
  [3385, 67],
  509,
  510,
  c,
  [6392, 69],
  286,
  183,
  182,
  358,
  115,
  c,
  [6, 4],
  187,
  358,
  c,
  [5, 3],
  516,
  c,
  [4599, 16],
  330,
  s,
  [258, 3],
  135,
  141,
  s,
  [258, 9],
  128,
  s,
  [258, 9],
  120,
  121,
  258,
  125,
  s,
  [258, 5],
  c,
  [233, 3],
  258,
  c,
  [233, 4],
  s,
  [258, 6],
  156,
  157,
  s,
  [258, 4],
  164,
  s,
  [258, 7],
  132,
  s,
  [258, 8],
  92,
  93,
  s,
  [258, 9],
  s,
  [59, 31],
  519,
  s,
  [59, 49],
  s,
  [63, 32],
  520,
  s,
  [63, 48],
  65,
  c,
  [463, 9],
  s,
  [65, 4],
  128,
  s,
  [65, 9],
  c,
  [474, 7],
  65,
  65,
  c,
  [476, 21],
  s,
  [65, 7],
  132,
  65,
  65,
  129,
  130,
  65,
  65,
  c,
  [381, 4],
  s,
  [65, 9],
  c,
  [494, 66],
  c,
  [146, 9],
  524,
  128,
  523,
  c,
  [2163, 104],
  c,
  [725, 10],
  231,
  c,
  [724, 35],
  210,
  c,
  [47, 9],
  s,
  [210, 4],
  128,
  s,
  [210, 9],
  120,
  121,
  210,
  125,
  s,
  [210, 5],
  c,
  [61, 16],
  210,
  210,
  c,
  [61, 3],
  s,
  [210, 7],
  132,
  s,
  [210, 6],
  c,
  [72, 5],
  s,
  [210, 8],
  527,
  s,
  [124, 3],
  c,
  [985, 3],
  c,
  [5367, 4],
  c,
  [5366, 24],
  s,
  [253, 9],
  279,
  279,
  c,
  [4, 4],
  c,
  [5, 3],
  s,
  [253, 39],
  529,
  s,
  [303, 11],
  530,
  s,
  [303, 43],
  c,
  [5479, 70],
  c,
  [1199, 10],
  532,
  c,
  [40, 19],
  292,
  358,
  292,
  376,
  292,
  358,
  358,
  292,
  292,
  c,
  [2428, 7],
  c,
  [1135, 5],
  c,
  [1134, 3],
  534,
  c,
  [1135, 3],
  536,
  415,
  124,
  124,
  c,
  [132, 9],
  c,
  [590, 15],
  c,
  [130, 44],
  c,
  [657, 75],
  413,
  128,
  s,
  [413, 4],
  c,
  [545, 28],
  541,
  c,
  [2423, 32],
  c,
  [117, 41],
  s,
  [417, 5],
  327,
  s,
  [417, 4],
  544,
  s,
  [417, 60],
  330,
  198,
  199,
  546,
  c,
  [4103, 3],
  c,
  [5861, 3],
  548,
  c,
  [148, 66],
  552,
  124,
  124,
  551,
  c,
  [1333, 3],
  c,
  [1332, 12],
  s,
  [476, 4],
  555,
  465,
  556,
  476,
  s,
  [478, 4],
  467,
  478,
  c,
  [29, 15],
  561,
  c,
  [16, 3],
  563,
  c,
  [17, 12],
  566,
  568,
  96,
  112,
  116,
  570,
  353,
  c,
  [138, 66],
  39,
  c,
  [404, 9],
  s,
  [39, 4],
  128,
  s,
  [39, 9],
  c,
  [412, 7],
  39,
  39,
  c,
  [414, 21],
  s,
  [39, 7],
  132,
  39,
  39,
  129,
  130,
  39,
  39,
  c,
  [105, 4],
  s,
  [39, 9],
  50,
  c,
  [81, 9],
  s,
  [50, 4],
  128,
  s,
  [50, 9],
  c,
  [81, 7],
  50,
  50,
  c,
  [81, 21],
  s,
  [50, 7],
  132,
  50,
  50,
  129,
  130,
  50,
  50,
  c,
  [81, 4],
  s,
  [50, 9],
  51,
  c,
  [81, 9],
  s,
  [51, 4],
  128,
  s,
  [51, 9],
  c,
  [81, 7],
  51,
  51,
  c,
  [81, 21],
  s,
  [51, 7],
  132,
  51,
  51,
  129,
  130,
  51,
  51,
  c,
  [81, 4],
  s,
  [51, 9],
  52,
  c,
  [81, 9],
  s,
  [52, 4],
  128,
  s,
  [52, 9],
  120,
  121,
  52,
  125,
  s,
  [52, 5],
  c,
  [81, 16],
  52,
  52,
  c,
  [81, 3],
  s,
  [52, 7],
  132,
  s,
  [52, 6],
  c,
  [81, 4],
  s,
  [52, 9],
  53,
  c,
  [81, 9],
  s,
  [53, 4],
  128,
  s,
  [53, 9],
  c,
  [162, 7],
  53,
  53,
  c,
  [162, 21],
  s,
  [53, 7],
  132,
  53,
  53,
  129,
  130,
  53,
  53,
  c,
  [81, 4],
  s,
  [53, 9],
  56,
  c,
  [81, 9],
  s,
  [56, 4],
  128,
  s,
  [56, 9],
  c,
  [81, 4],
  56,
  146,
  148,
  56,
  56,
  c,
  [81, 21],
  s,
  [56, 7],
  132,
  s,
  [56, 6],
  c,
  [81, 4],
  s,
  [56, 9],
  s,
  [199, 15],
  573,
  s,
  [199, 65],
  c,
  [633, 16],
  576,
  c,
  [634, 50],
  205,
  c,
  [229, 9],
  s,
  [205, 4],
  128,
  s,
  [205, 9],
  c,
  [310, 7],
  205,
  205,
  c,
  [229, 21],
  s,
  [205, 7],
  132,
  205,
  205,
  129,
  130,
  205,
  205,
  c,
  [105, 4],
  s,
  [205, 9],
  201,
  c,
  [81, 9],
  s,
  [201, 4],
  128,
  s,
  [201, 9],
  c,
  [81, 4],
  201,
  146,
  148,
  201,
  201,
  c,
  [81, 21],
  s,
  [201, 7],
  132,
  s,
  [201, 6],
  c,
  [81, 4],
  s,
  [201, 9],
  203,
  c,
  [81, 9],
  s,
  [203, 4],
  128,
  s,
  [203, 9],
  c,
  [81, 4],
  203,
  146,
  148,
  203,
  203,
  c,
  [81, 21],
  s,
  [203, 7],
  132,
  s,
  [203, 6],
  c,
  [81, 4],
  s,
  [203, 9],
  225,
  c,
  [81, 9],
  s,
  [225, 4],
  128,
  s,
  [225, 9],
  c,
  [243, 7],
  225,
  225,
  c,
  [81, 21],
  s,
  [225, 7],
  132,
  225,
  225,
  129,
  130,
  225,
  225,
  c,
  [81, 4],
  s,
  [225, 9],
  c,
  [2756, 29],
  579,
  580,
  581,
  358,
  376,
  c,
  [4010, 5],
  c,
  [3982, 6],
  251,
  115,
  c,
  [3893, 8],
  s,
  [58, 31],
  519,
  s,
  [58, 49],
  202,
  c,
  [217, 9],
  s,
  [202, 4],
  128,
  s,
  [202, 9],
  c,
  [217, 4],
  202,
  146,
  148,
  202,
  202,
  c,
  [217, 21],
  s,
  [202, 7],
  132,
  s,
  [202, 6],
  c,
  [217, 4],
  s,
  [202, 9],
  204,
  c,
  [81, 9],
  s,
  [204, 4],
  128,
  s,
  [204, 9],
  c,
  [81, 4],
  204,
  146,
  148,
  204,
  204,
  c,
  [81, 21],
  s,
  [204, 7],
  132,
  s,
  [204, 6],
  c,
  [81, 4],
  s,
  [204, 9],
  c,
  [2200, 10],
  c,
  [2199, 35],
  582,
  584,
  s,
  [124, 3],
  c,
  [1372, 23],
  c,
  [6173, 44],
  c,
  [117, 9],
  121,
  128,
  s,
  [121, 3],
  c,
  [121, 28],
  121,
  586,
  c,
  [1776, 73],
  c,
  [234, 10],
  588,
  c,
  [235, 35],
  c,
  [112, 16],
  589,
  c,
  [113, 50],
  117,
  591,
  592,
  117,
  s,
  [376, 9],
  c,
  [2185, 4],
  376,
  292,
  c,
  [4641, 3],
  c,
  [2186, 4],
  c,
  [4642, 39],
  c,
  [2221, 5],
  s,
  [368, 9],
  293,
  293,
  c,
  [3, 4],
  s,
  [368, 34],
  c,
  [9971, 41],
  c,
  [2310, 3],
  c,
  [9954, 8],
  112,
  116,
  400,
  124,
  593,
  c,
  [474, 6],
  c,
  [3331, 6],
  595,
  c,
  [3332, 57],
  597,
  198,
  199,
  s,
  [125, 3],
  c,
  [2066, 3],
  599,
  600,
  c,
  [7506, 84],
  c,
  [7439, 182],
  606,
  607,
  609,
  608,
  124,
  124,
  611,
  s,
  [299, 5],
  612,
  613,
  408,
  407,
  615,
  415,
  124,
  198,
  199,
  c,
  [292, 3],
  c,
  [3627, 9],
  620,
  369,
  c,
  [671, 9],
  s,
  [369, 4],
  128,
  s,
  [369, 9],
  c,
  [683, 7],
  369,
  369,
  c,
  [685, 21],
  s,
  [369, 7],
  132,
  369,
  369,
  129,
  130,
  369,
  369,
  c,
  [139, 4],
  s,
  [369, 9],
  c,
  [6809, 73],
  c,
  [884, 70],
  623,
  c,
  [884, 35],
  c,
  [46, 10],
  624,
  c,
  [46, 35],
  233,
  c,
  [47, 9],
  s,
  [233, 4],
  128,
  s,
  [233, 9],
  c,
  [59, 7],
  233,
  233,
  c,
  [61, 21],
  s,
  [233, 7],
  132,
  233,
  233,
  129,
  130,
  233,
  233,
  c,
  [72, 5],
  s,
  [233, 8],
  s,
  [234, 64],
  166,
  167,
  s,
  [234, 15],
  c,
  [5102, 3],
  c,
  [771, 68],
  c,
  [279, 10],
  628,
  c,
  [4368, 36],
  223,
  c,
  [48, 9],
  s,
  [223, 4],
  128,
  s,
  [223, 9],
  c,
  [59, 7],
  223,
  223,
  c,
  [61, 21],
  s,
  [223, 7],
  132,
  223,
  223,
  129,
  130,
  223,
  223,
  c,
  [72, 5],
  s,
  [223, 8],
  c,
  [8803, 330],
  c,
  [2199, 29],
  635,
  358,
  506,
  376,
  506,
  358,
  c,
  [5, 3],
  376,
  c,
  [4, 4],
  506,
  c,
  [4, 3],
  c,
  [1537, 6],
  s,
  [249, 3],
  169,
  169,
  c,
  [6091, 6],
  c,
  [196, 91],
  c,
  [6062, 44],
  638,
  640,
  639,
  187,
  643,
  641,
  183,
  182,
  644,
  s,
  [55, 9],
  187,
  55,
  645,
  183,
  s,
  [55, 28],
  182,
  s,
  [55, 8],
  c,
  [784, 78],
  c,
  [782, 29],
  649,
  c,
  [783, 6],
  186,
  186,
  c,
  [11627, 3],
  c,
  [8683, 83],
  c,
  [78, 14],
  244,
  c,
  [78, 77],
  c,
  [8839, 84],
  c,
  [481, 44],
  c,
  [422, 68],
  215,
  c,
  [423, 9],
  s,
  [215, 4],
  128,
  s,
  [215, 9],
  120,
  121,
  215,
  125,
  s,
  [215, 5],
  c,
  [438, 16],
  215,
  215,
  c,
  [438, 3],
  s,
  [215, 7],
  132,
  s,
  [215, 6],
  c,
  [105, 4],
  s,
  [215, 9],
  s,
  [376, 11],
  187,
  c,
  [10959, 11],
  657,
  183,
  s,
  [376, 35],
  182,
  c,
  [10959, 27],
  c,
  [6548, 32],
  s,
  [135, 11],
  187,
  s,
  [135, 5],
  172,
  s,
  [135, 3],
  661,
  183,
  s,
  [135, 31],
  170,
  174,
  135,
  135,
  182,
  s,
  [135, 15],
  173,
  135,
  135,
  112,
  116,
  135,
  135,
  19,
  c,
  [282, 9],
  s,
  [19, 4],
  128,
  s,
  [19, 9],
  c,
  [718, 7],
  19,
  19,
  c,
  [720, 21],
  s,
  [19, 7],
  132,
  19,
  19,
  129,
  130,
  19,
  19,
  c,
  [282, 4],
  s,
  [19, 9],
  s,
  [20, 64],
  166,
  167,
  s,
  [20, 15],
  s,
  [355, 20],
  330,
  s,
  [355, 61],
  s,
  [356, 20],
  330,
  s,
  [356, 61],
  c,
  [1030, 10],
  6,
  664,
  c,
  [1814, 35],
  117,
  665,
  667,
  669,
  483,
  484,
  96,
  670,
  675,
  673,
  96,
  676,
  679,
  483,
  678,
  484,
  96,
  529,
  529,
  125,
  s,
  [529, 3],
  680,
  681,
  c,
  [1364, 66],
  683,
  684,
  522,
  c,
  [141, 9],
  s,
  [522, 4],
  128,
  s,
  [522, 9],
  120,
  121,
  522,
  125,
  s,
  [522, 5],
  c,
  [154, 16],
  522,
  522,
  c,
  [154, 3],
  s,
  [522, 7],
  132,
  s,
  [522, 6],
  c,
  [107, 4],
  s,
  [522, 9],
  686,
  685,
  124,
  688,
  s,
  [542, 4],
  689,
  495,
  96,
  c,
  [668, 4],
  125,
  c,
  [669, 3],
  125,
  c,
  [670, 22],
  692,
  693,
  498,
  124,
  124,
  694,
  695,
  696,
  699,
  698,
  117,
  700,
  701,
  341,
  c,
  [136, 9],
  s,
  [341, 4],
  128,
  s,
  [341, 9],
  c,
  [288, 7],
  341,
  341,
  c,
  [290, 21],
  s,
  [341, 7],
  132,
  341,
  341,
  129,
  130,
  341,
  341,
  c,
  [136, 4],
  s,
  [341, 9],
  c,
  [6337, 16],
  c,
  [5024, 3],
  703,
  c,
  [1200, 78],
  154,
  155,
  300,
  301,
  c,
  [56, 8],
  66,
  c,
  [191, 9],
  s,
  [66, 4],
  128,
  s,
  [66, 9],
  c,
  [191, 7],
  66,
  66,
  c,
  [191, 21],
  s,
  [66, 7],
  132,
  66,
  66,
  129,
  130,
  66,
  66,
  c,
  [117, 4],
  s,
  [66, 9],
  c,
  [171, 5],
  709,
  c,
  [3201, 128],
  c,
  [682, 10],
  711,
  c,
  [2496, 36],
  712,
  713,
  714,
  213,
  100,
  125,
  65,
  315,
  c,
  [501, 6],
  c,
  [6061, 23],
  c,
  [6096, 3],
  716,
  c,
  [154, 5],
  289,
  184,
  289,
  65,
  101,
  289,
  c,
  [157, 8],
  720,
  289,
  c,
  [159, 7],
  721,
  c,
  [11605, 60],
  724,
  c,
  [1941, 60],
  413,
  128,
  725,
  c,
  [5826, 38],
  726,
  294,
  294,
  172,
  s,
  [294, 3],
  c,
  [7162, 5],
  727,
  c,
  [6024, 9],
  417,
  544,
  c,
  [134, 8],
  125,
  417,
  c,
  [6028, 51],
  731,
  730,
  536,
  124,
  124,
  415,
  c,
  [141, 9],
  411,
  128,
  s,
  [411, 4],
  c,
  [3195, 44],
  414,
  128,
  s,
  [414, 4],
  c,
  [50, 35],
  327,
  400,
  124,
  734,
  124,
  c,
  [4414, 45],
  735,
  c,
  [846, 3],
  125,
  125,
  c,
  [847, 12],
  737,
  738,
  c,
  [849, 3],
  739,
  96,
  c,
  [24, 3],
  742,
  c,
  [23, 12],
  745,
  744,
  743,
  s,
  [461, 74],
  561,
  s,
  [461, 6],
  s,
  [465, 80],
  556,
  465,
  746,
  749,
  747,
  124,
  124,
  c,
  [6032, 15],
  745,
  744,
  s,
  [492, 5],
  753,
  751,
  124,
  124,
  568,
  96,
  755,
  c,
  [286, 45],
  756,
  c,
  [5435, 67],
  758,
  c,
  [114, 10],
  205,
  759,
  c,
  [4581, 51],
  c,
  [114, 50],
  761,
  c,
  [5194, 18],
  c,
  [2989, 5],
  c,
  [3182, 161],
  766,
  767,
  765,
  c,
  [98, 8],
  125,
  c,
  [882, 9],
  125,
  c,
  [101, 7],
  125,
  c,
  [5069, 44],
  c,
  [5140, 4],
  c,
  [376, 9],
  122,
  128,
  s,
  [122, 3],
  c,
  [378, 28],
  122,
  c,
  [379, 7],
  770,
  117,
  771,
  c,
  [1143, 11],
  773,
  c,
  [12817, 125],
  33,
  c,
  [191, 9],
  s,
  [33, 4],
  128,
  s,
  [33, 9],
  c,
  [200, 7],
  33,
  33,
  c,
  [202, 21],
  s,
  [33, 7],
  132,
  33,
  33,
  129,
  130,
  33,
  33,
  c,
  [105, 4],
  s,
  [33, 9],
  c,
  [149, 68],
  c,
  [4640, 5],
  c,
  [5, 5],
  27,
  c,
  [159, 4],
  s,
  [27, 9],
  128,
  s,
  [27, 9],
  120,
  121,
  27,
  125,
  s,
  [27, 5],
  c,
  [159, 8],
  s,
  [27, 6],
  156,
  157,
  s,
  [27, 4],
  164,
  s,
  [27, 7],
  132,
  s,
  [27, 8],
  92,
  93,
  s,
  [27, 9],
  c,
  [239, 9],
  383,
  383,
  128,
  s,
  [383, 5],
  c,
  [1313, 44],
  385,
  385,
  128,
  s,
  [385, 5],
  c,
  [52, 44],
  390,
  390,
  128,
  s,
  [390, 5],
  c,
  [52, 35],
  390,
  781,
  s,
  [391, 7],
  783,
  782,
  125,
  125,
  c,
  [11367, 4],
  785,
  786,
  297,
  198,
  297,
  199,
  s,
  [297, 3],
  789,
  197,
  788,
  c,
  [11487, 67],
  791,
  792,
  c,
  [11448, 3],
  417,
  544,
  c,
  [343, 3],
  795,
  c,
  [2269, 16],
  c,
  [2642, 11],
  797,
  c,
  [170, 35],
  371,
  c,
  [48, 9],
  s,
  [371, 4],
  128,
  s,
  [371, 9],
  c,
  [59, 7],
  371,
  371,
  c,
  [61, 21],
  s,
  [371, 7],
  132,
  371,
  371,
  129,
  130,
  371,
  371,
  c,
  [72, 5],
  s,
  [371, 8],
  220,
  c,
  [81, 9],
  s,
  [220, 4],
  128,
  s,
  [220, 9],
  c,
  [81, 7],
  220,
  220,
  c,
  [81, 21],
  s,
  [220, 7],
  132,
  220,
  220,
  129,
  130,
  220,
  220,
  c,
  [81, 4],
  s,
  [220, 9],
  c,
  [302, 5],
  s,
  [262, 7],
  100,
  262,
  65,
  262,
  c,
  [311, 4],
  262,
  c,
  [312, 5],
  262,
  45,
  s,
  [262, 5],
  88,
  262,
  262,
  c,
  [320, 4],
  s,
  [262, 19],
  73,
  262,
  262,
  54,
  262,
  50,
  262,
  c,
  [343, 3],
  262,
  262,
  c,
  [345, 9],
  262,
  c,
  [346, 29],
  224,
  c,
  [191, 9],
  s,
  [224, 4],
  128,
  s,
  [224, 9],
  c,
  [191, 7],
  224,
  224,
  c,
  [191, 21],
  s,
  [224, 7],
  132,
  224,
  224,
  129,
  130,
  224,
  224,
  c,
  [106, 4],
  s,
  [224, 9],
  c,
  [80, 9],
  799,
  c,
  [1600, 36],
  c,
  [1645, 38],
  800,
  c,
  [46, 16],
  187,
  128,
  802,
  c,
  [8707, 37],
  c,
  [49, 11],
  804,
  c,
  [49, 37],
  s,
  [249, 3],
  806,
  807,
  808,
  s,
  [249, 3],
  c,
  [1415, 29],
  c,
  [87, 9],
  146,
  146,
  c,
  [184, 29],
  146,
  c,
  [86, 7],
  640,
  810,
  c,
  [4065, 74],
  c,
  [4134, 132],
  459,
  457,
  816,
  c,
  [3, 3],
  c,
  [4630, 78],
  183,
  c,
  [416, 29],
  c,
  [2043, 12],
  c,
  [3270, 73],
  s,
  [190, 4],
  520,
  190,
  190,
  s,
  [191, 4],
  520,
  191,
  191,
  s,
  [192, 4],
  520,
  192,
  192,
  640,
  821,
  213,
  c,
  [149, 9],
  s,
  [213, 4],
  128,
  s,
  [213, 9],
  120,
  121,
  213,
  125,
  s,
  [213, 5],
  c,
  [162, 16],
  213,
  213,
  c,
  [162, 3],
  s,
  [213, 7],
  132,
  s,
  [213, 6],
  c,
  [128, 4],
  s,
  [213, 9],
  c,
  [297, 68],
  s,
  [134, 11],
  187,
  s,
  [134, 5],
  172,
  s,
  [134, 3],
  825,
  183,
  s,
  [134, 31],
  170,
  174,
  134,
  134,
  182,
  s,
  [134, 15],
  173,
  134,
  134,
  112,
  116,
  c,
  [70, 3],
  183,
  182,
  827,
  829,
  667,
  830,
  96,
  833,
  832,
  124,
  835,
  s,
  [555, 4],
  836,
  837,
  c,
  [3941, 3],
  667,
  c,
  [3949, 3],
  841,
  c,
  [2561, 45],
  842,
  125,
  495,
  96,
  844,
  s,
  [539, 4],
  846,
  96,
  847,
  96,
  686,
  124,
  849,
  c,
  [824, 29],
  c,
  [29, 29],
  c,
  [1497, 3],
  854,
  853,
  c,
  [1498, 12],
  699,
  856,
  444,
  858,
  863,
  861,
  444,
  444,
  862,
  864,
  c,
  [2928, 3],
  865,
  187,
  359,
  867,
  183,
  182,
  s,
  [62, 32],
  520,
  s,
  [62, 48],
  c,
  [1691, 66],
  238,
  c,
  [303, 9],
  s,
  [238, 4],
  128,
  s,
  [238, 9],
  c,
  [316, 7],
  238,
  238,
  c,
  [318, 21],
  s,
  [238, 7],
  132,
  238,
  238,
  129,
  130,
  238,
  238,
  c,
  [105, 4],
  s,
  [238, 9],
  s,
  [240, 64],
  166,
  167,
  s,
  [240, 15],
  c,
  [13482, 70],
  c,
  [231, 9],
  871,
  128,
  c,
  [3856, 36],
  c,
  [1734, 110],
  c,
  [10021, 31],
  c,
  [31, 31],
  875,
  713,
  714,
  c,
  [222, 9],
  280,
  280,
  128,
  s,
  [280, 3],
  c,
  [3206, 51],
  c,
  [7082, 51],
  c,
  [117, 9],
  283,
  283,
  128,
  s,
  [283, 3],
  c,
  [117, 102],
  878,
  c,
  [68, 8],
  418,
  c,
  [69, 8],
  418,
  c,
  [3303, 55],
  c,
  [10113, 68],
  c,
  [68, 63],
  881,
  c,
  [3786, 15],
  c,
  [15, 15],
  884,
  c,
  [1081, 3],
  885,
  c,
  [20, 15],
  887,
  c,
  [16, 3],
  890,
  889,
  c,
  [53, 15],
  893,
  892,
  c,
  [17, 12],
  894,
  895,
  c,
  [4084, 17],
  749,
  124,
  124,
  897,
  898,
  899,
  125,
  125,
  568,
  96,
  753,
  124,
  124,
  901,
  488,
  350,
  488,
  343,
  349,
  903,
  904,
  488,
  c,
  [34, 12],
  c,
  [3849, 67],
  c,
  [1401, 10],
  c,
  [3847, 36],
  c,
  [1357, 29],
  166,
  c,
  [76, 9],
  s,
  [166, 4],
  128,
  s,
  [166, 9],
  c,
  [88, 7],
  166,
  166,
  c,
  [90, 21],
  s,
  [166, 7],
  132,
  166,
  166,
  129,
  130,
  166,
  166,
  c,
  [101, 4],
  s,
  [166, 9],
  167,
  c,
  [81, 9],
  s,
  [167, 4],
  128,
  s,
  [167, 9],
  c,
  [81, 7],
  167,
  167,
  c,
  [81, 21],
  s,
  [167, 7],
  132,
  167,
  167,
  129,
  130,
  167,
  167,
  c,
  [81, 4],
  s,
  [167, 9],
  c,
  [2410, 9],
  c,
  [8858, 67],
  c,
  [67, 67],
  766,
  767,
  910,
  911,
  c,
  [1960, 68],
  29,
  c,
  [296, 9],
  s,
  [29, 4],
  128,
  s,
  [29, 9],
  c,
  [296, 7],
  29,
  29,
  c,
  [296, 21],
  s,
  [29, 7],
  132,
  29,
  29,
  129,
  130,
  29,
  29,
  c,
  [105, 4],
  s,
  [29, 9],
  34,
  c,
  [81, 9],
  s,
  [34, 4],
  128,
  s,
  [34, 9],
  c,
  [81, 7],
  34,
  34,
  c,
  [81, 21],
  s,
  [34, 7],
  132,
  34,
  34,
  129,
  130,
  34,
  34,
  c,
  [81, 4],
  s,
  [34, 9],
  26,
  c,
  [81, 4],
  s,
  [26, 9],
  128,
  s,
  [26, 9],
  120,
  121,
  26,
  125,
  s,
  [26, 5],
  c,
  [81, 8],
  s,
  [26, 6],
  156,
  157,
  s,
  [26, 4],
  164,
  s,
  [26, 7],
  132,
  s,
  [26, 8],
  92,
  93,
  s,
  [26, 9],
  400,
  c,
  [9311, 26],
  c,
  [385, 43],
  c,
  [3638, 4],
  c,
  [4, 4],
  c,
  [74, 66],
  s,
  [302, 5],
  408,
  407,
  c,
  [312, 9],
  300,
  300,
  128,
  s,
  [300, 3],
  c,
  [850, 35],
  198,
  199,
  418,
  c,
  [3682, 3],
  c,
  [3690, 3],
  c,
  [6, 3],
  c,
  [1082, 3],
  920,
  221,
  c,
  [67, 9],
  s,
  [221, 4],
  128,
  s,
  [221, 9],
  c,
  [75, 7],
  221,
  221,
  c,
  [77, 21],
  s,
  [221, 7],
  132,
  221,
  221,
  129,
  130,
  221,
  221,
  c,
  [88, 4],
  s,
  [221, 9],
  c,
  [16689, 205],
  c,
  [9251, 129],
  c,
  [1090, 9],
  640,
  929,
  c,
  [1338, 10],
  177,
  177,
  c,
  [3143, 113],
  c,
  [125, 10],
  180,
  180,
  c,
  [125, 35],
  185,
  185,
  519,
  930,
  218,
  c,
  [52, 9],
  s,
  [218, 4],
  128,
  s,
  [218, 9],
  120,
  121,
  218,
  125,
  s,
  [218, 5],
  c,
  [65, 16],
  218,
  218,
  c,
  [65, 3],
  s,
  [218, 7],
  132,
  s,
  [218, 6],
  c,
  [76, 4],
  s,
  [218, 9],
  c,
  [3022, 3],
  932,
  667,
  96,
  667,
  125,
  c,
  [3012, 3],
  937,
  s,
  [550, 4],
  939,
  s,
  [96, 3],
  833,
  124,
  942,
  943,
  944,
  96,
  495,
  96,
  96,
  948,
  c,
  [6765, 3],
  949,
  s,
  [452, 8],
  745,
  744,
  s,
  [452, 71],
  c,
  [1915, 30],
  952,
  954,
  953,
  124,
  124,
  444,
  c,
  [3007, 5],
  c,
  [13880, 3],
  958,
  446,
  959,
  446,
  446,
  187,
  359,
  c,
  [9528, 4],
  183,
  182,
  64,
  c,
  [253, 9],
  s,
  [64, 4],
  128,
  s,
  [64, 9],
  c,
  [316, 7],
  64,
  64,
  c,
  [318, 21],
  s,
  [64, 7],
  132,
  64,
  64,
  129,
  130,
  64,
  64,
  c,
  [253, 4],
  s,
  [64, 9],
  c,
  [80, 9],
  962,
  c,
  [2715, 37],
  963,
  c,
  [20072, 3],
  239,
  c,
  [52, 9],
  s,
  [239, 4],
  128,
  s,
  [239, 9],
  c,
  [63, 7],
  239,
  239,
  c,
  [65, 21],
  s,
  [239, 7],
  132,
  239,
  239,
  129,
  130,
  239,
  239,
  c,
  [76, 4],
  s,
  [239, 9],
  c,
  [6619, 3],
  964,
  c,
  [4747, 11],
  965,
  c,
  [4348, 45],
  6,
  966,
  c,
  [693, 40],
  c,
  [885, 11],
  968,
  c,
  [885, 51],
  c,
  [6503, 4],
  971,
  972,
  c,
  [1244, 3],
  973,
  974,
  s,
  [455, 74],
  561,
  s,
  [455, 6],
  c,
  [528, 30],
  s,
  [456, 74],
  561,
  s,
  [456, 6],
  c,
  [111, 30],
  c,
  [15, 30],
  745,
  744,
  s,
  [495, 5],
  981,
  568,
  96,
  568,
  96,
  984,
  745,
  744,
  s,
  [485, 5],
  c,
  [50, 30],
  987,
  c,
  [2223, 32],
  c,
  [6011, 47],
  991,
  30,
  c,
  [510, 9],
  s,
  [30, 4],
  128,
  s,
  [30, 9],
  c,
  [521, 7],
  30,
  30,
  c,
  [523, 21],
  s,
  [30, 7],
  132,
  30,
  30,
  129,
  130,
  30,
  30,
  c,
  [110, 4],
  s,
  [30, 9],
  599,
  600,
  992,
  c,
  [83, 9],
  392,
  392,
  128,
  s,
  [392, 5],
  c,
  [598, 35],
  392,
  993,
  c,
  [54, 9],
  298,
  298,
  128,
  s,
  [298, 3],
  c,
  [52, 35],
  c,
  [969, 5],
  c,
  [4955, 11],
  996,
  c,
  [5004, 48],
  998,
  c,
  [49, 37],
  157,
  c,
  [50, 9],
  s,
  [157, 4],
  128,
  s,
  [157, 9],
  120,
  121,
  157,
  125,
  s,
  [157, 5],
  c,
  [62, 16],
  157,
  157,
  c,
  [62, 3],
  s,
  [157, 7],
  132,
  s,
  [157, 6],
  c,
  [72, 5],
  s,
  [157, 8],
  158,
  c,
  [81, 9],
  s,
  [158, 4],
  128,
  s,
  [158, 9],
  120,
  121,
  158,
  125,
  s,
  [158, 5],
  c,
  [143, 17],
  158,
  c,
  [81, 3],
  s,
  [158, 7],
  132,
  s,
  [158, 6],
  c,
  [81, 4],
  s,
  [158, 9],
  c,
  [211, 11],
  999,
  c,
  [13971, 53],
  c,
  [573, 50],
  1002,
  1003,
  1004,
  667,
  1006,
  c,
  [1510, 3],
  96,
  1009,
  1010,
  667,
  667,
  745,
  744,
  1013,
  s,
  [454, 8],
  745,
  744,
  s,
  [454, 71],
  125,
  444,
  125,
  c,
  [1462, 5],
  1015,
  1016,
  954,
  124,
  124,
  1017,
  447,
  c,
  [4503, 4],
  c,
  [777, 12],
  1021,
  c,
  [244, 9],
  286,
  286,
  128,
  s,
  [286, 3],
  c,
  [3765, 102],
  1023,
  1024,
  1025,
  561,
  s,
  [459, 74],
  c,
  [75, 7],
  1026,
  561,
  s,
  [460, 74],
  c,
  [75, 7],
  745,
  744,
  s,
  [493, 5],
  745,
  744,
  1027,
  1028,
  745,
  744,
  s,
  [486, 5],
  745,
  744,
  1029,
  c,
  [501, 66],
  168,
  c,
  [373, 9],
  s,
  [168, 4],
  128,
  s,
  [168, 9],
  c,
  [381, 7],
  168,
  168,
  c,
  [383, 21],
  s,
  [168, 7],
  132,
  168,
  168,
  129,
  130,
  168,
  168,
  c,
  [105, 4],
  s,
  [168, 9],
  766,
  767,
  1031,
  c,
  [2568, 141],
  c,
  [5702, 72],
  187,
  128,
  1038,
  c,
  [904, 37],
  1040,
  1041,
  1042,
  c,
  [2204, 6],
  c,
  [6, 6],
  1045,
  330,
  745,
  744,
  s,
  [442, 5],
  c,
  [749, 15],
  c,
  [1954, 11],
  1048,
  c,
  [745, 35],
  165,
  c,
  [48, 9],
  s,
  [165, 4],
  128,
  s,
  [165, 9],
  c,
  [59, 7],
  165,
  165,
  c,
  [61, 21],
  s,
  [165, 7],
  132,
  165,
  165,
  129,
  130,
  165,
  165,
  c,
  [72, 5],
  s,
  [165, 8],
  149,
  c,
  [81, 9],
  s,
  [149, 4],
  128,
  s,
  [149, 9],
  120,
  121,
  149,
  125,
  s,
  [149, 5],
  c,
  [81, 16],
  149,
  149,
  c,
  [81, 3],
  s,
  [149, 7],
  132,
  s,
  [149, 6],
  c,
  [81, 4],
  s,
  [149, 9],
  152,
  c,
  [81, 9],
  s,
  [152, 4],
  128,
  s,
  [152, 9],
  120,
  121,
  152,
  125,
  s,
  [152, 5],
  c,
  [81, 16],
  152,
  152,
  c,
  [81, 3],
  s,
  [152, 7],
  132,
  s,
  [152, 6],
  c,
  [81, 4],
  s,
  [152, 9],
  159,
  c,
  [81, 9],
  s,
  [159, 4],
  128,
  s,
  [159, 9],
  120,
  121,
  159,
  125,
  s,
  [159, 5],
  c,
  [81, 16],
  159,
  c,
  [243, 4],
  s,
  [159, 7],
  132,
  s,
  [159, 6],
  c,
  [81, 4],
  s,
  [159, 9],
  c,
  [527, 68],
  s,
  [1051, 5, 1],
  745,
  744,
  s,
  [443, 5],
  162,
  c,
  [161, 9],
  s,
  [162, 4],
  128,
  s,
  [162, 9],
  120,
  121,
  162,
  125,
  s,
  [162, 5],
  c,
  [161, 16],
  162,
  162,
  c,
  [161, 3],
  s,
  [162, 7],
  132,
  s,
  [162, 6],
  c,
  [117, 4],
  s,
  [162, 9],
  c,
  [2123, 17],
  s,
  [441, 5]
])
}),
defaultActions: bda({
  idx: u([
  3,
  6,
  s,
  [8, 10, 1],
  20,
  21,
  22,
  24,
  25,
  s,
  [31, 8, 1],
  46,
  53,
  62,
  63,
  64,
  s,
  [66, 7, 1],
  s,
  [79, 9, 1],
  s,
  [90, 4, 1],
  s,
  [96, 4, 1],
  s,
  [102, 4, 1],
  s,
  [108, 6, 1],
  118,
  120,
  121,
  126,
  s,
  [133, 13, 1],
  147,
  s,
  [149, 16, 1],
  168,
  169,
  171,
  175,
  176,
  181,
  186,
  190,
  191,
  192,
  200,
  205,
  206,
  207,
  211,
  223,
  225,
  226,
  227,
  246,
  257,
  260,
  261,
  264,
  265,
  269,
  270,
  273,
  281,
  285,
  287,
  292,
  300,
  301,
  304,
  307,
  308,
  311,
  318,
  320,
  323,
  329,
  331,
  332,
  333,
  335,
  337,
  340,
  s,
  [345, 4, 1],
  352,
  354,
  355,
  362,
  373,
  374,
  378,
  379,
  380,
  382,
  385,
  389,
  391,
  405,
  407,
  411,
  412,
  416,
  418,
  419,
  426,
  427,
  430,
  435,
  450,
  456,
  461,
  463,
  466,
  469,
  473,
  474,
  482,
  494,
  502,
  505,
  506,
  508,
  509,
  511,
  513,
  514,
  515,
  518,
  522,
  534,
  538,
  541,
  543,
  545,
  546,
  548,
  549,
  551,
  560,
  567,
  569,
  570,
  571,
  582,
  586,
  588,
  591,
  592,
  594,
  598,
  601,
  608,
  617,
  618,
  619,
  s,
  [623, 4, 1],
  639,
  642,
  646,
  648,
  s,
  [654, 5, 2],
  663,
  664,
  665,
  667,
  672,
  680,
  681,
  683,
  684,
  685,
  691,
  694,
  695,
  697,
  701,
  706,
  712,
  715,
  719,
  721,
  723,
  726,
  727,
  728,
  s,
  [733, 4, 1],
  740,
  746,
  747,
  751,
  756,
  757,
  759,
  765,
  768,
  770,
  772,
  s,
  [775, 5, 2],
  784,
  787,
  791,
  792,
  793,
  797,
  801,
  803,
  806,
  807,
  s,
  [808, 4, 2],
  815,
  817,
  819,
  822,
  824,
  826,
  827,
  832,
  842,
  843,
  845,
  847,
  848,
  850,
  856,
  859,
  863,
  864,
  866,
  871,
  873,
  875,
  880,
  882,
  884,
  885,
  900,
  908,
  911,
  912,
  916,
  919,
  923,
  925,
  930,
  931,
  936,
  938,
  940,
  941,
  s,
  [946, 4, 1],
  952,
  953,
  s,
  [960, 7, 1],
  969,
  971,
  972,
  974,
  981,
  982,
  984,
  987,
  s,
  [991, 5, 1],
  997,
  1000,
  1002,
  1003,
  1004,
  s,
  [1006, 5, 1],
  1013,
  1014,
  1019,
  s,
  [1023, 7, 1],
  1031,
  1032,
  1034,
  1037,
  1039,
  1043,
  1045,
  1048,
  s,
  [1050, 5, 1]
]),
  goto: u([
  5,
  8,
  s,
  [10, 9, 1],
  420,
  425,
  426,
  427,
  430,
  431,
  s,
  [250, 8, 1],
  55,
  368,
  377,
  378,
  379,
  s,
  [303, 7, 1],
  261,
  s,
  [67, 8, 1],
  s,
  [226, 4, 1],
  386,
  498,
  499,
  500,
  310,
  311,
  319,
  320,
  345,
  346,
  244,
  245,
  312,
  313,
  38,
  48,
  49,
  54,
  s,
  [75, 13, 1],
  89,
  s,
  [91, 16, 1],
  380,
  107,
  112,
  421,
  423,
  338,
  35,
  363,
  367,
  381,
  36,
  373,
  374,
  375,
  249,
  197,
  246,
  247,
  248,
  129,
  520,
  524,
  526,
  545,
  546,
  501,
  505,
  449,
  108,
  327,
  340,
  335,
  88,
  90,
  230,
  211,
  267,
  270,
  293,
  399,
  405,
  357,
  342,
  343,
  344,
  322,
  325,
  472,
  462,
  463,
  464,
  466,
  315,
  318,
  3,
  57,
  60,
  61,
  109,
  113,
  395,
  114,
  117,
  137,
  138,
  389,
  388,
  266,
  275,
  397,
  402,
  409,
  372,
  111,
  232,
  222,
  175,
  187,
  209,
  214,
  127,
  130,
  21,
  349,
  531,
  536,
  451,
  262,
  263,
  110,
  259,
  339,
  328,
  329,
  331,
  352,
  236,
  295,
  416,
  412,
  418,
  353,
  361,
  321,
  323,
  359,
  467,
  484,
  489,
  314,
  316,
  396,
  123,
  429,
  140,
  142,
  31,
  364,
  25,
  265,
  410,
  330,
  333,
  45,
  47,
  235,
  219,
  172,
  179,
  182,
  184,
  212,
  216,
  128,
  133,
  351,
  350,
  509,
  510,
  519,
  547,
  530,
  521,
  525,
  527,
  534,
  502,
  497,
  450,
  432,
  260,
  237,
  268,
  271,
  281,
  291,
  284,
  290,
  400,
  406,
  419,
  362,
  324,
  473,
  477,
  469,
  490,
  479,
  317,
  198,
  206,
  115,
  118,
  139,
  23,
  32,
  24,
  365,
  394,
  393,
  276,
  296,
  301,
  398,
  403,
  370,
  153,
  154,
  193,
  194,
  195,
  171,
  176,
  178,
  188,
  189,
  181,
  217,
  131,
  136,
  511,
  532,
  523,
  537,
  540,
  543,
  544,
  503,
  434,
  437,
  445,
  264,
  336,
  241,
  272,
  269,
  408,
  474,
  360,
  470,
  482,
  119,
  141,
  28,
  277,
  404,
  155,
  156,
  174,
  132,
  548,
  551,
  553,
  554,
  538,
  541,
  535,
  504,
  433,
  435,
  332,
  337,
  242,
  243,
  273,
  282,
  285,
  288,
  401,
  475,
  468,
  491,
  481,
  480,
  200,
  116,
  366,
  278,
  334,
  147,
  150,
  161,
  173,
  513,
  514,
  516,
  549,
  552,
  533,
  512,
  453,
  438,
  448,
  407,
  471,
  457,
  458,
  494,
  483,
  487,
  120,
  148,
  151,
  160,
  164,
  439,
  436,
  287,
  163,
  518,
  515,
  517,
  440
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack
    var lstack = new Array(128);        // location stack
    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks
    var yyloc;

    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 1057 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };


    // shallow clone objects, straight copy of simple `src` values
    // e.g. `lexer.yytext` MAY be a complex value object,
    // rather than a simple string/value.
    function shallow_copy(src) {
        if (typeof src === 'object') {
            var dst = {};
            for (var k in src) {
                if (Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
            return dst;
        }
        return src;
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }
    function copy_yylloc(loc) {
        var rv = shallow_copy(loc);
        if (rv && rv.range) {
            rv.range = rv.range.slice(0);
        }
        return rv;
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }




        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };

    // merge yylloc info into a new yylloc instance.
    //
    // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
    //
    // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
    // case these override the corresponding first/last indexes.
    //
    // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
    // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
    // yylloc info.
    //
    // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
    this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
        var i1 = first_index | 0,
            i2 = last_index | 0;
        var l1 = first_yylloc,
            l2 = last_yylloc;
        var rv;

        // rules:
        // - first/last yylloc entries override first/last indexes

        if (!l1) {
            if (first_index != null) {
                for (var i = i1; i <= i2; i++) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
        }

        if (!l2) {
            if (last_index != null) {
                for (var i = i2; i >= i1; i--) {
                    l2 = lstack[i];
                    if (l2) {
                        break;
                    }
                }
            }
        }

        // - detect if an epsilon rule is being processed and act accordingly:
        if (!l1 && first_index == null) {
            // epsilon rule span merger. With optional look-ahead in l2.
            if (!dont_look_back) {
                for (var i = (i1 || sp) - 1; i >= 0; i--) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
            if (!l1) {
                if (!l2) {
                    // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                    // without look-ahead and no preceding terms and/or `dont_look_back` set:
                    // in that case we ca do nothing but return NULL/UNDEFINED:
                    return undefined;
                } else {
                    // shallow-copy L2: after all, we MAY be looking
                    // at unconventional yylloc info objects...
                    rv = shallow_copy(l2);
                    if (rv.range) {
                        // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                        rv.range = rv.range.slice(0);
                    }
                    return rv;
                }
            } else {
                // shallow-copy L1, then adjust first col/row 1 column past the end.
                rv = shallow_copy(l1);
                rv.first_line = rv.last_line;
                rv.first_column = rv.last_column;
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                    rv.range[0] = rv.range[1];
                }

                if (l2) {
                    // shallow-mixin L2, then adjust last col/row accordingly.
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }
                return rv;
            }
        }

        if (!l1) {
            l1 = l2;
            l2 = null;
        }
        if (!l1) {
            return undefined;
        }

        // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
        // at unconventional yylloc info objects...
        rv = shallow_copy(l1);

        // first_line: ...,
        // first_column: ...,
        // last_line: ...,
        // last_column: ...,
        if (rv.range) {
            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
            rv.range = rv.range.slice(0);
        }

        if (l2) {
            shallow_copy_noclobber(rv, l2);
            rv.last_line = l2.last_line;
            rv.last_column = l2.last_column;
            if (rv.range && l2.range) {
                rv.range[1] = l2.range[1];
            }
        }

        return rv;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: copy_yylloc(lexer.yylloc),
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;




    lexer.setInput(input, sharedState_yy);

    // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
    // this initial `setInput()` call: hence we can now check and decide
    // whether we'll go with the standard, slower, lex() API or the
    // `fast_lex()` one:
    if (typeof lexer.canIUse === 'function') {
        var lexerInfo = lexer.canIUse();
        if (lexerInfo.fastLex && typeof fastLex === 'function') {
            lex = fastLex;
        }
    } 

    yyloc = lexer.yylloc;
    lstack[sp] = yyloc;
    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;





    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState_yy);
    }
    if (sharedState_yy.pre_parse) {
        sharedState_yy.pre_parse.call(this, sharedState_yy);
    }

    newState = sstack[sp - 1];
    for (;;) {
        // retrieve state number from top of stack
        state = newState;               // sstack[sp - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = 2;
            newState = this.defaultActions[state];
        } else {
            // The single `==` condition below covers both these `===` comparisons in a single
            // operation:
            //
            //     if (symbol === null || typeof symbol === 'undefined') ...
            if (!symbol) {
                symbol = lex();
            }
            // read action for current state and first input
            t = (table[state] && table[state][symbol]) || NO_ACTION;
            newState = t[1];
            action = t[0];











            // handle parse error
            if (!action) {
                var errStr;
                var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                var expected = this.collect_expected_token_set(state);

                // Report error
                if (typeof lexer.yylineno === 'number') {
                    errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                } else {
                    errStr = 'Parse error: ';
                }
                if (typeof lexer.showPosition === 'function') {
                    errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                }
                if (expected.length) {
                    errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                } else {
                    errStr += 'Unexpected ' + errSymbolDescr;
                }
                // we cannot recover from the error!
                p = this.constructParseErrorInfo(errStr, null, expected, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }


        }










        switch (action) {
        // catch misc. parse failures:
        default:
            // this shouldn't happen, unless resolve defaults are off
            if (action instanceof Array) {
                p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }
            // Another case of better safe than sorry: in case state transitions come out of another error recovery process
            // or a buggy LUT (LookUp Table):
            p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') {
                retval = r;
            }
            break;

        // shift:
        case 1:
            stack[sp] = symbol;
            vstack[sp] = lexer.yytext;
            lstack[sp] = copy_yylloc(lexer.yylloc);
            sstack[sp] = newState; // push state

            ++sp;
            symbol = 0;




            // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:



            yyloc = lexer.yylloc;
            continue;

        // reduce:
        case 2:



            this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
            yyrulelen = this_production[1];










            r = this.performAction.call(yyval, yyloc, newState, sp - 1, vstack, lstack);

            if (typeof r !== 'undefined') {
                retval = r;
                break;
            }

            // pop off stack
            sp -= yyrulelen;

            // don't overwrite the `symbol` variable: use a local var to speed things up:
            var ntsymbol = this_production[0];    // push nonterminal (reduce)
            stack[sp] = ntsymbol;
            vstack[sp] = yyval.$;
            lstack[sp] = yyval._$;
            // goto new state = table[STATE][NONTERMINAL]
            newState = table[sstack[sp - 1]][ntsymbol];
            sstack[sp] = newState;
            ++sp;









            continue;

        // accept:
        case 3:
            if (sp !== -2) {
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                sp--;
                if (typeof vstack[sp] !== 'undefined') {
                    retval = vstack[sp];
                }
            }
            break;
        }

        // break out of loop: we accept or fail with error
        break;
    }
    
    // ... AND FINALLY ...

    retval = this.cleanupAfterParse(retval, true, true);


    

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;



function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = Elysion;
  exports.Parser = Elysion.Parser;
  exports.parse = function () {
    return Elysion.parse.apply(Elysion, arguments);
  };
  
}
