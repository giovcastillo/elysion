
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var Elysion = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... true
    //   assigns location: ................ true
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... true
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 7,
  "!=": 64,
  "!==": 62,
  "$accept": 0,
  "$end": 1,
  "%": 9,
  "&": 14,
  "&&": 71,
  "(": 21,
  ")": 22,
  ")>": 135,
  "*": 8,
  "**": 55,
  "+": 4,
  "++": 51,
  ",": 15,
  "-": 5,
  "--": 52,
  ".": 23,
  "...": 77,
  ":": 20,
  "::": 27,
  ";": 18,
  "<": 12,
  "<(": 134,
  "<<": 58,
  "<=": 66,
  "==": 63,
  "===": 61,
  ">": 11,
  ">=": 65,
  ">>": 59,
  ">>>": 60,
  "?": 19,
  "??": 72,
  "@": 3,
  "AND": 68,
  "ARGUMENT": 142,
  "AS": 139,
  "ASYNC": 33,
  "AT": 140,
  "AWAIT": 37,
  "Access": 243,
  "AlphaNum": 219,
  "Arg": 179,
  "ArgList": 178,
  "Arguments": 177,
  "Array": 245,
  "ArrayArg": 249,
  "ArrayList": 247,
  "Assign": 236,
  "AssignKeyword": 238,
  "Assignable": 239,
  "Assignment": 237,
  "BOOL": 121,
  "BREAK": 92,
  "Block": 183,
  "BlockExpression": 195,
  "Body": 160,
  "CALL_END": 76,
  "CALL_START": 75,
  "CASE": 94,
  "CATCH": 103,
  "CHAIN": 45,
  "CLASS": 78,
  "COMPOUND_AND": 50,
  "COMPOUND_OR": 93,
  "CONST": 153,
  "CONTINUE": 145,
  "Case": 190,
  "Cases": 189,
  "Catch": 199,
  "Class": 181,
  "ClassConstructor?": 182,
  "Clause": 170,
  "Clauses": 191,
  "Code": 164,
  "Compare": 174,
  "DEFAULT": 90,
  "DEFAULTS": 118,
  "DIVISION": 57,
  "DO": 34,
  "Declaration": 274,
  "DeclarationKeyword": 272,
  "Declarations": 273,
  "Declare": 271,
  "EITHER": 46,
  "EITHER_OR": 49,
  "ELSE": 110,
  "EOF": 1,
  "EXISTS": 41,
  "EXPORT": 157,
  "EXTENDS": 79,
  "Else": 203,
  "ElseOtherwise": 206,
  "Export": 278,
  "ExportList": 281,
  "ExportName": 283,
  "ExportNames": 282,
  "Exportable": 284,
  "Expression": 162,
  "FINALLY": 102,
  "FOR": 83,
  "FOR_AS": 98,
  "FOR_AT": 97,
  "FOR_FROM": 96,
  "FOR_IN": 87,
  "FOR_OF": 86,
  "FROM": 141,
  "FUNCTION": 133,
  "FUNC_DIRECTIVE": 28,
  "FUNC_EXISTS": 74,
  "Finally": 198,
  "For": 186,
  "ForAny": 193,
  "ForAssignable": 187,
  "ForExpression": 184,
  "FuncBody": 229,
  "FuncHeader": 231,
  "FuncSpecifiers": 230,
  "Function": 228,
  "GET": 137,
  "IDENTIFIER": 144,
  "IF": 95,
  "IMPORT": 156,
  "IN": 143,
  "INCLUDES": 43,
  "INDENT": 38,
  "INDEX_END": 116,
  "INDEX_START": 115,
  "INFINITY": 120,
  "INSTANCEOF": 67,
  "INTERFACE": 147,
  "INTERPOLATION_END": 129,
  "INTERPOLATION_START": 128,
  "IS": 47,
  "ISNT": 48,
  "Identifier": 241,
  "Identifier?": 258,
  "If": 194,
  "IfBlock": 204,
  "IfUnless": 205,
  "Import": 276,
  "Import(FROM)": 277,
  "ImportList": 280,
  "ImportName": 286,
  "ImportNames": 285,
  "Interface": 253,
  "InterfaceBody": 254,
  "InterfaceKeyword?": 257,
  "InterfaceProperties": 255,
  "InterfaceProperty": 256,
  "Interpolation": 223,
  "Interpolations": 222,
  "Invocation": 176,
  "JointExpression": 185,
  "LET": 152,
  "LOOP": 108,
  "Label": 163,
  "Line": 161,
  "Literal": 218,
  "Logical": 175,
  "Loop": 202,
  "MATH_BIN": 44,
  "MathPostfix": 172,
  "MathPrefix": 171,
  "Multicheck": 166,
  "MulticheckClauses": 169,
  "MulticheckCombinations": 168,
  "Multicondition": 167,
  "NAN": 123,
  "NEW": 113,
  "NEWLINE": 26,
  "NOT": 54,
  "NULL": 122,
  "NUMBER": 124,
  "New": 208,
  "OR": 69,
  "OTHERWISE": 111,
  "OUDENT": 158,
  "OUTDENT": 39,
  "Object": 213,
  "Operation": 165,
  "Operator": 173,
  "OptComma": 180,
  "OptDefault": 279,
  "OptVoids": 250,
  "PARAM_END": 31,
  "PARAM_START": 30,
  "PLUS": 56,
  "POSTCASE": 91,
  "POSTFOR": 88,
  "POSTIF": 99,
  "POSTUNLESS": 100,
  "POSTUNTIL": 107,
  "POSTWHILE": 106,
  "PROPERTY": 114,
  "Param": 235,
  "ParamArray": 244,
  "ParamArrayArg": 248,
  "ParamArrayList": 246,
  "ParamAssignable": 240,
  "ParamIdentifier": 242,
  "ParamList": 234,
  "ParamObject": 212,
  "ParamPropList": 215,
  "ParamPropObj": 217,
  "Params": 233,
  "Parenthetical": 211,
  "PropList": 214,
  "PropObj": 216,
  "READONLY": 148,
  "REGEX": 130,
  "REGEX_END": 132,
  "REGEX_START": 131,
  "RETURN": 155,
  "Regex": 224,
  "RegexInterpolation": 227,
  "RegexInterpolations": 226,
  "RegexWithInterpolations": 225,
  "Return": 275,
  "Root": 159,
  "SET": 138,
  "STATIC": 136,
  "STRING": 125,
  "STRING_END": 127,
  "STRING_START": 126,
  "SUCH": 112,
  "SUPER": 73,
  "SWITCH": 89,
  "SYMBOL_EXISTS": 42,
  "Statement": 252,
  "String": 220,
  "StringWithInterpolations": 221,
  "Super": 209,
  "Switch": 188,
  "TAG": 150,
  "THEN": 32,
  "THIS": 117,
  "THROW": 146,
  "TRY": 101,
  "TYPE": 149,
  "TYPEOF": 36,
  "This": 210,
  "Try": 197,
  "TryBlock": 196,
  "Type": 259,
  "TypeArgument": 265,
  "TypeArguments": 264,
  "TypeArguments?": 232,
  "TypeArray": 269,
  "TypeArrayItems": 270,
  "TypeDeclaration": 260,
  "TypeObjProp": 268,
  "TypeObjProps": 267,
  "TypeObject": 266,
  "TypeSentence": 261,
  "TypeValue": 262,
  "TypeWithArguments": 263,
  "UNDEFINED": 119,
  "UNLESS": 109,
  "UNTIL": 105,
  "VAR": 151,
  "VARIDENTIFIER": 154,
  "Value": 207,
  "Voids": 251,
  "WHEN": 84,
  "WHETHER": 35,
  "WHILE": 104,
  "WHILST": 85,
  "WITH": 80,
  "WITHIN": 29,
  "When": 192,
  "While": 200,
  "WhileUntil": 201,
  "YIELD": 40,
  "[": 24,
  "]": 25,
  "^": 10,
  "error": 2,
  "{": 16,
  "{{": 81,
  "|": 13,
  "||": 70,
  "}": 17,
  "}}": 82,
  "~": 6,
  "~~": 53
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "@",
  4: "+",
  5: "-",
  6: "~",
  7: "!",
  8: "*",
  9: "%",
  10: "^",
  11: ">",
  12: "<",
  13: "|",
  14: "&",
  15: ",",
  16: "{",
  17: "}",
  18: ";",
  19: "?",
  20: ":",
  21: "(",
  22: ")",
  23: ".",
  24: "[",
  25: "]",
  26: "NEWLINE",
  27: "::",
  28: "FUNC_DIRECTIVE",
  29: "WITHIN",
  30: "PARAM_START",
  31: "PARAM_END",
  32: "THEN",
  33: "ASYNC",
  34: "DO",
  35: "WHETHER",
  36: "TYPEOF",
  37: "AWAIT",
  38: "INDENT",
  39: "OUTDENT",
  40: "YIELD",
  41: "EXISTS",
  42: "SYMBOL_EXISTS",
  43: "INCLUDES",
  44: "MATH_BIN",
  45: "CHAIN",
  46: "EITHER",
  47: "IS",
  48: "ISNT",
  49: "EITHER_OR",
  50: "COMPOUND_AND",
  51: "++",
  52: "--",
  53: "~~",
  54: "NOT",
  55: "**",
  56: "PLUS",
  57: "DIVISION",
  58: "<<",
  59: ">>",
  60: ">>>",
  61: "===",
  62: "!==",
  63: "==",
  64: "!=",
  65: ">=",
  66: "<=",
  67: "INSTANCEOF",
  68: "AND",
  69: "OR",
  70: "||",
  71: "&&",
  72: "??",
  73: "SUPER",
  74: "FUNC_EXISTS",
  75: "CALL_START",
  76: "CALL_END",
  77: "...",
  78: "CLASS",
  79: "EXTENDS",
  80: "WITH",
  81: "{{",
  82: "}}",
  83: "FOR",
  84: "WHEN",
  85: "WHILST",
  86: "FOR_OF",
  87: "FOR_IN",
  88: "POSTFOR",
  89: "SWITCH",
  90: "DEFAULT",
  91: "POSTCASE",
  92: "BREAK",
  93: "COMPOUND_OR",
  94: "CASE",
  95: "IF",
  96: "FOR_FROM",
  97: "FOR_AT",
  98: "FOR_AS",
  99: "POSTIF",
  100: "POSTUNLESS",
  101: "TRY",
  102: "FINALLY",
  103: "CATCH",
  104: "WHILE",
  105: "UNTIL",
  106: "POSTWHILE",
  107: "POSTUNTIL",
  108: "LOOP",
  109: "UNLESS",
  110: "ELSE",
  111: "OTHERWISE",
  112: "SUCH",
  113: "NEW",
  114: "PROPERTY",
  115: "INDEX_START",
  116: "INDEX_END",
  117: "THIS",
  118: "DEFAULTS",
  119: "UNDEFINED",
  120: "INFINITY",
  121: "BOOL",
  122: "NULL",
  123: "NAN",
  124: "NUMBER",
  125: "STRING",
  126: "STRING_START",
  127: "STRING_END",
  128: "INTERPOLATION_START",
  129: "INTERPOLATION_END",
  130: "REGEX",
  131: "REGEX_START",
  132: "REGEX_END",
  133: "FUNCTION",
  134: "<(",
  135: ")>",
  136: "STATIC",
  137: "GET",
  138: "SET",
  139: "AS",
  140: "AT",
  141: "FROM",
  142: "ARGUMENT",
  143: "IN",
  144: "IDENTIFIER",
  145: "CONTINUE",
  146: "THROW",
  147: "INTERFACE",
  148: "READONLY",
  149: "TYPE",
  150: "TAG",
  151: "VAR",
  152: "LET",
  153: "CONST",
  154: "VARIDENTIFIER",
  155: "RETURN",
  156: "IMPORT",
  157: "EXPORT",
  158: "OUDENT"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,



    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  159,
  159,
  s,
  [160, 3],
  161,
  161,
  s,
  [162, 11],
  s,
  [163, 3],
  s,
  [164, 15],
  s,
  [165, 21],
  166,
  167,
  168,
  168,
  169,
  169,
  s,
  [170, 3],
  s,
  [171, 8],
  172,
  172,
  s,
  [173, 11],
  s,
  [174, 11],
  s,
  [175, 7],
  s,
  [176, 7],
  s,
  [177, 3],
  s,
  [178, 4],
  s,
  [179, 3],
  180,
  180,
  s,
  [181, 11],
  s,
  [182, 3],
  s,
  [183, 6],
  184,
  184,
  185,
  185,
  s,
  [186, 22],
  187,
  187,
  s,
  [188, 4],
  189,
  189,
  s,
  [190, 10],
  s,
  [191, 3],
  s,
  [192, 3],
  s,
  [193, 3],
  s,
  [194, 9],
  195,
  195,
  s,
  [196, 3],
  197,
  197,
  198,
  198,
  s,
  [199, 5],
  s,
  [200, 7],
  s,
  [201, 4],
  202,
  202,
  s,
  [203, 4],
  s,
  [204, 8],
  205,
  205,
  s,
  [206, 3],
  s,
  [207, 9],
  208,
  209,
  209,
  210,
  s,
  [211, 3],
  212,
  212,
  s,
  [213, 3],
  s,
  [214, 4],
  s,
  [215, 5],
  s,
  [216, 17],
  s,
  [217, 8],
  s,
  [218, 7],
  219,
  219,
  220,
  220,
  221,
  222,
  222,
  223,
  223,
  224,
  224,
  225,
  226,
  226,
  227,
  227,
  s,
  [228, 15],
  s,
  [229, 3],
  s,
  [230, 7],
  s,
  [231, 9],
  s,
  [232, 3],
  233,
  233,
  s,
  [234, 4],
  235,
  236,
  s,
  [237, 4],
  s,
  [238, 3],
  s,
  [239, 6],
  s,
  [240, 5],
  241,
  s,
  [242, 9],
  243,
  243,
  244,
  244,
  s,
  [245, 3],
  s,
  [246, 3],
  s,
  [247, 4],
  248,
  248,
  s,
  [249, 4],
  250,
  250,
  s,
  [251, 3],
  s,
  [252, 12],
  253,
  253,
  s,
  [254, 3],
  s,
  [255, 4],
  s,
  [256, 3],
  s,
  [257, 3],
  258,
  258,
  s,
  [259, 3],
  s,
  [260, 3],
  s,
  [261, 7],
  s,
  [262, 6],
  s,
  [263, 4],
  s,
  [264, 4],
  s,
  [265, 3],
  266,
  266,
  s,
  [267, 4],
  s,
  [268, 5],
  269,
  269,
  s,
  [270, 4],
  271,
  271,
  s,
  [272, 3],
  s,
  [273, 4],
  274,
  274,
  s,
  [275, 4],
  s,
  [276, 8],
  277,
  s,
  [278, 8],
  s,
  [279, 3],
  s,
  [280, 3],
  281,
  281,
  s,
  [282, 3],
  s,
  [283, 6],
  284,
  284,
  s,
  [285, 3],
  s,
  [286, 6]
]),
  rule: u([
  0,
  1,
  3,
  2,
  s,
  [1, 14],
  s,
  [3, 3],
  2,
  5,
  5,
  4,
  5,
  4,
  6,
  5,
  6,
  c,
  [6, 3],
  5,
  s,
  [2, 4],
  3,
  s,
  [2, 5],
  4,
  2,
  4,
  c,
  [11, 3],
  c,
  [32, 4],
  c,
  [37, 3],
  c,
  [23, 5],
  1,
  4,
  1,
  c,
  [62, 15],
  s,
  [1, 25],
  c,
  [58, 4],
  c,
  [73, 4],
  4,
  6,
  1,
  3,
  c,
  [4, 3],
  2,
  2,
  c,
  [122, 3],
  4,
  5,
  c,
  [11, 3],
  7,
  c,
  [109, 3],
  6,
  0,
  2,
  c,
  [18, 3],
  4,
  3,
  5,
  3,
  c,
  [129, 4],
  7,
  8,
  8,
  c,
  [3, 3],
  5,
  5,
  s,
  [6, 4],
  c,
  [11, 3],
  9,
  9,
  c,
  [13, 4],
  7,
  2,
  1,
  5,
  4,
  7,
  c,
  [61, 3],
  c,
  [71, 3],
  c,
  [126, 5],
  c,
  [43, 3],
  c,
  [8, 5],
  c,
  [93, 5],
  5,
  3,
  7,
  s,
  [3, 4],
  1,
  3,
  1,
  c,
  [172, 7],
  2,
  3,
  s,
  [4, 4],
  5,
  3,
  3,
  4,
  c,
  [83, 4],
  c,
  [93, 3],
  c,
  [19, 4],
  c,
  [20, 3],
  c,
  [209, 3],
  6,
  6,
  c,
  [154, 15],
  3,
  4,
  c,
  [74, 3],
  5,
  c,
  [56, 3],
  4,
  5,
  c,
  [148, 4],
  c,
  [153, 5],
  c,
  [18, 5],
  3,
  c,
  [119, 3],
  5,
  c,
  [55, 3],
  c,
  [190, 5],
  2,
  c,
  [236, 3],
  c,
  [99, 4],
  c,
  [298, 11],
  c,
  [17, 3],
  c,
  [7, 9],
  c,
  [94, 4],
  3,
  6,
  4,
  7,
  2,
  5,
  6,
  c,
  [319, 3],
  c,
  [207, 4],
  c,
  [155, 6],
  c,
  [116, 3],
  c,
  [178, 6],
  0,
  3,
  c,
  [75, 3],
  c,
  [252, 5],
  1,
  3,
  5,
  c,
  [150, 6],
  c,
  [125, 5],
  c,
  [65, 4],
  c,
  [98, 6],
  c,
  [23, 3],
  c,
  [100, 4],
  c,
  [360, 4],
  c,
  [293, 4],
  1,
  c,
  [79, 3],
  c,
  [71, 4],
  1,
  c,
  [299, 3],
  c,
  [40, 4],
  c,
  [9, 3],
  c,
  [50, 5],
  4,
  1,
  1,
  4,
  6,
  2,
  3,
  c,
  [172, 5],
  6,
  3,
  4,
  c,
  [29, 3],
  0,
  c,
  [21, 3],
  c,
  [89, 3],
  c,
  [177, 5],
  c,
  [67, 3],
  s,
  [1, 6],
  c,
  [348, 4],
  c,
  [202, 6],
  c,
  [112, 5],
  c,
  [47, 5],
  c,
  [441, 3],
  5,
  1,
  c,
  [278, 3],
  c,
  [68, 4],
  c,
  [155, 4],
  5,
  c,
  [80, 5],
  4,
  5,
  s,
  [7, 3],
  9,
  c,
  [360, 3],
  c,
  [71, 4],
  5,
  c,
  [127, 4],
  0,
  c,
  [170, 4],
  5,
  c,
  [52, 5],
  c,
  [286, 6],
  c,
  [46, 5],
  c,
  [11, 3],
  c,
  [10, 3]
])
}),
performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyvstack, yylstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : Root $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 1];
    this._$ = yylstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
    break;

case 1:
    /*! Production::    Root : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    return this.$ = Object.assign(new yy["Root"]("", ...['EMPTY']), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["", yylstack[yysp]])
    break;

case 2:
    /*! Production::    Root : Body */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    return this.$ = new yy["Root"]("Body", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Body", yylstack[yysp - 1]])
    break;

case 3:
    /*! Production::    Body : Body NEWLINE Line */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-):
    this.$ = yyvstack[yysp - 2];
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,LT,LA,-,-)
    
    
    (yyvstack[yysp - 2][1] = [...yyvstack[yysp - 2][1], Object.assign(yyvstack[yysp], { lineCount: yyvstack[yysp - 1] })]) && Object.assign(yyvstack[yysp - 2], { loc: { first_line: yylstack[yysp - 2].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 2].first_column, last_column: yylstack[yysp].last_column } })
    break;

case 4:
    /*! Production::    Body : Body NEWLINE */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(yyvstack[yysp - 1][1][yyvstack[yysp - 1][1].length - 1], { lineCount: yyvstack[yysp] }) && Object.assign(yyvstack[yysp - 1], { loc: { first_line: yylstack[yysp - 1].first_line, last_line: yylstack[yysp].last_line, first_column: yylstack[yysp - 1].first_column, last_column: yylstack[yysp].last_column } })
    break;

case 5:
    /*! Production::    Body : Line */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Body"]("Line", ...[[yyvstack[yysp]]]), { rule: "Line", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Line", yylstack[yysp]])
    break;

case 6:
    /*! Production::    Line : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Line"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 7:
    /*! Production::    Line : Statement */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Line"]("Statement", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Statement", yylstack[yysp - 1]])
    break;

case 8:
    /*! Production::    Expression : Value */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Value", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Value", yylstack[yysp - 1]])
    break;

case 9:
    /*! Production::    Expression : Operation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Operation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Operation", yylstack[yysp - 1]])
    break;

case 10:
    /*! Production::    Expression : While */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("While", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["While", yylstack[yysp - 1]])
    break;

case 11:
    /*! Production::    Expression : For */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("For", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["For", yylstack[yysp - 1]])
    break;

case 12:
    /*! Production::    Expression : Switch */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Switch", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Switch", yylstack[yysp - 1]])
    break;

case 13:
    /*! Production::    Expression : TryBlock */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("TryBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TryBlock", yylstack[yysp - 1]])
    break;

case 14:
    /*! Production::    Expression : Assign */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Assign", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Assign", yylstack[yysp - 1]])
    break;

case 15:
    /*! Production::    Expression : If */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("If", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["If", yylstack[yysp - 1]])
    break;

case 16:
    /*! Production::    Expression : Class */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Class", yylstack[yysp - 1]])
    break;

case 17:
    /*! Production::    Expression : Label */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Label", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Label", yylstack[yysp - 1]])
    break;

case 18:
    /*! Production::    Expression : Code */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Expression"]("Code", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Code", yylstack[yysp - 1]])
    break;

case 19:
    /*! Production::    Label : Identifier "::" Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("Identifier :: Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Identifier :: Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["::", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 20:
    /*! Production::    Label : Identifier "::" Statement */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("Identifier :: Statement", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Identifier :: Statement", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["::", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 21:
    /*! Production::    Label : Identifier "::" Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Label"]("Identifier :: Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier :: Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["::", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 22:
    /*! Production::    Code : FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 23:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Block", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["ParamList", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 24:
    /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 25:
    /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Block", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 26:
    /*! Production::    Code : PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START ParamList PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 27:
    /*! Production::    Code : PARAM_START PARAM_END FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("PARAM_START PARAM_END FUNC_DIRECTIVE Expression", ...[null, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "PARAM_START PARAM_END FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 28:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Block", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp - 1]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 5]], ["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 29:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END Expression", ...[yyvstack[yysp - 2], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["ParamList", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 30:
    /*! Production::    Code : WITHIN PARAM_START ParamList PARAM_END THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START ParamList PARAM_END THEN Expression", ...[yyvstack[yysp - 3], '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START ParamList PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 5]], ["PARAM_START", yylstack[yysp - 4]], ["ParamList", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 31:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 3]], ["PARAM_START", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 32:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 33:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 3]], ["PARAM_START", yylstack[yysp - 2]], ["PARAM_END", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 34:
    /*! Production::    Code : WITHIN PARAM_START PARAM_END THEN Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN PARAM_START PARAM_END THEN Expression", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN PARAM_START PARAM_END THEN Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 4]], ["PARAM_START", yylstack[yysp - 3]], ["PARAM_END", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 35:
    /*! Production::    Code : WITHIN Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("WITHIN Block", ...[null, '=>', yyvstack[yysp]]), { rule: "WITHIN Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITHIN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 36:
    /*! Production::    Code : ASYNC Code */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Code"]("ASYNC Code", ...[...yyvstack[yysp].contents]), { rule: "ASYNC Code", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"async":true}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp - 1]], ["Code", yylstack[yysp]])
    break;

case 37:
    /*! Production::    Operation : MathPrefix Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("MathPrefix Expression", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "MathPrefix Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["MathPrefix", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 38:
    /*! Production::    Operation : Expression MathPostfix */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression MathPostfix", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MathPostfix", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["MathPostfix", yylstack[yysp]])
    break;

case 39:
    /*! Production::    Operation : Expression Operator Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Operator Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Operator Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["Operator", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 40:
    /*! Production::    Operation : "@" Value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("@ Value", ...[yyvstack[yysp]]), { rule: "@ Value", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["@", yylstack[yysp - 1]], ["Value", yylstack[yysp]])
    break;

case 41:
    /*! Production::    Operation : DO Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("DO Expression", ...[yyvstack[yysp]]), { rule: "DO Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DO", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 42:
    /*! Production::    Operation : WHETHER Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("WHETHER Expression", ...[yyvstack[yysp]]), { rule: "WHETHER Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WHETHER", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 43:
    /*! Production::    Operation : TYPEOF Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("TYPEOF Expression", ...[yyvstack[yysp]]), { rule: "TYPEOF Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPEOF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 44:
    /*! Production::    Operation : AWAIT Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("AWAIT Expression", ...[yyvstack[yysp]]), { rule: "AWAIT Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["AWAIT", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 45:
    /*! Production::    Operation : AWAIT INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("AWAIT INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "AWAIT INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["AWAIT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 46:
    /*! Production::    Operation : YIELD Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("YIELD Expression", ...[yyvstack[yysp]]), { rule: "YIELD Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["YIELD", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 47:
    /*! Production::    Operation : YIELD INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("YIELD INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "YIELD INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["YIELD", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 48:
    /*! Production::    Operation : Expression EXISTS */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression EXISTS", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["EXISTS", yylstack[yysp]])
    break;

case 49:
    /*! Production::    Operation : Expression SYMBOL_EXISTS */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression SYMBOL_EXISTS", ...[yyvstack[yysp - 1]]), { rule: "Expression SYMBOL_EXISTS", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["SYMBOL_EXISTS", yylstack[yysp]])
    break;

case 50:
    /*! Production::    Operation : Expression Compare Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Compare Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Compare Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["Compare", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 51:
    /*! Production::    Operation : Expression Logical Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Logical Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression Logical Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["Logical", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 52:
    /*! Production::    Operation : Expression INCLUDES Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression INCLUDES Expression", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Expression INCLUDES Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["INCLUDES", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 53:
    /*! Production::    Operation : Expression MATH_BIN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression MATH_BIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Expression MATH_BIN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["MATH_BIN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 54:
    /*! Production::    Operation : Expression Multicheck */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression Multicheck", ...[yyvstack[yysp - 1], yyvstack[yysp].contents]), { rule: "Expression Multicheck", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["Multicheck", yylstack[yysp]])
    break;

case 55:
    /*! Production::    Operation : Multicondition */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Multicondition", ...[null, yyvstack[yysp].contents]), { rule: "Multicondition", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp]])
    break;

case 56:
    /*! Production::    Operation : Expression CHAIN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["CHAIN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 57:
    /*! Production::    Operation : Expression CHAIN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Operation"]("Expression CHAIN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], /then\?|\?>/.test(yyvstack[yysp - 1].origin || '')]), { rule: "Expression CHAIN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["CHAIN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 58:
    /*! Production::    Multicheck : MulticheckCombinations MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Multicheck"]("MulticheckCombinations MulticheckClauses", ...[yyvstack[yysp - 1].rule, yyvstack[yysp]]), { rule: "MulticheckCombinations MulticheckClauses", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["MulticheckCombinations", yylstack[yysp - 1]], ["MulticheckClauses", yylstack[yysp]])
    break;

case 59:
    /*! Production::    Multicondition : EITHER MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Multicondition"]("EITHER MulticheckClauses", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "EITHER MulticheckClauses", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EITHER", yylstack[yysp - 1]], ["MulticheckClauses", yylstack[yysp]])
    break;

case 60:
    /*! Production::    MulticheckCombinations : IS EITHER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MulticheckCombinations"]("IS EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type }).setTokens(["IS", yylstack[yysp - 2]], ["EITHER", yylstack[yysp - 1]])
    break;

case 61:
    /*! Production::    MulticheckCombinations : ISNT EITHER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MulticheckCombinations"]("ISNT EITHER", ...[yyvstack[yysp - 1]]).setLocation({ first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type }).setTokens(["ISNT", yylstack[yysp - 2]], ["EITHER", yylstack[yysp - 1]])
    break;

case 62:
    /*! Production::    MulticheckClauses : MulticheckClauses EITHER_OR Clause */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["MulticheckClauses"]("MulticheckClauses EITHER_OR Clause", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "MulticheckClauses EITHER_OR Clause", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["MulticheckClauses", yylstack[yysp - 2]], ["EITHER_OR", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 63:
    /*! Production::    MulticheckClauses : Clause */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["MulticheckClauses"]("Clause", ...[yyvstack[yysp]]), { rule: "Clause", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clause", yylstack[yysp]])
    break;

case 64:
    /*! Production::    Clause : Clause COMPOUND_AND Compare Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Clause COMPOUND_AND Compare Expression", ...[...yyvstack[yysp - 3].contents, [yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Clause COMPOUND_AND Compare Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clause", yylstack[yysp - 3]], ["COMPOUND_AND", yylstack[yysp - 2]], ["Compare", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 65:
    /*! Production::    Clause : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Expression", ...[[yyvstack[yysp]]]), { rule: "Expression", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp]])
    break;

case 66:
    /*! Production::    Clause : Compare Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clause"]("Compare Expression", ...[[yyvstack[yysp], yyvstack[yysp - 1]]]), { rule: "Compare Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Compare", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 67:
    /*! Production::    MathPrefix : "++" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["++", yylstack[yysp - 1]])
    break;

case 68:
    /*! Production::    MathPrefix : "--" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["--", yylstack[yysp - 1]])
    break;

case 69:
    /*! Production::    MathPrefix : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["+", yylstack[yysp - 1]])
    break;

case 70:
    /*! Production::    MathPrefix : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["-", yylstack[yysp - 1]])
    break;

case 71:
    /*! Production::    MathPrefix : "~" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["~", yylstack[yysp - 1]])
    break;

case 72:
    /*! Production::    MathPrefix : "~~" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("~~", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["~~", yylstack[yysp - 1]])
    break;

case 73:
    /*! Production::    MathPrefix : NOT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("NOT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["NOT", yylstack[yysp - 1]])
    break;

case 74:
    /*! Production::    MathPrefix : "!" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPrefix"]("!", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["!", yylstack[yysp - 1]])
    break;

case 75:
    /*! Production::    MathPostfix : "++" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPostfix"]("++", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["++", yylstack[yysp - 1]])
    break;

case 76:
    /*! Production::    MathPostfix : "--" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["MathPostfix"]("--", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["--", yylstack[yysp - 1]])
    break;

case 77:
    /*! Production::    Operator : "*" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("*", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["*", yylstack[yysp - 1]])
    break;

case 78:
    /*! Production::    Operator : "**" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("**", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["**", yylstack[yysp - 1]])
    break;

case 79:
    /*! Production::    Operator : "+" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("+", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["+", yylstack[yysp - 1]])
    break;

case 80:
    /*! Production::    Operator : PLUS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("PLUS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["PLUS", yylstack[yysp - 1]])
    break;

case 81:
    /*! Production::    Operator : "-" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("-", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["-", yylstack[yysp - 1]])
    break;

case 82:
    /*! Production::    Operator : DIVISION */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("DIVISION", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["DIVISION", yylstack[yysp - 1]])
    break;

case 83:
    /*! Production::    Operator : "%" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("%", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["%", yylstack[yysp - 1]])
    break;

case 84:
    /*! Production::    Operator : "<<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("<<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["<<", yylstack[yysp - 1]])
    break;

case 85:
    /*! Production::    Operator : ">>" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"](">>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens([">>", yylstack[yysp - 1]])
    break;

case 86:
    /*! Production::    Operator : ">>>" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"](">>>", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens([">>>", yylstack[yysp - 1]])
    break;

case 87:
    /*! Production::    Operator : "^" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Operator"]("^", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["^", yylstack[yysp - 1]])
    break;

case 88:
    /*! Production::    Compare : IS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("IS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["IS", yylstack[yysp - 1]])
    break;

case 89:
    /*! Production::    Compare : "===" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("===", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["===", yylstack[yysp - 1]])
    break;

case 90:
    /*! Production::    Compare : ISNT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("ISNT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ISNT", yylstack[yysp - 1]])
    break;

case 91:
    /*! Production::    Compare : "!==" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("!==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["!==", yylstack[yysp - 1]])
    break;

case 92:
    /*! Production::    Compare : "==" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("==", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["==", yylstack[yysp - 1]])
    break;

case 93:
    /*! Production::    Compare : "!=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("!=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["!=", yylstack[yysp - 1]])
    break;

case 94:
    /*! Production::    Compare : ">=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"](">=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens([">=", yylstack[yysp - 1]])
    break;

case 95:
    /*! Production::    Compare : "<=" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("<=", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["<=", yylstack[yysp - 1]])
    break;

case 96:
    /*! Production::    Compare : ">" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"](">", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens([">", yylstack[yysp - 1]])
    break;

case 97:
    /*! Production::    Compare : "<" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("<", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["<", yylstack[yysp - 1]])
    break;

case 98:
    /*! Production::    Compare : INSTANCEOF */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Compare"]("INSTANCEOF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["INSTANCEOF", yylstack[yysp - 1]])
    break;

case 99:
    /*! Production::    Logical : AND */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("AND", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["AND", yylstack[yysp - 1]])
    break;

case 100:
    /*! Production::    Logical : OR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["OR", yylstack[yysp - 1]])
    break;

case 101:
    /*! Production::    Logical : "||" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("||", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["||", yylstack[yysp - 1]])
    break;

case 102:
    /*! Production::    Logical : "&&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("&&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["&&", yylstack[yysp - 1]])
    break;

case 103:
    /*! Production::    Logical : "|" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("|", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["|", yylstack[yysp - 1]])
    break;

case 104:
    /*! Production::    Logical : "&" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("&", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["&", yylstack[yysp - 1]])
    break;

case 105:
    /*! Production::    Logical : "??" */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Logical"]("??", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["??", yylstack[yysp - 1]])
    break;

case 106:
    /*! Production::    Invocation : Value Arguments */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Arguments", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 107:
    /*! Production::    Invocation : SUPER Arguments */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER Arguments", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "SUPER Arguments", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 108:
    /*! Production::    Invocation : Value FUNC_EXISTS Arguments */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Value FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 2]], ["FUNC_EXISTS", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 109:
    /*! Production::    Invocation : SUPER FUNC_EXISTS Arguments */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("SUPER FUNC_EXISTS Arguments", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "SUPER FUNC_EXISTS Arguments", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"soak":true}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 2]], ["FUNC_EXISTS", yylstack[yysp - 1]], ["Arguments", yylstack[yysp]])
    break;

case 110:
    /*! Production::    Invocation : "@" SUPER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("@ SUPER", ...[yyvstack[yysp], new yy.Arguments(null)]), { rule: "@ SUPER", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["@", yylstack[yysp - 1]], ["SUPER", yylstack[yysp]])
    break;

case 111:
    /*! Production::    Invocation : Value String */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value String", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value String", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"templ":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 1]], ["String", yylstack[yysp]])
    break;

case 112:
    /*! Production::    Invocation : Value FUNC_EXISTS String */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Invocation"]("Value FUNC_EXISTS String", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Value FUNC_EXISTS String", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"templ":true,"soak":true}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 2]], ["FUNC_EXISTS", yylstack[yysp - 1]], ["String", yylstack[yysp]])
    break;

case 113:
    /*! Production::    Arguments : CALL_START CALL_END */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START CALL_END", ...[/* */]), { rule: "CALL_START CALL_END", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CALL_START", yylstack[yysp - 1]], ["CALL_END", yylstack[yysp]])
    break;

case 114:
    /*! Production::    Arguments : CALL_START ArgList OptComma CALL_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START ArgList OptComma CALL_END", ...[yyvstack[yysp - 2]]), { rule: "CALL_START ArgList OptComma CALL_END", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CALL_START", yylstack[yysp - 3]], ["ArgList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["CALL_END", yylstack[yysp]])
    break;

case 115:
    /*! Production::    Arguments : CALL_START INDENT ArgList OptComma OUTDENT CALL_END */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arguments"]("CALL_START INDENT ArgList OptComma OUTDENT CALL_END", ...[yyvstack[yysp - 3]]), { rule: "CALL_START INDENT ArgList OptComma OUTDENT CALL_END", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["CALL_START", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ArgList", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["CALL_END", yylstack[yysp]])
    break;

case 116:
    /*! Production::    ArgList : Arg */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ArgList"]("Arg", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Arg", yylstack[yysp - 1]])
    break;

case 117:
    /*! Production::    ArgList : ArgList "," Arg */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList , Arg", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "ArgList , Arg", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ArgList", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Arg", yylstack[yysp]])
    break;

case 118:
    /*! Production::    ArgList : ArgList OptComma NEWLINE Arg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma NEWLINE Arg", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp]]), { rule: "ArgList OptComma NEWLINE Arg", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ArgList", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Arg", yylstack[yysp]])
    break;

case 119:
    /*! Production::    ArgList : ArgList OptComma INDENT ArgList OptComma OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ArgList"]("ArgList OptComma INDENT ArgList OptComma OUTDENT", ...[...yyvstack[yysp - 5].contents, false, ...yyvstack[yysp - 2].contents]), { rule: "ArgList OptComma INDENT ArgList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ArgList", yylstack[yysp - 5]], ["OptComma", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ArgList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 120:
    /*! Production::    Arg : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Arg"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 121:
    /*! Production::    Arg : "..." Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arg"]("... Expression", ...[yyvstack[yysp]]), { rule: "... Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["...", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 122:
    /*! Production::    Arg : Expression "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Arg"]("Expression ...", ...[yyvstack[yysp - 1]]), { rule: "Expression ...", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 1]], ["...", yylstack[yysp]])
    break;

case 123:
    /*! Production::    OptComma : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["OptComma"]("", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["", yylstack[yysp - 1]])
    break;

case 124:
    /*! Production::    OptComma : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["OptComma"](",", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens([",", yylstack[yysp - 1]])
    break;

case 125:
    /*! Production::    Class : CLASS Identifier ClassConstructor? */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor?", ...[yyvstack[yysp - 1], false, false, yylstack[yysp - 2].origin === "class*", yyvstack[yysp].unwrap]), { rule: "CLASS Identifier ClassConstructor?", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 2]], ["Identifier", yylstack[yysp - 1]], ["ClassConstructor?", yylstack[yysp]])
    break;

case 126:
    /*! Production::    Class : CLASS Identifier ClassConstructor? Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? Block", ...[yyvstack[yysp - 2], false, yyvstack[yysp][1], yylstack[yysp - 3].origin === "class*", yyvstack[yysp - 1].unwrap]), { rule: "CLASS Identifier ClassConstructor? Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["ClassConstructor?", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 127:
    /*! Production::    Class : CLASS Identifier ClassConstructor? THEN Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? THEN Block", ...[yyvstack[yysp - 3], false, yyvstack[yysp][1], yylstack[yysp - 4].origin === "class*", yyvstack[yysp - 2].unwrap]), { rule: "CLASS Identifier ClassConstructor? THEN Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["ClassConstructor?", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 128:
    /*! Production::    Class : CLASS ClassConstructor? Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? Block", ...[undefined, false, yyvstack[yysp][1], yylstack[yysp - 2].origin === "class*", yyvstack[yysp - 1].unwrap]), { rule: "CLASS ClassConstructor? Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 2]], ["ClassConstructor?", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 129:
    /*! Production::    Class : CLASS ClassConstructor? THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? THEN Block", ...[undefined, false, yyvstack[yysp][1], yylstack[yysp - 3].origin === "class*", yyvstack[yysp - 2].unwrap]), { rule: "CLASS ClassConstructor? THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 3]], ["ClassConstructor?", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 130:
    /*! Production::    Class : CLASS Identifier ClassConstructor? EXTENDS Value Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? EXTENDS Value Block", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp][1], yylstack[yysp - 5].origin === "class*", yyvstack[yysp - 3].unwrap]), { rule: "CLASS Identifier ClassConstructor? EXTENDS Value Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], ["ClassConstructor?", yylstack[yysp - 3]], ["EXTENDS", yylstack[yysp - 2]], ["Value", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 131:
    /*! Production::    Class : CLASS Identifier ClassConstructor? EXTENDS Value THEN Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? EXTENDS Value THEN Block", ...[yyvstack[yysp - 5], yyvstack[yysp - 2], yyvstack[yysp][1], yylstack[yysp - 6].origin === "class*", yyvstack[yysp - 4].unwrap]), { rule: "CLASS Identifier ClassConstructor? EXTENDS Value THEN Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], ["ClassConstructor?", yylstack[yysp - 4]], ["EXTENDS", yylstack[yysp - 3]], ["Value", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 132:
    /*! Production::    Class : CLASS ClassConstructor? EXTENDS Value Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? EXTENDS Value Block", ...[undefined, yyvstack[yysp - 1], yyvstack[yysp][1], yylstack[yysp - 4].origin === "class*", yyvstack[yysp - 3].unwrap]), { rule: "CLASS ClassConstructor? EXTENDS Value Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 4]], ["ClassConstructor?", yylstack[yysp - 3]], ["EXTENDS", yylstack[yysp - 2]], ["Value", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 133:
    /*! Production::    Class : CLASS Identifier ClassConstructor? EXTENDS Value */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS Identifier ClassConstructor? EXTENDS Value", ...[yyvstack[yysp - 3], yyvstack[yysp], false, yylstack[yysp - 4].origin === "class*", yyvstack[yysp - 2].unwrap]), { rule: "CLASS Identifier ClassConstructor? EXTENDS Value", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["ClassConstructor?", yylstack[yysp - 2]], ["EXTENDS", yylstack[yysp - 1]], ["Value", yylstack[yysp]])
    break;

case 134:
    /*! Production::    Class : CLASS ClassConstructor? EXTENDS Value */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? EXTENDS Value", ...[undefined, yyvstack[yysp],false, yylstack[yysp - 3].origin === "class*", yyvstack[yysp - 2].unwrap]), { rule: "CLASS ClassConstructor? EXTENDS Value", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 3]], ["ClassConstructor?", yylstack[yysp - 2]], ["EXTENDS", yylstack[yysp - 1]], ["Value", yylstack[yysp]])
    break;

case 135:
    /*! Production::    Class : CLASS ClassConstructor? EXTENDS Value THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Class"]("CLASS ClassConstructor? EXTENDS Value THEN Block", ...[undefined, yyvstack[yysp - 2], yyvstack[yysp][1], yylstack[yysp - 5].origin === "class*", yyvstack[yysp - 4].unwrap]), { rule: "CLASS ClassConstructor? EXTENDS Value THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CLASS", yylstack[yysp - 5]], ["ClassConstructor?", yylstack[yysp - 4]], ["EXTENDS", yylstack[yysp - 3]], ["Value", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 136:
    /*! Production::    ClassConstructor? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["", yylstack[yysp]])
    break;

case 137:
    /*! Production::    ClassConstructor? : WITH Params */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("WITH Params", ...[yyvstack[yysp]]), { rule: "WITH Params", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITH", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 138:
    /*! Production::    ClassConstructor? : Params */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ClassConstructor?"]("Params", ...[yyvstack[yysp]]), { rule: "Params", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Params", yylstack[yysp]])
    break;

case 139:
    /*! Production::    Block : "{{" "}}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ }}", ...[yy.Block.wrap()]), { rule: "{{ }}", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 140:
    /*! Production::    Block : INDENT OUTDENT */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("INDENT OUTDENT", ...[yy.Block.wrap()]), { rule: "INDENT OUTDENT", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 141:
    /*! Production::    Block : "{{" INDENT OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ INDENT OUTDENT }}", ...[yy.Block.wrap()]), { rule: "{{ INDENT OUTDENT }}", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 142:
    /*! Production::    Block : INDENT Body OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 143:
    /*! Production::    Block : "{{" INDENT Body OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{{ INDENT Body OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT Body OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Body", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 144:
    /*! Production::    Block : "{" Body "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Block"]("{ Body }", ...[yyvstack[yysp - 1]]), { rule: "{ Body }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 145:
    /*! Production::    ForExpression : JointExpression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ForExpression"]("JointExpression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["JointExpression", yylstack[yysp - 1]])
    break;

case 146:
    /*! Production::    ForExpression : Declare */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ForExpression"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Declare", yylstack[yysp - 1]])
    break;

case 147:
    /*! Production::    JointExpression : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["JointExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 148:
    /*! Production::    JointExpression : JointExpression "," Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["JointExpression"]("JointExpression , Expression", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "JointExpression , Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["JointExpression", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 149:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 6]], ["ForExpression", yylstack[yysp - 5]], [";", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], [";", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 150:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression ; Expression ; Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], [";", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], [";", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 151:
    /*! Production::    For : FOR ForExpression ";" Expression ";" Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression ; Expression ; Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression ; Expression ; Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], [";", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], [";", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 152:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression Block", ...[[yyvstack[yysp - 5], yyvstack[yysp - 3], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 6]], ["ForExpression", yylstack[yysp - 5]], ["WHEN", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["WHILST", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 153:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Block", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], ["WHEN", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["WHILST", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 154:
    /*! Production::    For : FOR ForExpression WHEN Expression WHILST Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForExpression WHEN Expression WHILST Expression THEN Expression", ...[[yyvstack[yysp - 6], yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR ForExpression WHEN Expression WHILST Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["ForExpression", yylstack[yysp - 6]], ["WHEN", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["WHILST", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 155:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_OF Expression Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 4]], ["ForAssignable", yylstack[yysp - 3]], ["FOR_OF", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 156:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression Block", ...[[yyvstack[yysp - 3][1], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 3][2]]), { rule: "FOR ForAssignable FOR_IN Expression Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 4]], ["ForAssignable", yylstack[yysp - 3]], ["FOR_IN", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 157:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_OF", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 158:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Block", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp], yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_IN", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 159:
    /*! Production::    For : FOR ForAssignable FOR_OF Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_OF Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_OF Expression THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_OF", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 160:
    /*! Production::    For : FOR ForAssignable FOR_IN Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR ForAssignable FOR_IN Expression THEN Expression", ...[[yyvstack[yysp - 4][1], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4][2]]), { rule: "FOR ForAssignable FOR_IN Expression THEN Expression", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 5]], ["ForAssignable", yylstack[yysp - 4]], ["FOR_IN", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 161:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp])]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 162:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 163:
    /*! Production::    For : FOR Identifier "," Assignable ForAny Expression Block */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp]]), { rule: "FOR Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], [",", yylstack[yysp - 4]], ["Assignable", yylstack[yysp - 3]], ["ForAny", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 164:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Expression", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 8]], ["DeclarationKeyword", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 165:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", ...[[[yyvstack[yysp - 6], yyvstack[yysp - 4]], yyvstack[yysp - 3], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp - 7]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression THEN Block", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 8]], ["DeclarationKeyword", yylstack[yysp - 7]], ["Identifier", yylstack[yysp - 6]], [",", yylstack[yysp - 5]], ["Assignable", yylstack[yysp - 4]], ["ForAny", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 166:
    /*! Production::    For : FOR DeclarationKeyword Identifier "," Assignable ForAny Expression Block */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", ...[[[yyvstack[yysp - 5], yyvstack[yysp - 3]], yyvstack[yysp - 2], yyvstack[yysp - 1]], yyvstack[yysp], yyvstack[yysp - 6]]), { rule: "FOR DeclarationKeyword Identifier , Assignable ForAny Expression Block", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FOR", yylstack[yysp - 7]], ["DeclarationKeyword", yylstack[yysp - 6]], ["Identifier", yylstack[yysp - 5]], [",", yylstack[yysp - 4]], ["Assignable", yylstack[yysp - 3]], ["ForAny", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 167:
    /*! Production::    For : Expression POSTFOR DeclarationKeyword Identifier "," Assignable ForAny Expression */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 7]), yyvstack[yysp - 5]]), { rule: "Expression POSTFOR DeclarationKeyword Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 7].first_line, first_column: yylstack[yysp - 7].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 7].src, type: yylstack[yysp - 7].type } }, {"first":1,"last":8,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 7]], ["POSTFOR", yylstack[yysp - 6]], ["DeclarationKeyword", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], [",", yylstack[yysp - 3]], ["Assignable", yylstack[yysp - 2]], ["ForAny", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 168:
    /*! Production::    For : Expression POSTFOR ForAssignable FOR_OF Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_OF Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_OF Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 4]], ["POSTFOR", yylstack[yysp - 3]], ["ForAssignable", yylstack[yysp - 2]], ["FOR_OF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 169:
    /*! Production::    For : Expression POSTFOR ForAssignable FOR_IN Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR ForAssignable FOR_IN Expression", ...[[yyvstack[yysp - 2][1], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 4]), yyvstack[yysp - 2][2]]), { rule: "Expression POSTFOR ForAssignable FOR_IN Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 4]], ["POSTFOR", yylstack[yysp - 3]], ["ForAssignable", yylstack[yysp - 2]], ["FOR_IN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 170:
    /*! Production::    For : Expression POSTFOR Identifier "," Assignable ForAny Expression */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["For"]("Expression POSTFOR Identifier , Assignable ForAny Expression", ...[[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp - 1], yyvstack[yysp]], yy.Block.wrap(yyvstack[yysp - 6])]), { rule: "Expression POSTFOR Identifier , Assignable ForAny Expression", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 6]], ["POSTFOR", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], [",", yylstack[yysp - 3]], ["Assignable", yylstack[yysp - 2]], ["ForAny", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 171:
    /*! Production::    ForAssignable : DeclarationKeyword Assignable */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ForAssignable"]("DeclarationKeyword Assignable", ...[yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "DeclarationKeyword Assignable", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DeclarationKeyword", yylstack[yysp - 1]], ["Assignable", yylstack[yysp]])
    break;

case 172:
    /*! Production::    ForAssignable : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ForAssignable"]("Assignable", ...[yyvstack[yysp]]), { rule: "Assignable", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp]])
    break;

case 173:
    /*! Production::    Switch : SWITCH Expression INDENT Cases OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH Expression INDENT Cases OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "SWITCH Expression INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Cases", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 174:
    /*! Production::    Switch : SWITCH INDENT Cases OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH INDENT Cases OUTDENT", ...[false, yyvstack[yysp - 1]]), { rule: "SWITCH INDENT Cases OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Cases", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 175:
    /*! Production::    Switch : SWITCH Expression "{{" INDENT Cases OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH Expression {{ INDENT Cases OUTDENT }}", ...[yyvstack[yysp - 5], yyvstack[yysp - 2]]), { rule: "SWITCH Expression {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 6]], ["Expression", yylstack[yysp - 5]], ["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Cases", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 176:
    /*! Production::    Switch : SWITCH "{{" INDENT Cases OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Switch"]("SWITCH {{ INDENT Cases OUTDENT }}", ...[false, yyvstack[yysp - 2]]), { rule: "SWITCH {{ INDENT Cases OUTDENT }}", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SWITCH", yylstack[yysp - 5]], ["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Cases", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 177:
    /*! Production::    Cases : Case */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Cases"]("Case", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Case", yylstack[yysp - 1]])
    break;

case 178:
    /*! Production::    Cases : Cases NEWLINE Case */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Cases"]("Cases NEWLINE Case", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "Cases NEWLINE Case", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Cases", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Case", yylstack[yysp]])
    break;

case 179:
    /*! Production::    Case : Clauses THEN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Clauses THEN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 180:
    /*! Production::    Case : Clauses THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Clauses THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 181:
    /*! Production::    Case : Clauses Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Clauses Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Clauses Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 182:
    /*! Production::    Case : Multicondition THEN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "Multicondition THEN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 183:
    /*! Production::    Case : Multicondition THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap]), { rule: "Multicondition THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 184:
    /*! Production::    Case : Multicondition Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Multicondition Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap]), { rule: "Multicondition Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Multicondition", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 185:
    /*! Production::    Case : DEFAULT Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("DEFAULT Expression", ...[false, yy.Block.wrap(yyvstack[yysp])]), { rule: "DEFAULT Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DEFAULT", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 186:
    /*! Production::    Case : DEFAULT Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("DEFAULT Block", ...[false, yyvstack[yysp].unwrap]), { rule: "DEFAULT Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DEFAULT", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 187:
    /*! Production::    Case : Expression POSTCASE MulticheckClauses */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Case"]("Expression POSTCASE MulticheckClauses", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2])]), { rule: "Expression POSTCASE MulticheckClauses", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["POSTCASE", yylstack[yysp - 1]], ["MulticheckClauses", yylstack[yysp]])
    break;

case 188:
    /*! Production::    Case : BREAK */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Case"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["BREAK", yylstack[yysp - 1]])
    break;

case 189:
    /*! Production::    Clauses : When */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("When", ...[yyvstack[yysp].contents]), { rule: "When", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["When", yylstack[yysp]])
    break;

case 190:
    /*! Production::    Clauses : Clauses NEWLINE When */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("Clauses NEWLINE When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses NEWLINE When", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["When", yylstack[yysp]])
    break;

case 191:
    /*! Production::    Clauses : Clauses COMPOUND_OR When */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Clauses"]("Clauses COMPOUND_OR When", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "Clauses COMPOUND_OR When", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Clauses", yylstack[yysp - 2]], ["COMPOUND_OR", yylstack[yysp - 1]], ["When", yylstack[yysp]])
    break;

case 192:
    /*! Production::    When : CASE Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("CASE Clause", ...[...yyvstack[yysp].contents]), { rule: "CASE Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CASE", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 193:
    /*! Production::    When : IF Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("IF Clause", ...[...yyvstack[yysp].contents]), { rule: "IF Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IF", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 194:
    /*! Production::    When : WHEN Clause */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["When"]("WHEN Clause", ...[...yyvstack[yysp].contents]), { rule: "WHEN Clause", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WHEN", yylstack[yysp - 1]], ["Clause", yylstack[yysp]])
    break;

case 195:
    /*! Production::    ForAny : FOR_FROM */
case 196:
    /*! Production::    ForAny : FOR_AT */
case 197:
    /*! Production::    ForAny : FOR_AS */
case 281:
    /*! Production::    PropObj : Function */
case 295:
    /*! Production::    PropObj : Assignment */
case 301:
    /*! Production::    ParamPropObj : ParamIdentifier */
case 423:
    /*! Production::    OptVoids : Voids */
case 526:
    /*! Production::    Import(FROM) : FROM */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]
    break;

case 198:
    /*! Production::    If : IfBlock */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["If"]("IfBlock", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["IfBlock", yylstack[yysp - 1]])
    break;

case 199:
    /*! Production::    If : IfBlock Else */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("IfBlock Else", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "IfBlock Else", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfBlock", yylstack[yysp - 1]], ["Else", yylstack[yysp]])
    break;

case 200:
    /*! Production::    If : Expression "?" BlockExpression ":" BlockExpression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression : BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 4], yyvstack[yysp - 2].unwrap), new yy.Else('Else', yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression : BlockExpression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 4]], ["?", yylstack[yysp - 3]], ["BlockExpression", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["BlockExpression", yylstack[yysp]])
    break;

case 201:
    /*! Production::    If : Expression "?" BlockExpression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? BlockExpression", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 2], yyvstack[yysp].unwrap)]), { rule: "Expression ? BlockExpression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["?", yylstack[yysp - 1]], ["BlockExpression", yylstack[yysp]])
    break;

case 202:
    /*! Production::    If : Expression "?" INDENT BlockExpression ":" BlockExpression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression ? INDENT BlockExpression : BlockExpression OUTDENT", ...[new yy.IfBlock('IfBlock', yyvstack[yysp - 6], yyvstack[yysp - 3].unwrap), new yy.Else('Else', yyvstack[yysp - 1].unwrap)]), { rule: "Expression ? INDENT BlockExpression : BlockExpression OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false,"quoteSyntax":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 6]], ["?", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["BlockExpression", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["BlockExpression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 203:
    /*! Production::    If : Expression POSTIF Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTIF Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["POSTIF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 204:
    /*! Production::    If : Statement POSTIF Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Statement POSTIF Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTIF Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true}, { generated: undefined }).setTokens(["Statement", yylstack[yysp - 2]], ["POSTIF", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 205:
    /*! Production::    If : Expression POSTUNLESS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Expression POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"unless":true}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["POSTUNLESS", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 206:
    /*! Production::    If : Statement POSTUNLESS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["If"]("Statement POSTUNLESS Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Statement POSTUNLESS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false,"postfix":true,"statement":true,"unless":true}, { generated: undefined }).setTokens(["Statement", yylstack[yysp - 2]], ["POSTUNLESS", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 207:
    /*! Production::    BlockExpression : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["BlockExpression"]("Expression", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Expression", yylstack[yysp - 1]])
    break;

case 208:
    /*! Production::    BlockExpression : INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["BlockExpression"]("INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 209:
    /*! Production::    TryBlock : Try */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try", ...[yyvstack[yysp], null, null]), { rule: "Try", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Try", yylstack[yysp]])
    break;

case 210:
    /*! Production::    TryBlock : Try Catch */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try Catch", ...[yyvstack[yysp - 1], yyvstack[yysp], null]), { rule: "Try Catch", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Try", yylstack[yysp - 1]], ["Catch", yylstack[yysp]])
    break;

case 211:
    /*! Production::    TryBlock : Try Catch Finally */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TryBlock"]("Try Catch Finally", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Try Catch Finally", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Try", yylstack[yysp - 2]], ["Catch", yylstack[yysp - 1]], ["Finally", yylstack[yysp]])
    break;

case 212:
    /*! Production::    Try : TRY Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Try"]("TRY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "TRY Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TRY", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 213:
    /*! Production::    Try : TRY Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Try"]("TRY Block", ...[yyvstack[yysp]]), { rule: "TRY Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TRY", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 214:
    /*! Production::    Finally : FINALLY Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Finally"]("FINALLY Block", ...[yyvstack[yysp]]), { rule: "FINALLY Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FINALLY", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 215:
    /*! Production::    Finally : FINALLY Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Finally"]("FINALLY Expression", ...[yy.Block.wrap(yyvstack[yysp])]), { rule: "FINALLY Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FINALLY", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 216:
    /*! Production::    Catch : CATCH Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Block", ...[null, yyvstack[yysp]]), { rule: "CATCH Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 217:
    /*! Production::    Catch : CATCH Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Expression", ...[null, yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 218:
    /*! Production::    Catch : CATCH Identifier Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier Block", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "CATCH Identifier Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 2]], ["Identifier", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 219:
    /*! Production::    Catch : CATCH Identifier THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "CATCH Identifier THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 220:
    /*! Production::    Catch : CATCH Identifier THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Catch"]("CATCH Identifier THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp])]), { rule: "CATCH Identifier THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CATCH", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 221:
    /*! Production::    While : WhileUntil Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp].unwrap, yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 222:
    /*! Production::    While : WhileUntil Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression THEN Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 3]]), { rule: "WhileUntil Expression THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 223:
    /*! Production::    While : WhileUntil "(" Expression ")" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil ( Expression ) Expression", ...[yyvstack[yysp - 2], yy.Block.wrap(yyvstack[yysp]), yyvstack[yysp - 4]]), { rule: "WhileUntil ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 4]], ["(", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], [")", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 224:
    /*! Production::    While : WhileUntil Expression Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("WhileUntil Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp].unwrap, yyvstack[yysp - 2]]), { rule: "WhileUntil Expression Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WhileUntil", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 225:
    /*! Production::    While : Loop WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Loop WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 2].unwrap, yyvstack[yysp - 1]]), { rule: "Loop WhileUntil Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Loop", yylstack[yysp - 2]], ["WhileUntil", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 226:
    /*! Production::    While : Loop NEWLINE WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Loop NEWLINE WhileUntil Expression", ...[yyvstack[yysp], yyvstack[yysp - 3].unwrap, yyvstack[yysp - 1]]), { rule: "Loop NEWLINE WhileUntil Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Loop", yylstack[yysp - 3]], ["NEWLINE", yylstack[yysp - 2]], ["WhileUntil", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 227:
    /*! Production::    While : Expression WhileUntil Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["While"]("Expression WhileUntil Expression", ...[yyvstack[yysp], yy.Block.wrap(yyvstack[yysp - 2]), yyvstack[yysp - 1]]), { rule: "Expression WhileUntil Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["WhileUntil", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 228:
    /*! Production::    WhileUntil : WHILE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("WHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["WHILE", yylstack[yysp - 1]])
    break;

case 229:
    /*! Production::    WhileUntil : UNTIL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("UNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["UNTIL", yylstack[yysp - 1]])
    break;

case 230:
    /*! Production::    WhileUntil : POSTWHILE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("POSTWHILE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["POSTWHILE", yylstack[yysp - 1]])
    break;

case 231:
    /*! Production::    WhileUntil : POSTUNTIL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["WhileUntil"]("POSTUNTIL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["POSTUNTIL", yylstack[yysp - 1]])
    break;

case 232:
    /*! Production::    Loop : LOOP Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Loop"]("LOOP Block", ...[yyvstack[yysp].unwrap]), { rule: "LOOP Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["LOOP", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 233:
    /*! Production::    Loop : LOOP Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Loop"]("LOOP Expression", ...[yy.Block.wrap(yyvstack[yysp]).unwrap]), { rule: "LOOP Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["LOOP", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 234:
    /*! Production::    Else : ElseOtherwise Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 235:
    /*! Production::    Else : ElseOtherwise Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Expression", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 236:
    /*! Production::    Else : ElseOtherwise Statement */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise Statement", ...[yyvstack[yysp]]), { rule: "ElseOtherwise Statement", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 237:
    /*! Production::    Else : ElseOtherwise THEN Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Else"]("ElseOtherwise THEN Block", ...[yyvstack[yysp]]), { rule: "ElseOtherwise THEN Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ElseOtherwise", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 238:
    /*! Production::    IfBlock : IfUnless Expression Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression Block", ...[yyvstack[yysp - 1], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "IfUnless Expression Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 239:
    /*! Production::    IfBlock : IfUnless Expression THEN Block */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Block", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Block", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 240:
    /*! Production::    IfBlock : IfUnless Expression THEN Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 241:
    /*! Production::    IfBlock : IfUnless "(" Expression ")" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless ( Expression ) Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 4]]), { rule: "IfUnless ( Expression ) Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 4]], ["(", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], [")", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 242:
    /*! Production::    IfBlock : IfUnless Expression THEN Statement */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN Statement", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 3]]), { rule: "IfUnless Expression THEN Statement", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 3]], ["Expression", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Statement", yylstack[yysp]])
    break;

case 243:
    /*! Production::    IfBlock : IfUnless Expression "{" Expression "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression { Expression }", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], yyvstack[yysp - 4]]), { rule: "IfUnless Expression { Expression }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 4]], ["Expression", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 244:
    /*! Production::    IfBlock : IfUnless Expression THEN "{" Expression "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Expression }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Expression }", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["THEN", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 245:
    /*! Production::    IfBlock : IfUnless Expression THEN "{" Statement "}" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["IfBlock"]("IfUnless Expression THEN { Statement }", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 5]]), { rule: "IfUnless Expression THEN { Statement }", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IfUnless", yylstack[yysp - 5]], ["Expression", yylstack[yysp - 4]], ["THEN", yylstack[yysp - 3]], ["{", yylstack[yysp - 2]], ["Statement", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 246:
    /*! Production::    IfUnless : IF */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["IfUnless"]("IF", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["IF", yylstack[yysp - 1]])
    break;

case 247:
    /*! Production::    IfUnless : UNLESS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["IfUnless"]("UNLESS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["UNLESS", yylstack[yysp - 1]])
    break;

case 248:
    /*! Production::    ElseOtherwise : ELSE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("ELSE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ELSE", yylstack[yysp - 1]])
    break;

case 249:
    /*! Production::    ElseOtherwise : OTHERWISE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("OTHERWISE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["OTHERWISE", yylstack[yysp - 1]])
    break;

case 250:
    /*! Production::    ElseOtherwise : OR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ElseOtherwise"]("OR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["OR", yylstack[yysp - 1]])
    break;

case 251:
    /*! Production::    Value : Assignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Assignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Assignable", yylstack[yysp - 1]])
    break;

case 252:
    /*! Production::    Value : Parenthetical */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Parenthetical", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Parenthetical", yylstack[yysp - 1]])
    break;

case 253:
    /*! Production::    Value : Literal */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Literal", yylstack[yysp - 1]])
    break;

case 254:
    /*! Production::    Value : Invocation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Invocation", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Invocation", yylstack[yysp - 1]])
    break;

case 255:
    /*! Production::    Value : Function */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Function", yylstack[yysp - 1]])
    break;

case 256:
    /*! Production::    Value : New */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("New", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["New", yylstack[yysp - 1]])
    break;

case 257:
    /*! Production::    Value : This */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("This", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["This", yylstack[yysp - 1]])
    break;

case 258:
    /*! Production::    Value : Super */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("Super", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Super", yylstack[yysp - 1]])
    break;

case 259:
    /*! Production::    Value : SUCH */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Value"]("SUCH", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["SUCH", yylstack[yysp - 1]])
    break;

case 260:
    /*! Production::    New : NEW Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["New"]("NEW Expression", ...[yyvstack[yysp]]), { rule: "NEW Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["NEW", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 261:
    /*! Production::    Super : SUPER "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Super"]("SUPER . PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] })]), { rule: "SUPER . PROPERTY", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 262:
    /*! Production::    Super : SUPER INDEX_START PROPERTY INDEX_END */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Super"]("SUPER INDEX_START PROPERTY INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "SUPER INDEX_START PROPERTY INDEX_END", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SUPER", yylstack[yysp - 3]], ["INDEX_START", yylstack[yysp - 2]], ["PROPERTY", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 263:
    /*! Production::    This : THIS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["This"]("THIS", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["THIS", yylstack[yysp - 1]])
    break;

case 264:
    /*! Production::    Parenthetical : "(" Expression ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( Expression )", ...[yyvstack[yysp - 1]]), { rule: "( Expression )", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 265:
    /*! Production::    Parenthetical : "(" Body ")" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( Body )", ...[yyvstack[yysp - 1]]), { rule: "( Body )", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 266:
    /*! Production::    Parenthetical : "(" INDENT Body OUTDENT ")" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Parenthetical"]("( INDENT Body OUTDENT )", ...[yyvstack[yysp - 2]]), { rule: "( INDENT Body OUTDENT )", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["Body", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")", yylstack[yysp]])
    break;

case 267:
    /*! Production::    ParamObject : "{" ParamPropList "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamObject"]("{ ParamPropList }", ...[yyvstack[yysp - 1]]), { rule: "{ ParamPropList }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["ParamPropList", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 268:
    /*! Production::    ParamObject : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamObject"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 269:
    /*! Production::    Object : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 270:
    /*! Production::    Object : "{" PropList OptComma "}" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ PropList OptComma }", ...[yyvstack[yysp - 2]]), { rule: "{ PropList OptComma }", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false,"indentOf":1}, { generated: undefined, indented: yylstack[yysp - 3].indented }).setTokens(["{", yylstack[yysp - 3]], ["PropList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 271:
    /*! Production::    Object : "{" INDENT PropList OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Object"]("{ INDENT PropList OUTDENT }", ...[yyvstack[yysp - 2]]), { rule: "{ INDENT PropList OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false,"indented":true}, { generated: undefined }).setTokens(["{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["PropList", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 272:
    /*! Production::    PropList : PropObj */
case 277:
    /*! Production::    ParamPropList : ParamPropObj */
case 416:
    /*! Production::    ParamArrayArg : ParamAssignable */
case 420:
    /*! Production::    ArrayArg : Expression */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp]]
    break;

case 273:
    /*! Production::    PropList : PropList "," PropObj */
case 278:
    /*! Production::    ParamPropList : ParamPropList "," ParamPropObj */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].push(yyvstack[yysp]) && yyvstack[yysp - 2]
    break;

case 274:
    /*! Production::    PropList : PropList OptComma NEWLINE PropObj */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].push(yylstack[yysp - 1].generated, yyvstack[yysp]) && yyvstack[yysp - 3]
    break;

case 275:
    /*! Production::    PropList : PropList OptComma INDENT PropList OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4].concat(false, ...[yyvstack[yysp - 1]])
    break;

case 276:
    /*! Production::    ParamPropList : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = []
    break;

case 279:
    /*! Production::    ParamPropList : ParamPropList OptComma NEWLINE ParamPropObj */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].push(yyvstack[yysp]) && yyvstack[yysp - 3]
    break;

case 280:
    /*! Production::    ParamPropList : ParamPropList OptComma INDENT ParamPropObj OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 4].push(yyvstack[yysp - 1]) && yyvstack[yysp - 4]
    break;

case 282:
    /*! Production::    PropObj : PROPERTY ":" Expression */
case 285:
    /*! Production::    PropObj : AlphaNum ":" Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yyvstack[yysp], [yylstack[yysp - 2], yylstack[yysp]]]
    break;

case 283:
    /*! Production::    PropObj : PROPERTY ":" Block */
case 286:
    /*! Production::    PropObj : AlphaNum ":" Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 2], yylstack[yysp], true]]
    break;

case 284:
    /*! Production::    PropObj : PROPERTY ":" INDENT Expression OUTDENT */
case 287:
    /*! Production::    PropObj : AlphaNum ":" INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 4], yyvstack[yysp - 1], [yylstack[yysp - 4], yylstack[yysp], true]]
    break;

case 288:
    /*! Production::    PropObj : "[" Expression "]" ":" Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yyvstack[yysp], [yylstack[yysp - 4], yylstack[yysp]]]
    break;

case 289:
    /*! Production::    PropObj : "[" Expression "]" ":" INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 5], yyvstack[yysp - 1], [yylstack[yysp - 6], yylstack[yysp - 1], true]]
    break;

case 290:
    /*! Production::    PropObj : "[" Expression "]" ":" Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3], yy.Array.from(yyvstack[yysp]), [yylstack[yysp - 4], yylstack[yysp], true]]
    break;

case 291:
    /*! Production::    PropObj : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 1], yylstack[yysp]]]
    break;

case 292:
    /*! Production::    PropObj : "..." PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1], false, [yylstack[yysp - 2], yylstack[yysp]], true]
    break;

case 293:
    /*! Production::    PropObj : PROPERTY ":" "..." */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2], false, [yylstack[yysp - 2], yylstack[yysp]], true]
    break;

case 294:
    /*! Production::    PropObj : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp][1], false, [yylstack[yysp], yylstack[yysp]]]
    break;

case 296:
    /*! Production::    PropObj : "..." Value */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp]
    break;

case 297:
    /*! Production::    PropObj : Value "..." */
case 302:
    /*! Production::    ParamPropObj : ParamIdentifier ":" */
case 536:
    /*! Production::    OptDefault : Identifier "," */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 1]
    break;

case 298:
    /*! Production::    ParamPropObj : PROPERTY ":" ParamAssignable */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],yyvstack[yysp],,,yylstack[yysp - 2]]
    break;

case 299:
    /*! Production::    ParamPropObj : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1],,,,yylstack[yysp - 1]]
    break;

case 300:
    /*! Production::    ParamPropObj : PROPERTY ":" DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 3],,yyvstack[yysp],,yylstack[yysp - 3]]
    break;

case 303:
    /*! Production::    ParamPropObj : ParamIdentifier DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],,yyvstack[yysp]]
    break;

case 304:
    /*! Production::    ParamPropObj : "..." PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 1],,,true,yylstack[yysp - 1]]
    break;

case 305:
    /*! Production::    ParamPropObj : PROPERTY ":" "..." */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [yyvstack[yysp - 2],,,true,yylstack[yysp - 2]]
    break;

case 306:
    /*! Production::    Literal : AlphaNum */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("AlphaNum", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["AlphaNum", yylstack[yysp - 1]])
    break;

case 307:
    /*! Production::    Literal : Regex */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Regex", yylstack[yysp - 1]])
    break;

case 308:
    /*! Production::    Literal : UNDEFINED */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("UNDEFINED", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["UNDEFINED", yylstack[yysp - 1]])
    break;

case 309:
    /*! Production::    Literal : INFINITY */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("INFINITY", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["INFINITY", yylstack[yysp - 1]])
    break;

case 310:
    /*! Production::    Literal : BOOL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("BOOL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["BOOL", yylstack[yysp - 1]])
    break;

case 311:
    /*! Production::    Literal : NULL */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("NULL", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["NULL", yylstack[yysp - 1]])
    break;

case 312:
    /*! Production::    Literal : NAN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Literal"]("NAN", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["NAN", yylstack[yysp - 1]])
    break;

case 313:
    /*! Production::    AlphaNum : String */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AlphaNum"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["String", yylstack[yysp - 1]])
    break;

case 314:
    /*! Production::    AlphaNum : NUMBER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AlphaNum"]("NUMBER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["NUMBER", yylstack[yysp - 1]])
    break;

case 315:
    /*! Production::    String : STRING */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["String"]("STRING", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["STRING", yylstack[yysp - 1]])
    break;

case 316:
    /*! Production::    String : StringWithInterpolations */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["String"]("StringWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["StringWithInterpolations", yylstack[yysp - 1]])
    break;

case 317:
    /*! Production::    StringWithInterpolations : STRING_START Interpolations STRING_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["StringWithInterpolations"]("STRING_START Interpolations STRING_END", ...[yyvstack[yysp - 1], yyvstack[yysp - 2]]), { rule: "STRING_START Interpolations STRING_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["STRING_START", yylstack[yysp - 2]], ["Interpolations", yylstack[yysp - 1]], ["STRING_END", yylstack[yysp]])
    break;

case 318:
    /*! Production::    Interpolations : Interpolation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolation", ...[yyvstack[yysp]]), { rule: "Interpolation", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Interpolation", yylstack[yysp]])
    break;

case 319:
    /*! Production::    Interpolations : Interpolations Interpolation */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolations"]("Interpolations Interpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "Interpolations Interpolation", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Interpolations", yylstack[yysp - 1]], ["Interpolation", yylstack[yysp]])
    break;

case 320:
    /*! Production::    Interpolation : INTERPOLATION_START Expression INTERPOLATION_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERPOLATION_START", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["INTERPOLATION_END", yylstack[yysp]])
    break;

case 321:
    /*! Production::    Interpolation : String */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Interpolation"]("String", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["String", yylstack[yysp - 1]])
    break;

case 322:
    /*! Production::    Regex : REGEX */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Regex"]("REGEX", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["REGEX", yylstack[yysp - 1]])
    break;

case 323:
    /*! Production::    Regex : RegexWithInterpolations */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Regex"]("RegexWithInterpolations", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["RegexWithInterpolations", yylstack[yysp - 1]])
    break;

case 324:
    /*! Production::    RegexWithInterpolations : REGEX_START RegexInterpolations REGEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexWithInterpolations"]("REGEX_START RegexInterpolations REGEX_END", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "REGEX_START RegexInterpolations REGEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["REGEX_START", yylstack[yysp - 2]], ["RegexInterpolations", yylstack[yysp - 1]], ["REGEX_END", yylstack[yysp]])
    break;

case 325:
    /*! Production::    RegexInterpolations : RegexInterpolation */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolation", ...[yyvstack[yysp]]), { rule: "RegexInterpolation", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RegexInterpolation", yylstack[yysp]])
    break;

case 326:
    /*! Production::    RegexInterpolations : RegexInterpolations RegexInterpolation */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolations"]("RegexInterpolations RegexInterpolation", ...[...yyvstack[yysp - 1].contents, yyvstack[yysp]]), { rule: "RegexInterpolations RegexInterpolation", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RegexInterpolations", yylstack[yysp - 1]], ["RegexInterpolation", yylstack[yysp]])
    break;

case 327:
    /*! Production::    RegexInterpolation : INTERPOLATION_START Expression INTERPOLATION_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["RegexInterpolation"]("INTERPOLATION_START Expression INTERPOLATION_END", ...[yyvstack[yysp - 1]]), { rule: "INTERPOLATION_START Expression INTERPOLATION_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERPOLATION_START", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["INTERPOLATION_END", yylstack[yysp]])
    break;

case 328:
    /*! Production::    RegexInterpolation : Regex */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["RegexInterpolation"]("Regex", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Regex", yylstack[yysp - 1]])
    break;

case 329:
    /*! Production::    Function : FuncHeader */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FuncHeader", ...[yyvstack[yysp].contents, yy.Block.wrap(), { arguments: yyvstack[yysp][3] }]), { rule: "FuncHeader", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FuncHeader", yylstack[yysp]])
    break;

case 330:
    /*! Production::    Function : FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FuncHeader", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 331:
    /*! Production::    Function : FuncSpecifiers FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FuncSpecifiers FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { ...yyvstack[yysp - 2].unwrap, arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FuncSpecifiers FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FuncSpecifiers", yylstack[yysp - 2]], ["FuncHeader", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 332:
    /*! Production::    Function : FUNCTION FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNCTION FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { yields: yylstack[yysp - 2].origin === 'function*', arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNCTION", yylstack[yysp - 2]], ["FuncHeader", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 333:
    /*! Production::    Function : ASYNC FUNCTION FuncHeader FuncBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION FuncHeader FuncBody", ...[yyvstack[yysp - 1].contents, yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 2].origin === 'function*', arguments: yyvstack[yysp - 1][3], returns: [yylstack[yysp - 1].type, yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION FuncHeader FuncBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp - 3]], ["FUNCTION", yylstack[yysp - 2]], ["FuncHeader", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 334:
    /*! Production::    Function : FUNCTION WITH FuncBody */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNCTION WITH FuncBody", ...[[], yyvstack[yysp].unwrap, { yields: yylstack[yysp - 2].origin === 'function*', returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION WITH FuncBody", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNCTION", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 335:
    /*! Production::    Function : FUNCTION WITH "<(" TypeArguments ")>" FuncBody */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNCTION WITH <( TypeArguments )> FuncBody", ...[[], yyvstack[yysp].unwrap, { yields: yylstack[yysp - 5].origin === 'function*', arguments: yyvstack[yysp - 2], returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "FUNCTION WITH <( TypeArguments )> FuncBody", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNCTION", yylstack[yysp - 5]], ["WITH", yylstack[yysp - 4]], ["<(", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], [")>", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 336:
    /*! Production::    Function : ASYNC FUNCTION WITH FuncBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION WITH FuncBody", ...[[], yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 2].origin === 'function*', returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION WITH FuncBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp - 3]], ["FUNCTION", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 337:
    /*! Production::    Function : ASYNC FUNCTION WITH "<(" TypeArguments ")>" FuncBody */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("ASYNC FUNCTION WITH <( TypeArguments )> FuncBody", ...[[], yyvstack[yysp].unwrap, { async: true, yields: yylstack[yysp - 5].origin === 'function*', arguments: yyvstack[yysp - 2], returns: [yylstack[yysp].type].filter(Boolean) }]), { rule: "ASYNC FUNCTION WITH <( TypeArguments )> FuncBody", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp - 6]], ["FUNCTION", yylstack[yysp - 5]], ["WITH", yylstack[yysp - 4]], ["<(", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], [")>", yylstack[yysp - 1]], ["FuncBody", yylstack[yysp]])
    break;

case 338:
    /*! Production::    Function : WITH Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("WITH Block", ...[[], yyvstack[yysp].unwrap, {}]), { rule: "WITH Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITH", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 339:
    /*! Production::    Function : WITH "<(" TypeArguments ")>" Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("WITH <( TypeArguments )> Block", ...[[], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 2] }]), { rule: "WITH <( TypeArguments )> Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITH", yylstack[yysp - 4]], ["<(", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], [")>", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 340:
    /*! Production::    Function : WITH "<(" TypeArguments ")>" THEN Block */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("WITH <( TypeArguments )> THEN Block", ...[[], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 3], returns: [yylstack[yysp - 1].type].filter(Boolean) }]), { rule: "WITH <( TypeArguments )> THEN Block", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["WITH", yylstack[yysp - 5]], ["<(", yylstack[yysp - 4]], ["TypeArguments", yylstack[yysp - 3]], [")>", yylstack[yysp - 2]], ["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 341:
    /*! Production::    Function : FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("FUNC_DIRECTIVE Block", ...[[], yyvstack[yysp].unwrap]), { rule: "FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 342:
    /*! Production::    Function : Identifier TypeArguments? Params FUNC_DIRECTIVE Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("Identifier TypeArguments? Params FUNC_DIRECTIVE Expression", ...[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp]), { arguments: yyvstack[yysp - 3].unwrap }]), { rule: "Identifier TypeArguments? Params FUNC_DIRECTIVE Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 4]], ["TypeArguments?", yylstack[yysp - 3]], ["Params", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 343:
    /*! Production::    Function : Identifier TypeArguments? Params FUNC_DIRECTIVE Block */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Function"]("Identifier TypeArguments? Params FUNC_DIRECTIVE Block", ...[[yyvstack[yysp - 4], yyvstack[yysp - 2]], yyvstack[yysp].unwrap, { arguments: yyvstack[yysp - 3].unwrap }]), { rule: "Identifier TypeArguments? Params FUNC_DIRECTIVE Block", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 4]], ["TypeArguments?", yylstack[yysp - 3]], ["Params", yylstack[yysp - 2]], ["FUNC_DIRECTIVE", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 344:
    /*! Production::    FuncBody : THEN Block */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncBody"]("THEN Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp - 1], yylstack[yysp])]), { rule: "THEN Block", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THEN", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 345:
    /*! Production::    FuncBody : Block */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncBody"]("Block", ...[yyvstack[yysp].unwrap.setLoc(yylstack[yysp])]), { rule: "Block", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["Block", yylstack[yysp]])
    break;

case 346:
    /*! Production::    FuncBody : THEN Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncBody"]("THEN Expression", ...[yy.Block.wrap(yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "THEN Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THEN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 347:
    /*! Production::    FuncSpecifiers : STATIC GET */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC GET", ...[{ static: true, get: true }]), { rule: "STATIC GET", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["STATIC", yylstack[yysp - 1]], ["GET", yylstack[yysp]])
    break;

case 348:
    /*! Production::    FuncSpecifiers : STATIC SET */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC SET", ...[{ static: true, set: true }]), { rule: "STATIC SET", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["STATIC", yylstack[yysp - 1]], ["SET", yylstack[yysp]])
    break;

case 349:
    /*! Production::    FuncSpecifiers : STATIC ASYNC */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC ASYNC", ...[{ static: true, async: true }]), { rule: "STATIC ASYNC", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["STATIC", yylstack[yysp - 1]], ["ASYNC", yylstack[yysp]])
    break;

case 350:
    /*! Production::    FuncSpecifiers : GET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("GET", ...[{ get: true }]), { rule: "GET", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["GET", yylstack[yysp]])
    break;

case 351:
    /*! Production::    FuncSpecifiers : SET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("SET", ...[{ set: true }]), { rule: "SET", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["SET", yylstack[yysp]])
    break;

case 352:
    /*! Production::    FuncSpecifiers : STATIC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("STATIC", ...[{ static: true }]), { rule: "STATIC", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["STATIC", yylstack[yysp]])
    break;

case 353:
    /*! Production::    FuncSpecifiers : ASYNC */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncSpecifiers"]("ASYNC", ...[{ async: true }]), { rule: "ASYNC", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ASYNC", yylstack[yysp]])
    break;

case 354:
    /*! Production::    FuncHeader : Identifier TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? Params", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Identifier TypeArguments? Params", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 355:
    /*! Production::    FuncHeader : Identifier WITH TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier WITH TypeArguments? Params", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "Identifier WITH TypeArguments? Params", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["WITH", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 356:
    /*! Production::    FuncHeader : Identifier TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? WITH Params", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 357:
    /*! Production::    FuncHeader : WITH TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("WITH TypeArguments? Params", ...[null, yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "WITH TypeArguments? Params", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["WITH", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 358:
    /*! Production::    FuncHeader : TypeArguments? WITH Params */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("TypeArguments? WITH Params", ...[null, yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "TypeArguments? WITH Params", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":2,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 359:
    /*! Production::    FuncHeader : Identifier TypeArguments? */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments?", ...[yyvstack[yysp - 1], null, yyvstack[yysp].unwrap]), { rule: "Identifier TypeArguments?", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":1,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 1]], ["TypeArguments?", yylstack[yysp]])
    break;

case 360:
    /*! Production::    FuncHeader : Identifier TypeArguments? WITH */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier TypeArguments? WITH", ...[yyvstack[yysp - 2], null, yyvstack[yysp - 1].unwrap]), { rule: "Identifier TypeArguments? WITH", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src } }, {"first":1,"last":3,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["WITH", yylstack[yysp]])
    break;

case 361:
    /*! Production::    FuncHeader : Identifier WITH TypeArguments? */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("Identifier WITH TypeArguments?", ...[yyvstack[yysp - 2], null, yyvstack[yysp].unwrap]), { rule: "Identifier WITH TypeArguments?", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp - 1].last_line, last_column: yylstack[yysp - 1].last_column, src: yylstack[yysp - 2].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["WITH", yylstack[yysp - 1]], ["TypeArguments?", yylstack[yysp]])
    break;

case 362:
    /*! Production::    FuncHeader : TypeArguments? Params */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["FuncHeader"]("TypeArguments? Params", ...[null, yyvstack[yysp], yyvstack[yysp - 1].unwrap]), { rule: "TypeArguments? Params", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":2,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments?", yylstack[yysp - 1]], ["Params", yylstack[yysp]])
    break;

case 363:
    /*! Production::    TypeArguments? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["", yylstack[yysp]])
    break;

case 364:
    /*! Production::    TypeArguments? : "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("<( TypeArguments )>", ...[yyvstack[yysp - 1]]), { rule: "<( TypeArguments )>", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["<(", yylstack[yysp - 2]], ["TypeArguments", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 365:
    /*! Production::    TypeArguments? : "<(" INDENT TypeArguments OUTDENT ")>" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments?"]("<( INDENT TypeArguments OUTDENT )>", ...[yyvstack[yysp - 2]]), { rule: "<( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["<(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 366:
    /*! Production::    Params : PARAM_START PARAM_END */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Params"]("PARAM_START PARAM_END", ...[[]]), { rule: "PARAM_START PARAM_END", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 1]], ["PARAM_END", yylstack[yysp]])
    break;

case 367:
    /*! Production::    Params : PARAM_START ParamList PARAM_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Params"]("PARAM_START ParamList PARAM_END", ...[yyvstack[yysp - 1].setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "PARAM_START ParamList PARAM_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["PARAM_START", yylstack[yysp - 2]], ["ParamList", yylstack[yysp - 1]], ["PARAM_END", yylstack[yysp]])
    break;

case 368:
    /*! Production::    ParamList : Param */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("Param", ...[yyvstack[yysp]]), { rule: "Param", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Param", yylstack[yysp]])
    break;

case 369:
    /*! Production::    ParamList : ParamList "," Param */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList , Param", ...[...yyvstack[yysp - 2].addParam(yyvstack[yysp]).setLoc(yylstack[yysp - 2], yylstack[yysp])]), { rule: "ParamList , Param", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ParamList", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Param", yylstack[yysp]])
    break;

case 370:
    /*! Production::    ParamList : ParamList OptComma NEWLINE Param */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma NEWLINE Param", ...[...yyvstack[yysp - 3].addParam(yyvstack[yysp])]), { rule: "ParamList OptComma NEWLINE Param", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ParamList", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Param", yylstack[yysp]])
    break;

case 371:
    /*! Production::    ParamList : ParamList OptComma INDENT ParamList OptComma OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamList"]("ParamList OptComma INDENT ParamList OptComma OUTDENT", ...[...yyvstack[yysp - 5].addParams(yyvstack[yysp - 2].contents)]), { rule: "ParamList OptComma INDENT ParamList OptComma OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ParamList", yylstack[yysp - 5]], ["OptComma", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ParamList", yylstack[yysp - 2]], ["OptComma", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 372:
    /*! Production::    Param : ParamAssignable */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Param"]("ParamAssignable", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ParamAssignable", yylstack[yysp - 1]])
    break;

case 373:
    /*! Production::    Assign : Assignment */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assign"]("Assignment", ...[yyvstack[yysp]]), { rule: "Assignment", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignment", yylstack[yysp]])
    break;

case 374:
    /*! Production::    Assignment : Assignable AssignKeyword Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Expression", ...[yyvstack[yysp - 2], yyvstack[yysp], yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 2]], ["AssignKeyword", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 375:
    /*! Production::    Assignment : Assignable AssignKeyword INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword INDENT Expression OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yyvstack[yysp - 3]]), { rule: "Assignable AssignKeyword INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 4]], ["AssignKeyword", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 376:
    /*! Production::    Assignment : Assignable AssignKeyword NEWLINE Expression */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword NEWLINE Expression", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Assignable AssignKeyword NEWLINE Expression", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 3]], ["AssignKeyword", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 377:
    /*! Production::    Assignment : Assignable AssignKeyword Block */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignment"]("Assignable AssignKeyword Block", ...[yyvstack[yysp - 2], yy.Array.from(yyvstack[yysp]), yyvstack[yysp - 1]]), { rule: "Assignable AssignKeyword Block", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Assignable", yylstack[yysp - 2]], ["AssignKeyword", yylstack[yysp - 1]], ["Block", yylstack[yysp]])
    break;

case 378:
    /*! Production::    AssignKeyword : AS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["AssignKeyword"]("AS", ...[yylstack[yysp].origin]), { rule: "AS", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["AS", yylstack[yysp]])
    break;

case 379:
    /*! Production::    AssignKeyword : AT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AssignKeyword"]("AT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["AT", yylstack[yysp - 1]])
    break;

case 380:
    /*! Production::    AssignKeyword : FROM */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["AssignKeyword"]("FROM", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["FROM", yylstack[yysp - 1]])
    break;

case 381:
    /*! Production::    Assignable : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 382:
    /*! Production::    Assignable : ARGUMENT */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("ARGUMENT", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ARGUMENT", yylstack[yysp - 1]])
    break;

case 383:
    /*! Production::    Assignable : Object */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Object", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Object", yylstack[yysp - 1]])
    break;

case 384:
    /*! Production::    Assignable : Array */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Assignable"]("Array", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Array", yylstack[yysp - 1]])
    break;

case 385:
    /*! Production::    Assignable : Value Access */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignable"]("Value Access", ...[yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "Value Access", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens(["Value", yylstack[yysp - 1]], ["Access", yylstack[yysp]])
    break;

case 386:
    /*! Production::    Assignable : Expression IN Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Assignable"]("Expression IN Expression", ...[yyvstack[yysp], yyvstack[yysp - 2]]), { rule: "Expression IN Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Expression", yylstack[yysp - 2]], ["IN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 387:
    /*! Production::    ParamAssignable : ParamIdentifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamIdentifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ParamIdentifier", yylstack[yysp - 1]])
    break;

case 388:
    /*! Production::    ParamAssignable : ParamObject */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ParamObject", yylstack[yysp - 1]])
    break;

case 389:
    /*! Production::    ParamAssignable : ParamObject DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy.ParamAssignable('ParamObject', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
    break;

case 390:
    /*! Production::    ParamAssignable : ParamArray */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ParamAssignable"]("ParamArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["ParamArray", yylstack[yysp - 1]])
    break;

case 391:
    /*! Production::    ParamAssignable : ParamArray DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy.ParamAssignable('ParamArray', yyvstack[yysp - 2].defaults(yyvstack[yysp])).setLocation(yylstack[yysp - 2], yylstack[yysp])
    break;

case 392:
    /*! Production::    Identifier : IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Identifier"]("IDENTIFIER", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["IDENTIFIER", yylstack[yysp - 1]])
    break;

case 393:
    /*! Production::    ParamIdentifier : IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER", ...[yyvstack[yysp]]), { rule: "IDENTIFIER", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp]])
    break;

case 394:
    /*! Production::    ParamIdentifier : "..." IDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("... IDENTIFIER", ...[yyvstack[yysp]]), { rule: "... IDENTIFIER", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["...", yylstack[yysp - 1]], ["IDENTIFIER", yylstack[yysp]])
    break;

case 395:
    /*! Production::    ParamIdentifier : IDENTIFIER "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER ...", ...[yyvstack[yysp - 1]]), { rule: "IDENTIFIER ...", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 1]], ["...", yylstack[yysp]])
    break;

case 396:
    /*! Production::    ParamIdentifier : IDENTIFIER DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("IDENTIFIER DEFAULTS Expression", ...[yyvstack[yysp - 2],,yyvstack[yysp]]), { rule: "IDENTIFIER DEFAULTS Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IDENTIFIER", yylstack[yysp - 2]], ["DEFAULTS", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 397:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "THIS . PROPERTY", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["THIS", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 398:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY DEFAULTS Expression */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY DEFAULTS Expression", ...[yyvstack[yysp - 2],true,yyvstack[yysp]]), { rule: "THIS . PROPERTY DEFAULTS Expression", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":5,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["THIS", yylstack[yysp - 4]], [".", yylstack[yysp - 3]], ["PROPERTY", yylstack[yysp - 2]], ["DEFAULTS", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 399:
    /*! Production::    ParamIdentifier : THIS "." PROPERTY "..." */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS . PROPERTY ...", ...[yyvstack[yysp - 1], true]), { rule: "THIS . PROPERTY ...", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":4,"typeOf":3,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["THIS", yylstack[yysp - 3]], [".", yylstack[yysp - 2]], ["PROPERTY", yylstack[yysp - 1]], ["...", yylstack[yysp]])
    break;

case 400:
    /*! Production::    ParamIdentifier : "..." THIS "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("... THIS . PROPERTY", ...[yyvstack[yysp], true]), { rule: "... THIS . PROPERTY", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false,"expansion":true}, { generated: undefined }).setTokens(["...", yylstack[yysp - 3]], ["THIS", yylstack[yysp - 2]], [".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 401:
    /*! Production::    ParamIdentifier : THIS */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamIdentifier"]("THIS", ...[yyvstack[yysp],,,true]), { rule: "THIS", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THIS", yylstack[yysp]])
    break;

case 402:
    /*! Production::    Access : "." PROPERTY */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Access"](". PROPERTY", ...[Object.assign([yyvstack[yysp]], { loc: yylstack[yysp] }), yylstack[yysp - 1].origin === '?.']), { rule: ". PROPERTY", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp].type } }, {"first":1,"last":2,"typeOf":2,"checkGenerated":false}, { generated: undefined }).setTokens([".", yylstack[yysp - 1]], ["PROPERTY", yylstack[yysp]])
    break;

case 403:
    /*! Production::    Access : INDEX_START Expression INDEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Access"]("INDEX_START Expression INDEX_END", ...[yyvstack[yysp - 1]]), { rule: "INDEX_START Expression INDEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp].type } }, {"first":1,"last":3,"typeOf":3,"checkGenerated":false}, { generated: undefined }).setTokens(["INDEX_START", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 404:
    /*! Production::    ParamArray : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamArray"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src } }, {"first":1,"last":2,"typeOf":0,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 405:
    /*! Production::    ParamArray : "[" ParamArrayList OptVoids "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ParamArray"]("[ ParamArrayList OptVoids ]", ...[yyvstack[yysp - 2]]), { rule: "[ ParamArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp].type } }, {"first":1,"last":4,"typeOf":4,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 3]], ["ParamArrayList", yylstack[yysp - 2]], ["OptVoids", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 406:
    /*! Production::    Array : "[" "]" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ ]", ...[/* */]), { rule: "[ ]", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 1].generated }).setTokens(["[", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 407:
    /*! Production::    Array : "[" ArrayList OptVoids "]" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ ArrayList OptVoids ]", ...[...yyvstack[yysp - 2]]), { rule: "[ ArrayList OptVoids ]", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":1}, { generated: yylstack[yysp - 3].generated }).setTokens(["[", yylstack[yysp - 3]], ["ArrayList", yylstack[yysp - 2]], ["OptVoids", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 408:
    /*! Production::    Array : "[" INDENT ArrayList OptVoids OUTDENT "]" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Array"]("[ INDENT ArrayList OptVoids OUTDENT ]", ...[...yyvstack[yysp - 3]]), { rule: "[ INDENT ArrayList OptVoids OUTDENT ]", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":1,"indented":true}, { generated: yylstack[yysp - 5].generated }).setTokens(["[", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ArrayList", yylstack[yysp - 3]], ["OptVoids", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 409:
    /*! Production::    ParamArrayList : ParamArrayArg */
case 412:
    /*! Production::    ArrayList : ArrayArg */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [...yyvstack[yysp]]
    break;

case 410:
    /*! Production::    ParamArrayList : ParamArrayList "," ParamArrayArg */
case 413:
    /*! Production::    ArrayList : ArrayList "," ArrayArg */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp])
    break;

case 411:
    /*! Production::    ParamArrayList : ParamArrayList OptComma NEWLINE ParamArrayArg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].concat(yyvstack[yysp])
    break;

case 414:
    /*! Production::    ArrayList : ArrayList OptComma INDENT ArrayList OptVoids OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 5].concat(false, yyvstack[yysp - 2])
    break;

case 415:
    /*! Production::    ArrayList : ArrayList OptComma NEWLINE ArrayArg */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 3].concat(yylstack[yysp - 1].generated, yyvstack[yysp])
    break;

case 417:
    /*! Production::    ParamArrayArg : Voids ParamAssignable */
case 421:
    /*! Production::    ArrayArg : Voids Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [...yyvstack[yysp - 1], yyvstack[yysp]]
    break;

case 418:
    /*! Production::    ArrayArg : "..." Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [Object.assign(yyvstack[yysp], { expansion: true })]
    break;

case 419:
    /*! Production::    ArrayArg : Expression "..." */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [Object.assign(yyvstack[yysp - 1], { expansion: true })]
    break;

case 422:
    /*! Production::    OptVoids : %epsilon */
case 535:
    /*! Production::    OptDefault : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = undefined
    break;

case 424:
    /*! Production::    Voids : "," */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null]
    break;

case 425:
    /*! Production::    Voids : "," Voids */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null, ...yyvstack[yysp - 1]]
    break;

case 426:
    /*! Production::    Voids : "," NEWLINE Voids */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = [null, ...yyvstack[yysp - 1]]
    break;

case 427:
    /*! Production::    Statement : Return */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Return", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Return", yylstack[yysp - 1]])
    break;

case 428:
    /*! Production::    Statement : BREAK Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("BREAK Identifier", ...[yyvstack[yysp]]), { rule: "BREAK Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["BREAK", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 429:
    /*! Production::    Statement : BREAK */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("BREAK", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["BREAK", yylstack[yysp - 1]])
    break;

case 430:
    /*! Production::    Statement : CONTINUE Identifier */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("CONTINUE Identifier", ...[yyvstack[yysp]]), { rule: "CONTINUE Identifier", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["CONTINUE", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 431:
    /*! Production::    Statement : CONTINUE */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("CONTINUE", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["CONTINUE", yylstack[yysp - 1]])
    break;

case 432:
    /*! Production::    Statement : Import */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Import", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Import", yylstack[yysp - 1]])
    break;

case 433:
    /*! Production::    Statement : Export */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Export", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Export", yylstack[yysp - 1]])
    break;

case 434:
    /*! Production::    Statement : Declare */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Declare", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Declare", yylstack[yysp - 1]])
    break;

case 435:
    /*! Production::    Statement : THROW Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("THROW Expression", ...[yyvstack[yysp]]), { rule: "THROW Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THROW", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 436:
    /*! Production::    Statement : THROW INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Statement"]("THROW INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "THROW INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["THROW", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 437:
    /*! Production::    Statement : Type */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Type", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Type", yylstack[yysp - 1]])
    break;

case 438:
    /*! Production::    Statement : Interface */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Statement"]("Interface", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Interface", yylstack[yysp - 1]])
    break;

case 439:
    /*! Production::    Interface : INTERFACE Identifier TypeArguments? InterfaceBody */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? InterfaceBody", ...[yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "INTERFACE Identifier TypeArguments? InterfaceBody", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERFACE", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["TypeArguments?", yylstack[yysp - 1]], ["InterfaceBody", yylstack[yysp]])
    break;

case 440:
    /*! Production::    Interface : INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Interface"]("INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "INTERFACE Identifier TypeArguments? INDENT InterfaceBody OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["INTERFACE", yylstack[yysp - 5]], ["Identifier", yylstack[yysp - 4]], ["TypeArguments?", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["InterfaceBody", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 441:
    /*! Production::    InterfaceBody : "{" "}" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ }", ...[[]]), { rule: "{ }", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 442:
    /*! Production::    InterfaceBody : "{" InterfaceProperties "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ InterfaceProperties }", ...[yyvstack[yysp - 1].contents]), { rule: "{ InterfaceProperties }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["InterfaceProperties", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 443:
    /*! Production::    InterfaceBody : "{" INDENT InterfaceProperties OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceBody"]("{ INDENT InterfaceProperties OUTDENT }", ...[yyvstack[yysp - 2].contents]), { rule: "{ INDENT InterfaceProperties OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["InterfaceProperties", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 444:
    /*! Production::    InterfaceProperties : InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["InterfaceProperties"]("InterfaceProperty", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["InterfaceProperty", yylstack[yysp - 1]])
    break;

case 445:
    /*! Production::    InterfaceProperties : InterfaceProperties "," InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties , InterfaceProperty", ...[...yyvstack[yysp - 2].unwrap, yyvstack[yysp]]), { rule: "InterfaceProperties , InterfaceProperty", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["InterfaceProperty", yylstack[yysp]])
    break;

case 446:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma NEWLINE InterfaceProperty */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma NEWLINE InterfaceProperty", ...[...yyvstack[yysp - 3].unwrap, yyvstack[yysp]]), { rule: "InterfaceProperties OptComma NEWLINE InterfaceProperty", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["InterfaceProperty", yylstack[yysp]])
    break;

case 447:
    /*! Production::    InterfaceProperties : InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperties"]("InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT", ...[...yyvstack[yysp - 4].unwrap, yyvstack[yysp - 1]]), { rule: "InterfaceProperties OptComma INDENT InterfaceProperty OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceProperties", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["InterfaceProperty", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 448:
    /*! Production::    InterfaceProperty : InterfaceKeyword? TypeArguments? Identifier? Params ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("InterfaceKeyword? TypeArguments? Identifier? Params : TypeSentence", ...[yyvstack[yysp - 3].unwrap, yyvstack[yysp], yyvstack[yysp - 2], { ...yyvstack[yysp - 5].unwrap, arguments: yyvstack[yysp - 4].unwrap, optional: yylstack[yysp - 4].origin === "?:" }]), { rule: "InterfaceKeyword? TypeArguments? Identifier? Params : TypeSentence", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["InterfaceKeyword?", yylstack[yysp - 5]], ["TypeArguments?", yylstack[yysp - 4]], ["Identifier?", yylstack[yysp - 3]], ["Params", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 449:
    /*! Production::    InterfaceProperty : PROPERTY ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("PROPERTY : TypeSentence", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], null, { optional: yylstack[yysp - 1].origin === "?:" }]), { rule: "PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 450:
    /*! Production::    InterfaceProperty : READONLY PROPERTY ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceProperty"]("READONLY PROPERTY : TypeSentence", ...[new yy.Identifier(null, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp], null, { optional: yylstack[yysp - 1].origin === "?:", readonly: true }]), { rule: "READONLY PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["READONLY", yylstack[yysp - 3]], ["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 451:
    /*! Production::    InterfaceKeyword? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceKeyword?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["", yylstack[yysp]])
    break;

case 452:
    /*! Production::    InterfaceKeyword? : NEW */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceKeyword?"]("NEW", ...[{ new: true }]), { rule: "NEW", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["NEW", yylstack[yysp]])
    break;

case 453:
    /*! Production::    InterfaceKeyword? : READONLY */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["InterfaceKeyword?"]("READONLY", ...[{ readonly: true }]), { rule: "READONLY", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["READONLY", yylstack[yysp]])
    break;

case 454:
    /*! Production::    Identifier? : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(null, null, null, null, true);
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Identifier?"]("", ...[undefined]), { rule: "", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["", yylstack[yysp]])
    break;

case 455:
    /*! Production::    Identifier? : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Identifier?"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 456:
    /*! Production::    Type : TYPE TypeDeclaration */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE TypeDeclaration", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPE", yylstack[yysp - 1]], ["TypeDeclaration", yylstack[yysp]])
    break;

case 457:
    /*! Production::    Type : TYPE INDENT TypeDeclaration OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE INDENT TypeDeclaration OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "TYPE INDENT TypeDeclaration OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPE", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeDeclaration", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 458:
    /*! Production::    Type : TYPE NEWLINE TypeDeclaration */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Type"]("TYPE NEWLINE TypeDeclaration", ...[yyvstack[yysp]]), { rule: "TYPE NEWLINE TypeDeclaration", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TYPE", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeDeclaration", yylstack[yysp]])
    break;

case 459:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS TypeSentence", ...[yyvstack[yysp - 3], yyvstack[yysp], yyvstack[yysp - 2].unwrap]), { rule: "Identifier TypeArguments? AS TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["TypeArguments?", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 460:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 5], yyvstack[yysp - 1], yyvstack[yysp - 4].unwrap]), { rule: "Identifier TypeArguments? AS INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 5]], ["TypeArguments?", yylstack[yysp - 4]], ["AS", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 461:
    /*! Production::    TypeDeclaration : Identifier TypeArguments? AS NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeDeclaration"]("Identifier TypeArguments? AS NEWLINE TypeSentence", ...[yyvstack[yysp - 4], yyvstack[yysp], yyvstack[yysp - 3].unwrap]), { rule: "Identifier TypeArguments? AS NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 4]], ["TypeArguments?", yylstack[yysp - 3]], ["AS", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 462:
    /*! Production::    TypeSentence : TypeSentence "&" TypeValue */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & TypeValue", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "TypeSentence & TypeValue", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 2]], ["&", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 463:
    /*! Production::    TypeSentence : TypeSentence "|" TypeValue */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | TypeValue", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp - 1], yyvstack[yysp]]), { rule: "TypeSentence | TypeValue", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 2]], ["|", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 464:
    /*! Production::    TypeSentence : TypeSentence "&" INDENT TypeValue OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & INDENT TypeValue OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeSentence & INDENT TypeValue OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 4]], ["&", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeValue", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 465:
    /*! Production::    TypeSentence : TypeSentence "|" INDENT TypeValue OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | INDENT TypeValue OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 3], yyvstack[yysp - 1]]), { rule: "TypeSentence | INDENT TypeValue OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 4]], ["|", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeValue", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 466:
    /*! Production::    TypeSentence : TypeSentence "&" NEWLINE TypeValue */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence & NEWLINE TypeValue", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "TypeSentence & NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 3]], ["&", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 467:
    /*! Production::    TypeSentence : TypeSentence "|" NEWLINE TypeValue */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeSentence | NEWLINE TypeValue", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "TypeSentence | NEWLINE TypeValue", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeSentence", yylstack[yysp - 3]], ["|", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeValue", yylstack[yysp]])
    break;

case 468:
    /*! Production::    TypeSentence : TypeValue */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeSentence"]("TypeValue", ...[yyvstack[yysp]]), { rule: "TypeValue", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp]])
    break;

case 469:
    /*! Production::    TypeValue : TypeArray */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeArray", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeArray", yylstack[yysp - 1]])
    break;

case 470:
    /*! Production::    TypeValue : TypeObject */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeObject", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeObject", yylstack[yysp - 1]])
    break;

case 471:
    /*! Production::    TypeValue : Literal */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("Literal", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Literal", yylstack[yysp - 1]])
    break;

case 472:
    /*! Production::    TypeValue : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 473:
    /*! Production::    TypeValue : TAG */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TAG", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TAG", yylstack[yysp - 1]])
    break;

case 474:
    /*! Production::    TypeValue : TypeWithArguments */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeValue"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeWithArguments", yylstack[yysp - 1]])
    break;

case 475:
    /*! Production::    TypeWithArguments : "(" TypeSentence ")" INDEX_START INDEX_END */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("( TypeSentence ) INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 3] }]), { rule: "( TypeSentence ) INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["(", yylstack[yysp - 4]], ["TypeSentence", yylstack[yysp - 3]], [")", yylstack[yysp - 2]], ["INDEX_START", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 476:
    /*! Production::    TypeWithArguments : TypeValue INDEX_START INDEX_END */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("TypeValue INDEX_START INDEX_END", ...[{ isArray: true, type: yyvstack[yysp - 2] }]), { rule: "TypeValue INDEX_START INDEX_END", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeValue", yylstack[yysp - 2]], ["INDEX_START", yylstack[yysp - 1]], ["INDEX_END", yylstack[yysp]])
    break;

case 477:
    /*! Production::    TypeWithArguments : Identifier "<(" TypeArguments ")>" */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( TypeArguments )>", ...[{ type: yyvstack[yysp - 3], arguments: yyvstack[yysp - 1] }]), { rule: "Identifier <( TypeArguments )>", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 3]], ["<(", yylstack[yysp - 2]], ["TypeArguments", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 478:
    /*! Production::    TypeWithArguments : Identifier "<(" INDENT TypeArguments OUTDENT ")>" */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeWithArguments"]("Identifier <( INDENT TypeArguments OUTDENT )>", ...[{ type: yyvstack[yysp - 5], arguments: yyvstack[yysp - 2] }]), { rule: "Identifier <( INDENT TypeArguments OUTDENT )>", loc: { first_line: yylstack[yysp - 5].first_line, first_column: yylstack[yysp - 5].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 5].src, type: yylstack[yysp - 5].type } }, {"first":1,"last":6,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 5]], ["<(", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeArguments", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], [")>", yylstack[yysp]])
    break;

case 479:
    /*! Production::    TypeArguments : TypeArgument */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArguments"]("TypeArgument", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeArgument", yylstack[yysp - 1]])
    break;

case 480:
    /*! Production::    TypeArguments : TypeArguments "," TypeArgument */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments , TypeArgument", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArguments , TypeArgument", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["TypeArgument", yylstack[yysp]])
    break;

case 481:
    /*! Production::    TypeArguments : TypeArguments OptComma NEWLINE TypeArgument */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma NEWLINE TypeArgument", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArguments OptComma NEWLINE TypeArgument", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeArgument", yylstack[yysp]])
    break;

case 482:
    /*! Production::    TypeArguments : TypeArguments OptComma INDENT TypeArgument OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArguments"]("TypeArguments OptComma INDENT TypeArgument OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArguments OptComma INDENT TypeArgument OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArguments", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeArgument", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 483:
    /*! Production::    TypeArgument : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArgument"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp]])
    break;

case 484:
    /*! Production::    TypeArgument : Identifier EXTENDS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArgument"]("Identifier EXTENDS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier EXTENDS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["EXTENDS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 485:
    /*! Production::    TypeArgument : TypeWithArguments */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArgument"]("TypeWithArguments", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeWithArguments", yylstack[yysp - 1]])
    break;

case 486:
    /*! Production::    TypeObject : "{" TypeObjProps "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ TypeObjProps }", ...[...yyvstack[yysp - 1].contents]), { rule: "{ TypeObjProps }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["TypeObjProps", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 487:
    /*! Production::    TypeObject : "{" INDENT TypeObjProps OUTDENT "}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObject"]("{ INDENT TypeObjProps OUTDENT }", ...[...yyvstack[yysp - 2].contents]), { rule: "{ INDENT TypeObjProps OUTDENT }", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeObjProps", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 488:
    /*! Production::    TypeObjProps : TypeObjProps OptComma NEWLINE TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma NEWLINE TypeObjProp", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeObjProps OptComma NEWLINE TypeObjProp", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeObjProps", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeObjProp", yylstack[yysp]])
    break;

case 489:
    /*! Production::    TypeObjProps : TypeObjProps "," TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps , TypeObjProp", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeObjProps , TypeObjProp", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeObjProps", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["TypeObjProp", yylstack[yysp]])
    break;

case 490:
    /*! Production::    TypeObjProps : TypeObjProps OptComma INDENT TypeObjProp OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProps"]("TypeObjProps OptComma INDENT TypeObjProp OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeObjProps OptComma INDENT TypeObjProp OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeObjProps", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeObjProp", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 491:
    /*! Production::    TypeObjProps : TypeObjProp */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeObjProps"]("TypeObjProp", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeObjProp", yylstack[yysp - 1]])
    break;

case 492:
    /*! Production::    TypeObjProp : PROPERTY ":" TypeSentence */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : TypeSentence", ...[yyvstack[yysp - 2], yyvstack[yysp], yylstack[yysp - 1].origin === '?:']), { rule: "PROPERTY : TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 493:
    /*! Production::    TypeObjProp : PROPERTY ":" NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : NEWLINE TypeSentence", ...[yyvstack[yysp - 3], yyvstack[yysp], yylstack[yysp - 2].origin === '?:']), { rule: "PROPERTY : NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 494:
    /*! Production::    TypeObjProp : PROPERTY ":" INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY : INDENT TypeSentence OUTDENT", ...[yyvstack[yysp - 4], yyvstack[yysp - 1], yylstack[yysp - 3].origin === '?:']), { rule: "PROPERTY : INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 4]], [":", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 495:
    /*! Production::    TypeObjProp : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("PROPERTY :", ...[yyvstack[yysp - 1], , yylstack[yysp].origin === '?:']), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 1]], [":", yylstack[yysp]])
    break;

case 496:
    /*! Production::    TypeObjProp : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeObjProp"]("Identifier", ...[yyvstack[yysp]]), { rule: "Identifier", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp]])
    break;

case 497:
    /*! Production::    TypeArray : "[" TypeArrayItems "]" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArray"]("[ TypeArrayItems ]", ...[...yyvstack[yysp - 1].contents]), { rule: "[ TypeArrayItems ]", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 2]], ["TypeArrayItems", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 498:
    /*! Production::    TypeArray : "[" INDENT TypeArrayItems OUTDENT "]" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArray"]("[ INDENT TypeArrayItems OUTDENT ]", ...[...yyvstack[yysp - 2].contents]), { rule: "[ INDENT TypeArrayItems OUTDENT ]", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["[", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["TypeArrayItems", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["]", yylstack[yysp]])
    break;

case 499:
    /*! Production::    TypeArrayItems : TypeSentence */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["TypeArrayItems"]("TypeSentence", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["TypeSentence", yylstack[yysp - 1]])
    break;

case 500:
    /*! Production::    TypeArrayItems : TypeArrayItems OptComma NEWLINE TypeSentence */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma NEWLINE TypeSentence", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp]]), { rule: "TypeArrayItems OptComma NEWLINE TypeSentence", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArrayItems", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 501:
    /*! Production::    TypeArrayItems : TypeArrayItems OptComma INDENT TypeSentence OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems OptComma INDENT TypeSentence OUTDENT", ...[...yyvstack[yysp - 4].contents, yyvstack[yysp - 1]]), { rule: "TypeArrayItems OptComma INDENT TypeSentence OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArrayItems", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["TypeSentence", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 502:
    /*! Production::    TypeArrayItems : TypeArrayItems "," TypeSentence */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["TypeArrayItems"]("TypeArrayItems , TypeSentence", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp]]), { rule: "TypeArrayItems , TypeSentence", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["TypeArrayItems", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["TypeSentence", yylstack[yysp]])
    break;

case 503:
    /*! Production::    Declare : DeclarationKeyword Declarations */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword Declarations", ...[{ keyword: yyvstack[yysp - 1], statements: yyvstack[yysp] }, [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "DeclarationKeyword Declarations", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DeclarationKeyword", yylstack[yysp - 1]], ["Declarations", yylstack[yysp]])
    break;

case 504:
    /*! Production::    Declare : DeclarationKeyword INDENT Declarations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declare"]("DeclarationKeyword INDENT Declarations OUTDENT", ...[{ keyword: yyvstack[yysp - 3], statements: yyvstack[yysp - 1], indented: true }, [yylstack[yysp - 3], yylstack[yysp - 1]]]), { rule: "DeclarationKeyword INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DeclarationKeyword", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Declarations", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 505:
    /*! Production::    DeclarationKeyword : VAR */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("VAR", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["VAR", yylstack[yysp - 1]])
    break;

case 506:
    /*! Production::    DeclarationKeyword : LET */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("LET", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["LET", yylstack[yysp - 1]])
    break;

case 507:
    /*! Production::    DeclarationKeyword : CONST */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["DeclarationKeyword"]("CONST", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["CONST", yylstack[yysp - 1]])
    break;

case 508:
    /*! Production::    Declarations : Declaration */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declaration", ...[yyvstack[yysp].unwrap]), { rule: "Declaration", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declaration", yylstack[yysp]])
    break;

case 509:
    /*! Production::    Declarations : Declarations "," Declaration */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations , Declaration", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].unwrap]), { rule: "Declarations , Declaration", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declarations", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["Declaration", yylstack[yysp]])
    break;

case 510:
    /*! Production::    Declarations : Declarations OptComma NEWLINE Declaration */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma NEWLINE Declaration", ...[...yyvstack[yysp - 3].contents, yylstack[yysp - 1].generated, yyvstack[yysp].unwrap]), { rule: "Declarations OptComma NEWLINE Declaration", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declarations", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["Declaration", yylstack[yysp]])
    break;

case 511:
    /*! Production::    Declarations : Declarations OptComma INDENT Declarations OUTDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declarations"]("Declarations OptComma INDENT Declarations OUTDENT", ...[...yyvstack[yysp - 4].contents, false, ...yyvstack[yysp - 1].contents]), { rule: "Declarations OptComma INDENT Declarations OUTDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Declarations", yylstack[yysp - 4]], ["OptComma", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Declarations", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 512:
    /*! Production::    Declaration : VARIDENTIFIER */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Declaration"]("VARIDENTIFIER", ...[new yy.Identifier("VARIDENTIFIER", yyvstack[yysp]).setLoc(yylstack[yysp])]), { rule: "VARIDENTIFIER", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["VARIDENTIFIER", yylstack[yysp]])
    break;

case 513:
    /*! Production::    Declaration : Assignment */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Declaration"]("Assignment", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Assignment", yylstack[yysp - 1]])
    break;

case 514:
    /*! Production::    Return : RETURN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN", ...[undefined]), { rule: "RETURN", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp]])
    break;

case 515:
    /*! Production::    Return : RETURN Expression */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN Expression", ...[yyvstack[yysp]]), { rule: "RETURN Expression", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 516:
    /*! Production::    Return : RETURN INDENT Expression OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN INDENT Expression OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Expression OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 517:
    /*! Production::    Return : RETURN INDENT Body OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Return"]("RETURN INDENT Body OUTDENT", ...[yyvstack[yysp - 1]]), { rule: "RETURN INDENT Body OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["RETURN", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Body", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 518:
    /*! Production::    Import : IMPORT OptDefault ImportList Import(FROM) STRING */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault ImportList Import(FROM) STRING", ...[yyvstack[yysp - 2].contents, yyvstack[yysp], false, yyvstack[yysp - 3]]), { rule: "IMPORT OptDefault ImportList Import(FROM) STRING", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 4]], ["OptDefault", yylstack[yysp - 3]], ["ImportList", yylstack[yysp - 2]], ["Import(FROM)", yylstack[yysp - 1]], ["STRING", yylstack[yysp]])
    break;

case 519:
    /*! Production::    Import : IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 4]]), { rule: "IMPORT INDENT OptDefault ImportList Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 6]], ["INDENT", yylstack[yysp - 5]], ["OptDefault", yylstack[yysp - 4]], ["ImportList", yylstack[yysp - 3]], ["Import(FROM)", yylstack[yysp - 2]], ["STRING", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 520:
    /*! Production::    Import : IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault INDENT ImportList Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 6]], ["OptDefault", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ImportList", yylstack[yysp - 3]], ["Import(FROM)", yylstack[yysp - 2]], ["STRING", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 521:
    /*! Production::    Import : IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING", ...[yyvstack[yysp - 3].contents, yyvstack[yysp], false, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 6]], ["OptDefault", yylstack[yysp - 5]], ["INDENT", yylstack[yysp - 4]], ["ImportList", yylstack[yysp - 3]], ["OUTDENT", yylstack[yysp - 2]], ["Import(FROM)", yylstack[yysp - 1]], ["STRING", yylstack[yysp]])
    break;

case 522:
    /*! Production::    Import : IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 4].contents, yyvstack[yysp - 1], false, yyvstack[yysp - 6]]), { rule: "IMPORT INDENT OptDefault INDENT ImportList OUTDENT Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 8]], ["INDENT", yylstack[yysp - 7]], ["OptDefault", yylstack[yysp - 6]], ["INDENT", yylstack[yysp - 5]], ["ImportList", yylstack[yysp - 4]], ["OUTDENT", yylstack[yysp - 3]], ["Import(FROM)", yylstack[yysp - 2]], ["STRING", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 523:
    /*! Production::    Import : IMPORT OptDefault "*" AS Identifier Import(FROM) STRING */

    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault * AS Identifier Import(FROM) STRING", ...[yyvstack[yysp - 2], yyvstack[yysp], true, yyvstack[yysp - 5]]), { rule: "IMPORT OptDefault * AS Identifier Import(FROM) STRING", loc: { first_line: yylstack[yysp - 6].first_line, first_column: yylstack[yysp - 6].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 6].src, type: yylstack[yysp - 6].type } }, {"first":1,"last":7,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 6]], ["OptDefault", yylstack[yysp - 5]], ["*", yylstack[yysp - 4]], ["AS", yylstack[yysp - 3]], ["Identifier", yylstack[yysp - 2]], ["Import(FROM)", yylstack[yysp - 1]], ["STRING", yylstack[yysp]])
    break;

case 524:
    /*! Production::    Import : IMPORT INDENT OptDefault "*" AS Identifier Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT INDENT OptDefault * AS Identifier Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], true, yyvstack[yysp - 6]]), { rule: "IMPORT INDENT OptDefault * AS Identifier Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 8]], ["INDENT", yylstack[yysp - 7]], ["OptDefault", yylstack[yysp - 6]], ["*", yylstack[yysp - 5]], ["AS", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["Import(FROM)", yylstack[yysp - 2]], ["STRING", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 525:
    /*! Production::    Import : IMPORT OptDefault INDENT "*" AS Identifier Import(FROM) STRING OUTDENT */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Import"]("IMPORT OptDefault INDENT * AS Identifier Import(FROM) STRING OUTDENT", ...[yyvstack[yysp - 3], yyvstack[yysp - 1], true, yyvstack[yysp - 7]]), { rule: "IMPORT OptDefault INDENT * AS Identifier Import(FROM) STRING OUTDENT", loc: { first_line: yylstack[yysp - 8].first_line, first_column: yylstack[yysp - 8].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 8].src, type: yylstack[yysp - 8].type } }, {"first":1,"last":9,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["IMPORT", yylstack[yysp - 8]], ["OptDefault", yylstack[yysp - 7]], ["INDENT", yylstack[yysp - 6]], ["*", yylstack[yysp - 5]], ["AS", yylstack[yysp - 4]], ["Identifier", yylstack[yysp - 3]], ["Import(FROM)", yylstack[yysp - 2]], ["STRING", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 527:
    /*! Production::    Export : EXPORT ExportList */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT ExportList", ...[{ list: yyvstack[yysp] }]), { rule: "EXPORT ExportList", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 1]], ["ExportList", yylstack[yysp]])
    break;

case 528:
    /*! Production::    Export : EXPORT INDENT ExportList OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT ExportList OUTDENT", ...[{ list: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT ExportList OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["ExportList", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 529:
    /*! Production::    Export : EXPORT DEFAULT Expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT DEFAULT Expression", ...[{ defaults: yyvstack[yysp] }]), { rule: "EXPORT DEFAULT Expression", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 2]], ["DEFAULT", yylstack[yysp - 1]], ["Expression", yylstack[yysp]])
    break;

case 530:
    /*! Production::    Export : EXPORT INDENT DEFAULT Expression OUDENT */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT DEFAULT Expression OUDENT", ...[{ defaults: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT DEFAULT Expression OUDENT", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["DEFAULT", yylstack[yysp - 2]], ["Expression", yylstack[yysp - 1]], ["OUDENT", yylstack[yysp]])
    break;

case 531:
    /*! Production::    Export : EXPORT Declare */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT Declare", ...[{ declarations: yyvstack[yysp] }]), { rule: "EXPORT Declare", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 1]], ["Declare", yylstack[yysp]])
    break;

case 532:
    /*! Production::    Export : EXPORT INDENT Declare OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Declare OUTDENT", ...[{ declarations: yyvstack[yysp - 1] }]), { rule: "EXPORT INDENT Declare OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Declare", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 533:
    /*! Production::    Export : EXPORT Exportable */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT Exportable", ...[{ exportable: yyvstack[yysp].unwrap }]), { rule: "EXPORT Exportable", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 1]], ["Exportable", yylstack[yysp]])
    break;

case 534:
    /*! Production::    Export : EXPORT INDENT Exportable OUTDENT */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["Export"]("EXPORT INDENT Exportable OUTDENT", ...[{ exportable: yyvstack[yysp - 1].unwrap }]), { rule: "EXPORT INDENT Exportable OUTDENT", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["EXPORT", yylstack[yysp - 3]], ["INDENT", yylstack[yysp - 2]], ["Exportable", yylstack[yysp - 1]], ["OUTDENT", yylstack[yysp]])
    break;

case 537:
    /*! Production::    OptDefault : Identifier OptComma NEWLINE */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = yyvstack[yysp - 2]
    break;

case 538:
    /*! Production::    ImportList : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ImportList"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 539:
    /*! Production::    ImportList : "{" ImportNames "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("{ ImportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ImportNames }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["ImportNames", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 540:
    /*! Production::    ImportList : "{{" INDENT ImportNames OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportList"]("{{ INDENT ImportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ImportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ImportNames", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 541:
    /*! Production::    ExportList : "{" ExportNames "}" */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportList"]("{ ExportNames }", ...[yyvstack[yysp - 1]]), { rule: "{ ExportNames }", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{", yylstack[yysp - 2]], ["ExportNames", yylstack[yysp - 1]], ["}", yylstack[yysp]])
    break;

case 542:
    /*! Production::    ExportList : "{{" INDENT ExportNames OUTDENT "}}" */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportList"]("{{ INDENT ExportNames OUTDENT }}", ...[yyvstack[yysp - 2]]), { rule: "{{ INDENT ExportNames OUTDENT }}", loc: { first_line: yylstack[yysp - 4].first_line, first_column: yylstack[yysp - 4].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 4].src, type: yylstack[yysp - 4].type } }, {"first":1,"last":5,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["{{", yylstack[yysp - 4]], ["INDENT", yylstack[yysp - 3]], ["ExportNames", yylstack[yysp - 2]], ["OUTDENT", yylstack[yysp - 1]], ["}}", yylstack[yysp]])
    break;

case 543:
    /*! Production::    ExportNames : ExportName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportName", ...[yyvstack[yysp].contents]), { rule: "ExportName", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExportName", yylstack[yysp]])
    break;

case 544:
    /*! Production::    ExportNames : ExportNames "," ExportName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportNames , ExportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ExportNames , ExportName", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExportNames", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["ExportName", yylstack[yysp]])
    break;

case 545:
    /*! Production::    ExportNames : ExportNames OptComma NEWLINE ExportName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportNames"]("ExportNames OptComma NEWLINE ExportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ExportNames OptComma NEWLINE ExportName", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ExportNames", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["ExportName", yylstack[yysp]])
    break;

case 546:
    /*! Production::    ExportName : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1])]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 1]], [":", yylstack[yysp]])
    break;

case 547:
    /*! Production::    ExportName : PROPERTY ":" Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 548:
    /*! Production::    ExportName : PROPERTY ":" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 549:
    /*! Production::    ExportName : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ExportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

case 550:
    /*! Production::    ExportName : Identifier AS DEFAULT */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("Identifier AS DEFAULT", ...[yyvstack[yysp - 2],,true]), { rule: "Identifier AS DEFAULT", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["DEFAULT", yylstack[yysp]])
    break;

case 551:
    /*! Production::    ExportName : Identifier AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ExportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2],yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 552:
    /*! Production::    Exportable : Class */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Exportable"]("Class", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Class", yylstack[yysp - 1]])
    break;

case 553:
    /*! Production::    Exportable : Function */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["Exportable"]("Function", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Function", yylstack[yysp - 1]])
    break;

case 554:
    /*! Production::    ImportNames : ImportName */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportName", ...[yyvstack[yysp].contents]), { rule: "ImportName", loc: { first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type } }, {"first":1,"last":1,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ImportName", yylstack[yysp]])
    break;

case 555:
    /*! Production::    ImportNames : ImportNames "," ImportName */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportNames , ImportName", ...[...yyvstack[yysp - 2].contents, yyvstack[yysp].contents]), { rule: "ImportNames , ImportName", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ImportNames", yylstack[yysp - 2]], [",", yylstack[yysp - 1]], ["ImportName", yylstack[yysp]])
    break;

case 556:
    /*! Production::    ImportNames : ImportNames OptComma NEWLINE ImportName */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportNames"]("ImportNames OptComma NEWLINE ImportName", ...[...yyvstack[yysp - 3].contents, yyvstack[yysp].contents]), { rule: "ImportNames OptComma NEWLINE ImportName", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["ImportNames", yylstack[yysp - 3]], ["OptComma", yylstack[yysp - 2]], ["NEWLINE", yylstack[yysp - 1]], ["ImportName", yylstack[yysp]])
    break;

case 557:
    /*! Production::    ImportName : PROPERTY ":" */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY :", ...[new yy.Identifier(0, yyvstack[yysp - 1]).setLoc(yylstack[yysp - 1]), , [yylstack[yysp - 1], yylstack[yysp]]]), { rule: "PROPERTY :", loc: { first_line: yylstack[yysp - 1].first_line, first_column: yylstack[yysp - 1].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 1].src, type: yylstack[yysp - 1].type } }, {"first":1,"last":2,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 1]], [":", yylstack[yysp]])
    break;

case 558:
    /*! Production::    ImportName : PROPERTY ":" Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY : Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 2]).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "PROPERTY : Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 2]], [":", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 559:
    /*! Production::    ImportName : PROPERTY ":" AS Identifier */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("PROPERTY : AS Identifier", ...[new yy.Identifier(0, yyvstack[yysp - 3]).setLoc(yylstack[yysp - 3]), yyvstack[yysp]]), { rule: "PROPERTY : AS Identifier", loc: { first_line: yylstack[yysp - 3].first_line, first_column: yylstack[yysp - 3].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 3].src, type: yylstack[yysp - 3].type } }, {"first":1,"last":4,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["PROPERTY", yylstack[yysp - 3]], [":", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 560:
    /*! Production::    ImportName : Identifier AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("Identifier AS Identifier", ...[yyvstack[yysp - 2], yyvstack[yysp]]), { rule: "Identifier AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["Identifier", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 561:
    /*! Production::    ImportName : DEFAULT AS Identifier */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = Object.assign(new yy["ImportName"]("DEFAULT AS Identifier", ...[(new yy.Identifier(null, 'default')).setLoc(yylstack[yysp - 2]), yyvstack[yysp]]), { rule: "DEFAULT AS Identifier", loc: { first_line: yylstack[yysp - 2].first_line, first_column: yylstack[yysp - 2].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp - 2].src, type: yylstack[yysp - 2].type } }, {"first":1,"last":3,"typeOf":1,"checkGenerated":false}, { generated: undefined }).setTokens(["DEFAULT", yylstack[yysp - 2]], ["AS", yylstack[yysp - 1]], ["Identifier", yylstack[yysp]])
    break;

case 562:
    /*! Production::    ImportName : Identifier */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
    this._$ = yylstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)
    
    
    this.$ = new yy["ImportName"]("Identifier", ...[yyvstack[yysp]]).setLocation({ first_line: yylstack[yysp].first_line, first_column: yylstack[yysp].first_column, last_line: yylstack[yysp].last_line, last_column: yylstack[yysp].last_column, src: yylstack[yysp].src, type: yylstack[yysp].type }).setTokens(["Identifier", yylstack[yysp - 1]])
    break;

}
},
table: bt({
  len: u([
  117,
  1,
  2,
  0,
  57,
  7,
  93,
  s,
  [0, 11],
  91,
  91,
  s,
  [0, 3],
  114,
  0,
  0,
  90,
  s,
  [0, 8],
  s,
  [113, 5],
  114,
  114,
  0,
  113,
  6,
  116,
  115,
  90,
  0,
  91,
  11,
  94,
  116,
  5,
  12,
  9,
  191,
  7,
  28,
  117,
  5,
  2,
  s,
  [0, 3],
  116,
  s,
  [0, 7],
  5,
  91,
  s,
  [7, 3],
  113,
  s,
  [0, 9],
  127,
  s,
  [0, 4],
  116,
  116,
  c,
  [17, 5],
  119,
  120,
  s,
  [0, 4],
  3,
  7,
  s,
  [0, 6],
  7,
  29,
  7,
  119,
  0,
  c,
  [24, 3],
  s,
  [113, 4],
  0,
  116,
  113,
  114,
  115,
  c,
  [8, 4],
  s,
  [0, 12],
  66,
  0,
  66,
  s,
  [0, 15],
  127,
  c,
  [34, 4],
  6,
  0,
  1,
  113,
  118,
  0,
  0,
  96,
  113,
  2,
  117,
  s,
  [0, 3],
  96,
  93,
  90,
  52,
  s,
  [96, 4],
  113,
  96,
  113,
  57,
  116,
  113,
  5,
  2,
  2,
  68,
  117,
  3,
  4,
  60,
  55,
  54,
  120,
  1,
  90,
  116,
  0,
  c,
  [33, 4],
  94,
  6,
  2,
  0,
  12,
  116,
  92,
  92,
  96,
  0,
  2,
  116,
  121,
  12,
  0,
  115,
  5,
  1,
  s,
  [0, 3],
  8,
  8,
  10,
  2,
  10,
  11,
  14,
  0,
  7,
  113,
  5,
  96,
  115,
  7,
  7,
  3,
  0,
  27,
  c,
  [89, 3],
  c,
  [26, 4],
  5,
  4,
  93,
  c,
  [56, 3],
  c,
  [166, 4],
  3,
  3,
  4,
  54,
  2,
  115,
  0,
  2,
  1,
  1,
  c,
  [219, 3],
  6,
  8,
  3,
  6,
  9,
  0,
  29,
  2,
  96,
  89,
  89,
  96,
  c,
  [165, 4],
  53,
  96,
  0,
  57,
  116,
  0,
  5,
  117,
  0,
  57,
  1,
  55,
  120,
  114,
  68,
  50,
  58,
  0,
  7,
  118,
  0,
  113,
  58,
  113,
  72,
  c,
  [266, 4],
  0,
  7,
  c,
  [215, 3],
  5,
  28,
  0,
  8,
  6,
  27,
  c,
  [108, 4],
  0,
  29,
  6,
  c,
  [17, 4],
  0,
  s,
  [96, 6],
  0,
  96,
  117,
  2,
  66,
  89,
  115,
  c,
  [11, 5],
  0,
  89,
  c,
  [5, 4],
  0,
  53,
  0,
  5,
  116,
  0,
  58,
  113,
  53,
  96,
  c,
  [294, 3],
  53,
  53,
  116,
  0,
  54,
  96,
  s,
  [113, 6],
  66,
  57,
  113,
  120,
  c,
  [406, 3],
  7,
  51,
  116,
  53,
  6,
  0,
  s,
  [126, 3],
  120,
  c,
  [137, 3],
  96,
  95,
  0,
  96,
  89,
  4,
  91,
  0,
  4,
  c,
  [176, 4],
  96,
  89,
  0,
  90,
  c,
  [422, 3],
  116,
  0,
  2,
  2,
  5,
  117,
  1,
  13,
  2,
  116,
  c,
  [287, 3],
  113,
  0,
  1,
  1,
  5,
  0,
  0,
  1,
  c,
  [212, 3],
  6,
  0,
  0,
  9,
  6,
  9,
  54,
  2,
  2,
  6,
  1,
  0,
  6,
  1,
  7,
  6,
  1,
  1,
  113,
  1,
  1,
  96,
  4,
  0,
  1,
  5,
  5,
  117,
  2,
  c,
  [237, 3],
  1,
  3,
  0,
  0,
  c,
  [176, 3],
  1,
  0,
  96,
  c,
  [178, 3],
  0,
  29,
  5,
  0,
  126,
  12,
  96,
  0,
  116,
  115,
  54,
  3,
  119,
  5,
  121,
  116,
  57,
  1,
  60,
  0,
  1,
  121,
  c,
  [126, 3],
  57,
  0,
  57,
  c,
  [38, 4],
  c,
  [166, 3],
  29,
  2,
  5,
  2,
  29,
  3,
  89,
  90,
  c,
  [65, 3],
  28,
  7,
  5,
  5,
  c,
  [57, 3],
  c,
  [22, 3],
  66,
  s,
  [113, 3],
  115,
  1,
  54,
  113,
  0,
  c,
  [54, 3],
  c,
  [42, 3],
  54,
  c,
  [209, 4],
  96,
  157,
  96,
  53,
  53,
  57,
  57,
  59,
  113,
  55,
  2,
  120,
  0,
  119,
  116,
  0,
  4,
  4,
  c,
  [213, 3],
  0,
  127,
  s,
  [7, 3],
  2,
  c,
  [108, 3],
  c,
  [351, 3],
  c,
  [190, 3],
  94,
  c,
  [8, 4],
  c,
  [222, 3],
  c,
  [420, 3],
  116,
  96,
  116,
  0,
  10,
  11,
  0,
  96,
  59,
  59,
  61,
  1,
  10,
  0,
  8,
  2,
  15,
  0,
  c,
  [168, 3],
  14,
  c,
  [94, 4],
  29,
  c,
  [158, 4],
  3,
  1,
  2,
  c,
  [180, 4],
  1,
  6,
  c,
  [180, 4],
  c,
  [135, 3],
  c,
  [425, 4],
  7,
  3,
  4,
  0,
  115,
  c,
  [65, 3],
  29,
  0,
  2,
  11,
  c,
  [438, 4],
  6,
  89,
  113,
  c,
  [280, 3],
  121,
  54,
  157,
  0,
  116,
  117,
  c,
  [86, 3],
  57,
  c,
  [93, 3],
  c,
  [4, 3],
  c,
  [67, 4],
  115,
  118,
  117,
  c,
  [7, 4],
  27,
  c,
  [395, 3],
  5,
  28,
  1,
  28,
  28,
  c,
  [243, 3],
  c,
  [234, 3],
  2,
  6,
  5,
  32,
  0,
  113,
  96,
  96,
  59,
  0,
  115,
  c,
  [82, 3],
  c,
  [74, 3],
  3,
  c,
  [592, 3],
  c,
  [646, 3],
  c,
  [648, 3],
  s,
  [0, 3],
  59,
  c,
  [241, 3],
  54,
  0,
  0,
  126,
  c,
  [5, 3],
  3,
  c,
  [286, 4],
  94,
  0,
  4,
  c,
  [215, 3],
  c,
  [520, 3],
  c,
  [446, 3],
  c,
  [15, 3],
  5,
  c,
  [462, 4],
  6,
  6,
  0,
  113,
  c,
  [284, 3],
  0,
  0,
  10,
  12,
  c,
  [266, 3],
  s,
  [2, 3],
  c,
  [355, 4],
  2,
  2,
  4,
  1,
  c,
  [212, 4],
  4,
  c,
  [344, 6],
  5,
  c,
  [119, 6],
  9,
  0,
  4,
  1,
  4,
  c,
  [534, 4],
  4,
  96,
  54,
  4,
  c,
  [64, 5],
  54,
  54,
  116,
  7,
  c,
  [32, 3],
  c,
  [186, 4],
  1,
  89,
  26,
  26,
  c,
  [3, 3],
  27,
  27,
  7,
  1,
  4,
  c,
  [231, 3],
  7,
  27,
  27,
  59,
  113,
  c,
  [52, 3],
  1,
  57,
  57,
  c,
  [108, 4],
  57,
  c,
  [12, 3],
  c,
  [78, 3],
  c,
  [339, 3],
  3,
  61,
  0,
  1,
  57,
  0,
  7,
  c,
  [95, 3],
  c,
  [88, 4],
  c,
  [95, 4],
  c,
  [117, 3],
  c,
  [681, 5],
  c,
  [132, 4],
  2,
  5,
  4,
  c,
  [620, 6],
  s,
  [0, 3],
  c,
  [665, 3],
  c,
  [11, 3],
  1,
  0,
  2,
  89,
  2,
  89,
  c,
  [518, 3],
  c,
  [10, 3],
  7,
  3,
  113,
  96,
  c,
  [40, 4],
  c,
  [223, 3],
  c,
  [280, 4],
  s,
  [0, 6],
  c,
  [47, 6],
  c,
  [734, 3],
  c,
  [781, 3],
  c,
  [614, 4],
  27,
  c,
  [242, 3],
  s,
  [0, 5],
  c,
  [235, 3],
  c,
  [122, 3],
  c,
  [424, 4],
  s,
  [1, 3],
  c,
  [166, 4],
  7,
  c,
  [19, 4],
  c,
  [324, 4],
  7
]),
  symbol: u([
  1,
  s,
  [3, 5, 1],
  16,
  21,
  24,
  28,
  29,
  30,
  s,
  [33, 5, 1],
  40,
  46,
  s,
  [51, 4, 1],
  73,
  78,
  80,
  83,
  89,
  92,
  95,
  101,
  s,
  [104, 6, 1],
  112,
  113,
  117,
  s,
  [119, 8, 1],
  130,
  131,
  133,
  134,
  136,
  137,
  138,
  142,
  s,
  [144, 4, 1],
  149,
  151,
  152,
  153,
  155,
  156,
  157,
  s,
  [159, 7, 1],
  167,
  s,
  [171, 4, 5],
  188,
  194,
  196,
  197,
  200,
  201,
  202,
  204,
  205,
  s,
  [207, 5, 1],
  213,
  s,
  [218, 4, 1],
  224,
  225,
  228,
  230,
  231,
  232,
  236,
  237,
  239,
  241,
  245,
  252,
  253,
  259,
  271,
  272,
  275,
  276,
  278,
  1,
  1,
  26,
  1,
  4,
  5,
  s,
  [8, 7, 1],
  17,
  19,
  22,
  26,
  39,
  s,
  [41, 5, 1],
  47,
  48,
  51,
  52,
  s,
  [55, 18, 1],
  88,
  99,
  100,
  c,
  [134, 4],
  143,
  166,
  168,
  s,
  [172, 4, 1],
  201,
  1,
  17,
  c,
  [47, 3],
  99,
  100,
  c,
  [64, 10],
  s,
  [15, 6, 1],
  22,
  23,
  25,
  26,
  31,
  32,
  38,
  c,
  [73, 8],
  s,
  [49, 4, 1],
  c,
  [75, 18],
  s,
  [74, 4, 1],
  81,
  s,
  [84, 5, 1],
  91,
  93,
  s,
  [96, 5, 1],
  s,
  [102, 6, 1],
  110,
  111,
  115,
  116,
  118,
  125,
  126,
  129,
  139,
  140,
  141,
  143,
  158,
  177,
  220,
  221,
  243,
  c,
  [93, 88],
  144,
  158,
  241,
  c,
  [91, 91],
  c,
  [458, 16],
  38,
  c,
  [459, 50],
  c,
  [456, 48],
  c,
  [389, 88],
  238,
  c,
  [662, 66],
  c,
  [203, 47],
  c,
  [113, 468],
  c,
  [769, 98],
  c,
  [114, 130],
  c,
  [113, 97],
  26,
  c,
  [84, 4],
  201,
  c,
  [119, 74],
  s,
  [184, 5, 1],
  c,
  [349, 63],
  81,
  c,
  [1233, 177],
  199,
  c,
  [90, 89],
  203,
  206,
  16,
  30,
  32,
  38,
  79,
  80,
  81,
  144,
  182,
  233,
  c,
  [1630, 21],
  27,
  30,
  c,
  [104, 37],
  80,
  c,
  [105, 27],
  134,
  c,
  [106, 5],
  232,
  c,
  [401, 76],
  183,
  c,
  [402, 39],
  16,
  30,
  38,
  81,
  183,
  16,
  24,
  31,
  77,
  117,
  144,
  212,
  234,
  235,
  240,
  242,
  244,
  c,
  [125, 4],
  80,
  133,
  134,
  144,
  164,
  c,
  [2234, 6],
  s,
  [8, 19, 1],
  s,
  [28, 51, 1],
  c,
  [193, 3],
  s,
  [84, 6, 1],
  91,
  92,
  93,
  s,
  [95, 19, 1],
  s,
  [115, 12, 1],
  129,
  c,
  [213, 7],
  s,
  [139, 9, 1],
  c,
  [217, 7],
  158,
  c,
  [619, 47],
  8,
  16,
  38,
  81,
  144,
  241,
  279,
  16,
  28,
  30,
  33,
  38,
  c,
  [128, 3],
  90,
  c,
  [85, 5],
  144,
  c,
  [76, 3],
  181,
  c,
  [43, 4],
  241,
  271,
  272,
  281,
  284,
  c,
  [1118, 64],
  s,
  [154, 4, 1],
  c,
  [150, 44],
  s,
  [273, 4, 1],
  278,
  26,
  38,
  144,
  241,
  260,
  144,
  c,
  [2125, 68],
  c,
  [2583, 49],
  23,
  74,
  75,
  115,
  177,
  c,
  [809, 89],
  183,
  229,
  30,
  80,
  134,
  144,
  c,
  [347, 3],
  c,
  [7, 7],
  c,
  [602, 4],
  134,
  183,
  c,
  [725, 17],
  c,
  [1474, 102],
  11,
  12,
  c,
  [115, 13],
  c,
  [2810, 4],
  53,
  54,
  c,
  [210, 7],
  c,
  [124, 49],
  169,
  170,
  171,
  174,
  c,
  [1715, 67],
  c,
  [965, 90],
  c,
  [116, 132],
  c,
  [1946, 103],
  17,
  c,
  [230, 18],
  c,
  [1119, 3],
  c,
  [116, 13],
  114,
  c,
  [117, 52],
  214,
  216,
  c,
  [119, 28],
  15,
  c,
  [233, 3],
  25,
  c,
  [120, 32],
  c,
  [236, 67],
  247,
  249,
  251,
  c,
  [120, 8],
  30,
  80,
  233,
  c,
  [1417, 3],
  134,
  c,
  [1204, 3],
  128,
  130,
  131,
  s,
  [224, 4, 1],
  c,
  [131, 3],
  38,
  c,
  [98, 10],
  144,
  150,
  c,
  [59, 6],
  241,
  s,
  [262, 5, 1],
  269,
  125,
  126,
  128,
  s,
  [220, 4, 1],
  c,
  [3694, 7],
  17,
  21,
  s,
  [22, 4, 2],
  c,
  [175, 7],
  39,
  c,
  [410, 50],
  c,
  [1113, 48],
  c,
  [3150, 591],
  c,
  [1205, 209],
  c,
  [113, 69],
  c,
  [3030, 65],
  c,
  [228, 52],
  195,
  c,
  [910, 441],
  c,
  [66, 71],
  c,
  [2377, 138],
  c,
  [485, 210],
  75,
  125,
  126,
  c,
  [5390, 3],
  114,
  c,
  [1402, 137],
  c,
  [3497, 4],
  c,
  [116, 48],
  178,
  179,
  c,
  [4092, 129],
  c,
  [5817, 7],
  c,
  [327, 113],
  99,
  100,
  c,
  [115, 8],
  c,
  [2412, 9],
  c,
  [1732, 100],
  c,
  [328, 96],
  c,
  [6138, 181],
  158,
  177,
  c,
  [89, 9],
  19,
  c,
  [6380, 43],
  c,
  [331, 184],
  c,
  [96, 199],
  c,
  [947, 113],
  c,
  [209, 209],
  c,
  [208, 9],
  16,
  19,
  32,
  38,
  c,
  [761, 27],
  81,
  c,
  [762, 14],
  183,
  c,
  [170, 17],
  c,
  [4736, 100],
  c,
  [286, 113],
  c,
  [5979, 5],
  18,
  84,
  86,
  87,
  c,
  [503, 11],
  18,
  19,
  23,
  27,
  c,
  [5585, 3],
  c,
  [300, 27],
  74,
  75,
  c,
  [5548, 3],
  c,
  [494, 3],
  c,
  [306, 6],
  115,
  125,
  126,
  c,
  [5535, 5],
  c,
  [5534, 27],
  c,
  [5166, 91],
  15,
  18,
  84,
  18,
  84,
  99,
  100,
  c,
  [192, 10],
  c,
  [191, 3],
  c,
  [187, 29],
  c,
  [185, 13],
  c,
  [184, 4],
  238,
  c,
  [60, 12],
  c,
  [59, 27],
  84,
  c,
  [1308, 15],
  c,
  [1360, 10],
  c,
  [600, 43],
  c,
  [769, 27],
  84,
  89,
  90,
  92,
  94,
  c,
  [486, 48],
  s,
  [189, 4, 1],
  c,
  [490, 37],
  38,
  c,
  [986, 89],
  198,
  c,
  [3752, 127],
  c,
  [5994, 7],
  c,
  [2137, 119],
  c,
  [6364, 38],
  c,
  [6430, 3],
  c,
  [326, 31],
  182,
  233,
  16,
  c,
  [6469, 3],
  81,
  183,
  30,
  233,
  c,
  [6252, 12],
  c,
  [347, 116],
  c,
  [230, 58],
  c,
  [229, 33],
  233,
  c,
  [92, 58],
  c,
  [6685, 34],
  c,
  [1723, 96],
  38,
  82,
  c,
  [398, 16],
  c,
  [5177, 51],
  c,
  [1555, 55],
  c,
  [5589, 64],
  c,
  [119, 26],
  c,
  [5591, 25],
  c,
  [647, 28],
  c,
  [248, 99],
  15,
  26,
  31,
  38,
  180,
  28,
  15,
  17,
  c,
  [452, 3],
  38,
  39,
  118,
  c,
  [8, 10],
  20,
  c,
  [9, 5],
  77,
  118,
  117,
  144,
  c,
  [12, 3],
  c,
  [482, 4],
  c,
  [22, 5],
  26,
  38,
  77,
  114,
  117,
  144,
  215,
  217,
  242,
  15,
  16,
  24,
  25,
  c,
  [183, 4],
  s,
  [240, 5, 2],
  251,
  c,
  [6505, 7],
  c,
  [1879, 113],
  c,
  [105, 4],
  164,
  c,
  [2379, 162],
  c,
  [405, 49],
  c,
  [7219, 6],
  280,
  c,
  [7226, 7],
  15,
  26,
  180,
  c,
  [7229, 4],
  c,
  [7228, 39],
  c,
  [373, 97],
  114,
  144,
  241,
  282,
  283,
  38,
  30,
  c,
  [7579, 4],
  c,
  [160, 3],
  183,
  c,
  [1223, 86],
  c,
  [1132, 96],
  180,
  c,
  [311, 63],
  c,
  [2372, 53],
  c,
  [7536, 5],
  260,
  134,
  139,
  232,
  16,
  38,
  134,
  232,
  c,
  [2263, 10],
  22,
  26,
  c,
  [3625, 42],
  22,
  26,
  c,
  [655, 115],
  75,
  177,
  114,
  c,
  [4636, 17],
  c,
  [8211, 101],
  32,
  c,
  [608, 3],
  229,
  c,
  [8438, 4],
  80,
  81,
  134,
  232,
  30,
  134,
  232,
  c,
  [17, 10],
  c,
  [7633, 3],
  229,
  232,
  c,
  [6793, 29],
  30,
  c,
  [1797, 21],
  c,
  [3733, 165],
  c,
  [89, 178],
  c,
  [3702, 129],
  19,
  c,
  [836, 43],
  c,
  [262, 96],
  c,
  [3851, 173],
  c,
  [2004, 4],
  c,
  [1293, 24],
  c,
  [7888, 94],
  c,
  [390, 10],
  17,
  19,
  23,
  26,
  c,
  [383, 9],
  c,
  [381, 22],
  77,
  c,
  [3660, 10],
  143,
  20,
  c,
  [11346, 11],
  20,
  23,
  c,
  [505, 28],
  c,
  [56, 14],
  c,
  [8001, 120],
  c,
  [790, 38],
  c,
  [349, 53],
  c,
  [347, 33],
  16,
  c,
  [348, 4],
  c,
  [4199, 4],
  c,
  [351, 31],
  80,
  c,
  [653, 8],
  c,
  [4198, 9],
  c,
  [415, 12],
  c,
  [414, 30],
  c,
  [711, 8],
  c,
  [407, 11],
  c,
  [406, 43],
  c,
  [5517, 4],
  15,
  25,
  c,
  [645, 3],
  250,
  251,
  c,
  [417, 9],
  c,
  [648, 31],
  c,
  [415, 116],
  c,
  [414, 85],
  19,
  c,
  [248, 3],
  c,
  [346, 28],
  c,
  [296, 8],
  c,
  [4309, 34],
  c,
  [6561, 92],
  c,
  [819, 5],
  c,
  [8646, 17],
  c,
  [405, 44],
  251,
  30,
  233,
  c,
  [8764, 3],
  132,
  224,
  225,
  227,
  c,
  [194, 113],
  15,
  26,
  38,
  135,
  180,
  c,
  [113, 3],
  c,
  [2088, 25],
  c,
  [33, 3],
  39,
  79,
  115,
  134,
  135,
  c,
  [8, 4],
  115,
  135,
  c,
  [42, 22],
  261,
  262,
  263,
  266,
  269,
  115,
  c,
  [2159, 23],
  c,
  [29, 5],
  270,
  38,
  c,
  [2839, 3],
  267,
  268,
  s,
  [125, 4, 1],
  220,
  221,
  223,
  c,
  [5711, 209],
  c,
  [96, 576],
  c,
  [5811, 117],
  c,
  [5998, 13],
  c,
  [5997, 37],
  c,
  [5996, 18],
  c,
  [281, 89],
  c,
  [8990, 115],
  c,
  [869, 473],
  c,
  [281, 192],
  c,
  [7986, 44],
  116,
  c,
  [2316, 8],
  c,
  [1968, 3],
  76,
  c,
  [3257, 40],
  c,
  [8767, 77],
  c,
  [2495, 11],
  c,
  [2494, 30],
  76,
  c,
  [2495, 129],
  c,
  [345, 10],
  c,
  [14712, 44],
  c,
  [1548, 111],
  c,
  [6110, 106],
  c,
  [378, 160],
  c,
  [53, 53],
  c,
  [5017, 116],
  c,
  [5308, 54],
  c,
  [4734, 209],
  c,
  [113, 565],
  c,
  [2708, 66],
  c,
  [894, 10],
  c,
  [8578, 30],
  c,
  [8577, 17],
  c,
  [349, 139],
  c,
  [8581, 95],
  26,
  39,
  16,
  26,
  c,
  [6181, 3],
  93,
  183,
  c,
  [5516, 42],
  91,
  c,
  [1197, 7],
  183,
  c,
  [1361, 126],
  c,
  [1359, 28],
  c,
  [163, 8],
  c,
  [1264, 7],
  c,
  [16670, 4],
  c,
  [14272, 7],
  c,
  [11549, 77],
  c,
  [11548, 49],
  c,
  [126, 252],
  c,
  [734, 115],
  c,
  [8877, 136],
  c,
  [3171, 96],
  c,
  [15568, 73],
  183,
  c,
  [8884, 97],
  c,
  [96, 89],
  c,
  [8034, 24],
  c,
  [9486, 38],
  c,
  [15146, 33],
  c,
  [95, 4],
  c,
  [5523, 115],
  c,
  [8819, 3],
  c,
  [3949, 205],
  28,
  c,
  [90, 89],
  c,
  [9653, 65],
  c,
  [9744, 91],
  c,
  [91, 6],
  c,
  [3535, 116],
  26,
  39,
  17,
  26,
  c,
  [582, 5],
  c,
  [10399, 117],
  28,
  16,
  24,
  c,
  [4089, 3],
  c,
  [9470, 4],
  c,
  [9652, 4],
  26,
  38,
  c,
  [14400, 304],
  c,
  [113, 151],
  23,
  114,
  c,
  [7948, 5],
  20,
  c,
  [9968, 3],
  c,
  [479, 3],
  118,
  c,
  [9960, 3],
  c,
  [7319, 3],
  c,
  [7318, 3],
  16,
  24,
  c,
  [9961, 7],
  c,
  [8830, 15],
  c,
  [8316, 11],
  c,
  [4015, 43],
  26,
  39,
  141,
  277,
  8,
  16,
  c,
  [9694, 4],
  139,
  90,
  c,
  [6707, 3],
  285,
  286,
  38,
  c,
  [9709, 9],
  26,
  c,
  [8, 3],
  26,
  39,
  c,
  [248, 113],
  39,
  39,
  c,
  [1420, 96],
  c,
  [344, 3],
  c,
  [343, 4],
  26,
  39,
  139,
  c,
  [9788, 5],
  c,
  [13485, 27],
  c,
  [6158, 86],
  c,
  [17134, 6],
  c,
  [7137, 4],
  180,
  39,
  139,
  16,
  38,
  254,
  26,
  39,
  116,
  c,
  [243, 96],
  c,
  [9397, 6],
  233,
  c,
  [9378, 29],
  c,
  [7323, 5],
  c,
  [2755, 126],
  11,
  12,
  47,
  48,
  c,
  [104, 7],
  174,
  c,
  [6660, 122],
  c,
  [1319, 156],
  c,
  [1692, 49],
  c,
  [4892, 54],
  c,
  [1146, 3],
  c,
  [11394, 9],
  c,
  [792, 17],
  c,
  [9096, 69],
  c,
  [9095, 24],
  c,
  [791, 5],
  c,
  [8168, 7],
  c,
  [125, 13],
  c,
  [8169, 11],
  c,
  [17457, 206],
  c,
  [8576, 14],
  c,
  [8575, 43],
  c,
  [9337, 10],
  c,
  [9395, 36],
  c,
  [8932, 15],
  25,
  c,
  [8524, 19],
  c,
  [356, 12],
  c,
  [1503, 80],
  c,
  [8929, 10],
  c,
  [1275, 7],
  250,
  251,
  c,
  [8825, 42],
  c,
  [5785, 24],
  c,
  [57, 48],
  15,
  c,
  [116, 10],
  c,
  [6620, 35],
  129,
  c,
  [55, 8],
  c,
  [1565, 4],
  c,
  [1336, 22],
  c,
  [1335, 3],
  c,
  [207, 7],
  144,
  241,
  c,
  [1373, 29],
  13,
  14,
  22,
  c,
  [7024, 173],
  c,
  [3754, 6],
  116,
  c,
  [9482, 5],
  c,
  [8837, 27],
  270,
  c,
  [116, 3],
  c,
  [387, 4],
  c,
  [2219, 5],
  c,
  [8819, 5],
  c,
  [661, 10],
  c,
  [354, 44],
  c,
  [5254, 66],
  c,
  [20695, 417],
  c,
  [8212, 37],
  c,
  [574, 11],
  20,
  c,
  [6773, 59],
  c,
  [20637, 98],
  38,
  76,
  c,
  [2615, 18],
  c,
  [1342, 8],
  c,
  [16431, 52],
  c,
  [7663, 41],
  c,
  [1133, 5],
  c,
  [7668, 42],
  c,
  [7123, 25],
  c,
  [22267, 45],
  c,
  [9199, 196],
  c,
  [6009, 9],
  21,
  23,
  c,
  [4000, 12],
  c,
  [20392, 8],
  c,
  [20390, 25],
  c,
  [2043, 4],
  88,
  c,
  [462, 3],
  c,
  [20379, 3],
  c,
  [464, 8],
  115,
  c,
  [465, 17],
  c,
  [20369, 12],
  c,
  [10028, 143],
  c,
  [95, 9],
  c,
  [15078, 29],
  c,
  [552, 25],
  c,
  [52, 27],
  85,
  c,
  [53, 24],
  c,
  [11881, 48],
  c,
  [57, 66],
  c,
  [6779, 31],
  88,
  c,
  [292, 5],
  c,
  [6780, 11],
  193,
  c,
  [6781, 114],
  c,
  [15471, 55],
  c,
  [3970, 28],
  c,
  [6104, 110],
  c,
  [120, 63],
  c,
  [6223, 156],
  84,
  94,
  95,
  192,
  c,
  [4, 4],
  c,
  [7020, 126],
  c,
  [1427, 44],
  c,
  [18564, 127],
  c,
  [7375, 4],
  50,
  81,
  93,
  c,
  [7, 14],
  26,
  c,
  [4538, 97],
  c,
  [13814, 117],
  c,
  [6292, 116],
  c,
  [17935, 90],
  183,
  c,
  [3580, 3],
  c,
  [327, 116],
  82,
  c,
  [1225, 13],
  c,
  [5918, 106],
  c,
  [7326, 212],
  c,
  [775, 117],
  c,
  [5751, 5],
  c,
  [6242, 4],
  c,
  [10, 6],
  c,
  [15905, 5],
  c,
  [2236, 105],
  c,
  [4321, 3],
  c,
  [15860, 5],
  c,
  [4132, 52],
  c,
  [59, 61],
  c,
  [15992, 6],
  c,
  [60, 34],
  118,
  c,
  [61, 8],
  c,
  [6070, 3],
  c,
  [16044, 8],
  c,
  [16030, 6],
  217,
  242,
  c,
  [4130, 3],
  16,
  17,
  c,
  [6564, 6],
  118,
  c,
  [6074, 5],
  c,
  [1103, 113],
  20,
  25,
  c,
  [16161, 4],
  26,
  c,
  [6201, 7],
  248,
  251,
  26,
  c,
  [21812, 30],
  c,
  [6164, 3],
  139,
  144,
  241,
  c,
  [5927, 10],
  c,
  [6171, 7],
  141,
  277,
  c,
  [6185, 6],
  c,
  [19026, 45],
  c,
  [459, 8],
  26,
  c,
  [67, 3],
  283,
  26,
  c,
  [79, 5],
  144,
  241,
  90,
  c,
  [94, 3],
  26,
  c,
  [5095, 7],
  c,
  [15605, 106],
  c,
  [6008, 4],
  c,
  [15720, 116],
  c,
  [4671, 24],
  c,
  [4418, 5],
  16,
  254,
  17,
  30,
  38,
  113,
  114,
  134,
  144,
  148,
  255,
  256,
  257,
  22,
  c,
  [13343, 6],
  c,
  [6611, 4],
  c,
  [8039, 58],
  c,
  [12267, 48],
  c,
  [13326, 282],
  c,
  [17285, 121],
  c,
  [14523, 11],
  c,
  [6069, 43],
  c,
  [3815, 157],
  c,
  [15316, 92],
  c,
  [23203, 29],
  c,
  [15432, 112],
  c,
  [5386, 3],
  c,
  [15020, 50],
  c,
  [11916, 123],
  c,
  [173, 173],
  20,
  c,
  [117, 8],
  c,
  [15668, 9],
  c,
  [118, 51],
  c,
  [14965, 56],
  c,
  [15367, 114],
  c,
  [118, 102],
  c,
  [117, 10],
  39,
  c,
  [15002, 24],
  c,
  [2070, 3],
  c,
  [27, 27],
  c,
  [15021, 4],
  c,
  [15062, 30],
  c,
  [15021, 4],
  c,
  [6467, 23],
  c,
  [90, 5],
  c,
  [28, 25],
  26,
  38,
  c,
  [1854, 29],
  c,
  [5390, 5],
  26,
  38,
  26,
  c,
  [15087, 4],
  268,
  c,
  [13, 5],
  c,
  [7222, 6],
  38,
  39,
  c,
  [50, 24],
  c,
  [15116, 305],
  c,
  [4964, 75],
  c,
  [6209, 99],
  c,
  [12980, 69],
  c,
  [875, 58],
  c,
  [6087, 41],
  c,
  [13866, 116],
  c,
  [790, 3],
  c,
  [13044, 338],
  c,
  [25799, 329],
  c,
  [1128, 59],
  26,
  39,
  c,
  [5445, 136],
  c,
  [5444, 44],
  c,
  [10161, 56],
  49,
  82,
  c,
  [23274, 186],
  c,
  [5246, 4],
  c,
  [11844, 61],
  c,
  [194, 39],
  c,
  [20916, 17],
  c,
  [23681, 285],
  c,
  [96, 103],
  c,
  [9691, 10],
  c,
  [1112, 108],
  c,
  [4996, 6],
  c,
  [6, 6],
  c,
  [12380, 114],
  c,
  [3598, 3],
  39,
  117,
  144,
  c,
  [3428, 57],
  c,
  [21207, 10],
  c,
  [5057, 3],
  c,
  [5055, 9],
  c,
  [2927, 5],
  125,
  141,
  277,
  144,
  241,
  141,
  277,
  26,
  c,
  [5020, 4],
  286,
  c,
  [4953, 8],
  144,
  241,
  c,
  [4954, 6],
  125,
  39,
  144,
  241,
  c,
  [4977, 4],
  144,
  241,
  82,
  c,
  [374, 5],
  c,
  [9155, 27],
  c,
  [27, 27],
  c,
  [9175, 6],
  30,
  c,
  [4766, 8],
  30,
  134,
  144,
  232,
  20,
  30,
  c,
  [13, 3],
  c,
  [4769, 6],
  229,
  c,
  [969, 100],
  c,
  [4362, 54],
  17,
  26,
  c,
  [30633, 91],
  c,
  [718, 12],
  c,
  [1476, 54],
  c,
  [1710, 59],
  c,
  [1235, 111],
  c,
  [10154, 7],
  25,
  39,
  c,
  [9, 5],
  c,
  [11431, 90],
  c,
  [3644, 24],
  c,
  [3703, 26],
  266,
  269,
  c,
  [141, 141],
  c,
  [865, 54],
  c,
  [10046, 7],
  25,
  c,
  [3774, 4],
  c,
  [4, 4],
  17,
  c,
  [1058, 4],
  c,
  [17, 3],
  c,
  [78, 54],
  c,
  [8462, 172],
  c,
  [593, 6],
  76,
  c,
  [8755, 114],
  c,
  [3983, 201],
  c,
  [20942, 64],
  c,
  [483, 97],
  82,
  c,
  [1568, 100],
  c,
  [582, 3],
  c,
  [7087, 61],
  c,
  [62, 13],
  c,
  [1947, 46],
  c,
  [1797, 6],
  39,
  c,
  [1928, 3],
  125,
  c,
  [1924, 5],
  c,
  [1900, 3],
  c,
  [6969, 3],
  141,
  277,
  13,
  14,
  39,
  26,
  c,
  [6611, 7],
  256,
  257,
  c,
  [11294, 7],
  30,
  144,
  241,
  258,
  c,
  [954, 27],
  c,
  [11722, 13],
  c,
  [5509, 161],
  39,
  135,
  39,
  115,
  c,
  [472, 89],
  c,
  [91, 91],
  c,
  [1390, 7],
  c,
  [416, 3],
  c,
  [4, 3],
  c,
  [1384, 5],
  c,
  [11, 3],
  c,
  [5136, 209],
  c,
  [215, 3],
  c,
  [4260, 248],
  c,
  [9647, 109],
  c,
  [1408, 48],
  s,
  [125, 3],
  c,
  [2890, 6],
  c,
  [2889, 3],
  c,
  [8, 7],
  17,
  30,
  233,
  c,
  [2033, 34],
  c,
  [11187, 246],
  c,
  [20578, 218],
  c,
  [667, 90],
  s,
  [39, 4],
  20,
  c,
  [593, 7],
  c,
  [14417, 97],
  c,
  [2773, 29],
  c,
  [130, 4]
]),
  type: u([
  s,
  [2, 67],
  s,
  [0, 50],
  1,
  c,
  [103, 59],
  s,
  [2, 96],
  c,
  [100, 94],
  c,
  [91, 159],
  s,
  [0, 47],
  c,
  [204, 156],
  c,
  [203, 113],
  c,
  [113, 452],
  c,
  [114, 228],
  c,
  [113, 52],
  c,
  [119, 114],
  c,
  [1118, 71],
  c,
  [1233, 203],
  c,
  [226, 25],
  c,
  [236, 11],
  c,
  [1818, 94],
  c,
  [401, 115],
  c,
  [116, 5],
  c,
  [121, 7],
  c,
  [419, 14],
  c,
  [2057, 97],
  c,
  [856, 101],
  c,
  [198, 19],
  c,
  [769, 125],
  c,
  [117, 5],
  c,
  [5, 3],
  c,
  [1242, 115],
  c,
  [492, 13],
  c,
  [809, 89],
  c,
  [103, 8],
  c,
  [385, 27],
  c,
  [1124, 172],
  c,
  [1366, 165],
  c,
  [116, 183],
  c,
  [472, 117],
  c,
  [464, 117],
  c,
  [584, 54],
  c,
  [123, 11],
  c,
  [137, 20],
  c,
  [1110, 18],
  c,
  [764, 73],
  c,
  [524, 227],
  c,
  [3150, 453],
  c,
  [681, 275],
  c,
  [2137, 116],
  c,
  [797, 407],
  c,
  [3006, 188],
  c,
  [485, 232],
  c,
  [4438, 184],
  c,
  [2377, 121],
  c,
  [5817, 92],
  c,
  [209, 118],
  c,
  [328, 210],
  c,
  [6138, 116],
  c,
  [90, 46],
  c,
  [331, 196],
  c,
  [96, 261],
  c,
  [1156, 305],
  c,
  [2599, 123],
  c,
  [286, 118],
  c,
  [1447, 73],
  c,
  [1845, 183],
  c,
  [67, 49],
  c,
  [122, 54],
  c,
  [2139, 125],
  c,
  [7762, 161],
  c,
  [207, 117],
  c,
  [324, 138],
  c,
  [5640, 9],
  c,
  [5881, 9],
  c,
  [5420, 190],
  c,
  [8317, 114],
  c,
  [6072, 93],
  c,
  [3093, 193],
  c,
  [1073, 57],
  c,
  [4517, 120],
  c,
  [1690, 53],
  c,
  [170, 10],
  c,
  [69, 12],
  c,
  [1879, 191],
  c,
  [2379, 138],
  c,
  [6834, 14],
  c,
  [6017, 15],
  c,
  [7228, 83],
  c,
  [6160, 50],
  c,
  [118, 11],
  c,
  [1453, 94],
  c,
  [9540, 204],
  c,
  [7533, 4],
  c,
  [3, 5],
  c,
  [125, 5],
  c,
  [2263, 123],
  c,
  [184, 51],
  c,
  [4193, 122],
  c,
  [1131, 10],
  c,
  [308, 7],
  c,
  [1330, 11],
  c,
  [6793, 30],
  c,
  [3733, 186],
  c,
  [5461, 185],
  c,
  [3702, 159],
  c,
  [3964, 152],
  c,
  [3851, 128],
  c,
  [3666, 184],
  c,
  [6208, 233],
  c,
  [10414, 116],
  c,
  [336, 108],
  c,
  [9941, 75],
  c,
  [6623, 214],
  c,
  [6234, 192],
  c,
  [1979, 8],
  c,
  [3107, 134],
  c,
  [227, 42],
  c,
  [41, 29],
  c,
  [6979, 23],
  c,
  [5711, 278],
  c,
  [96, 578],
  c,
  [1912, 117],
  c,
  [2186, 204],
  c,
  [869, 473],
  c,
  [281, 238],
  c,
  [3257, 79],
  c,
  [1111, 100],
  c,
  [3871, 318],
  c,
  [7665, 184],
  c,
  [776, 106],
  c,
  [1610, 159],
  c,
  [8645, 282],
  c,
  [113, 564],
  c,
  [66, 57],
  c,
  [3735, 183],
  c,
  [8581, 60],
  c,
  [130, 51],
  c,
  [1361, 163],
  c,
  [15281, 79],
  c,
  [5573, 137],
  c,
  [126, 244],
  c,
  [9315, 119],
  c,
  [3644, 233],
  c,
  [14844, 72],
  c,
  [191, 122],
  c,
  [9811, 95],
  c,
  [8630, 281],
  c,
  [7583, 204],
  c,
  [18061, 205],
  c,
  [16411, 80],
  c,
  [2142, 58],
  c,
  [9785, 122],
  c,
  [2969, 345],
  c,
  [120, 15],
  c,
  [9613, 10],
  c,
  [8847, 14],
  c,
  [3845, 60],
  c,
  [73, 11],
  c,
  [10240, 11],
  c,
  [17056, 126],
  c,
  [1420, 96],
  c,
  [17596, 81],
  c,
  [10599, 55],
  c,
  [9907, 98],
  c,
  [589, 27],
  c,
  [7290, 19],
  c,
  [2755, 138],
  c,
  [6660, 213],
  c,
  [3094, 162],
  c,
  [901, 81],
  c,
  [17804, 126],
  c,
  [3276, 214],
  c,
  [173, 64],
  c,
  [482, 77],
  c,
  [11874, 58],
  c,
  [249, 107],
  c,
  [10629, 55],
  c,
  [8555, 36],
  c,
  [8787, 13],
  c,
  [8663, 54],
  c,
  [2990, 174],
  c,
  [1458, 27],
  c,
  [1136, 122],
  c,
  [20695, 454],
  c,
  [14228, 103],
  c,
  [2725, 140],
  c,
  [1824, 103],
  c,
  [6954, 223],
  c,
  [4477, 140],
  c,
  [5323, 189],
  c,
  [7675, 109],
  c,
  [15789, 122],
  c,
  [1075, 163],
  c,
  [17229, 126],
  c,
  [6224, 122],
  c,
  [1365, 119],
  c,
  [5756, 71],
  c,
  [8381, 181],
  c,
  [15959, 140],
  c,
  [4020, 148],
  c,
  [11585, 208],
  c,
  [7090, 188],
  c,
  [7326, 328],
  c,
  [15364, 55],
  c,
  [10, 13],
  c,
  [233, 149],
  c,
  [59, 118],
  c,
  [4140, 28],
  c,
  [4476, 83],
  c,
  [657, 57],
  c,
  [12860, 40],
  c,
  [1809, 17],
  c,
  [4414, 8],
  c,
  [6249, 60],
  c,
  [15164, 15],
  c,
  [20883, 182],
  c,
  [5507, 67],
  c,
  [15384, 22],
  c,
  [9027, 14],
  c,
  [4658, 156],
  c,
  [8621, 236],
  c,
  [2939, 164],
  c,
  [3815, 232],
  c,
  [2044, 164],
  c,
  [117, 54],
  c,
  [11916, 173],
  c,
  [12089, 189],
  c,
  [698, 166],
  c,
  [700, 135],
  c,
  [28, 27],
  c,
  [26027, 33],
  c,
  [206, 31],
  c,
  [1824, 39],
  c,
  [15109, 35],
  c,
  [8371, 13],
  c,
  [312, 21],
  c,
  [22706, 214],
  c,
  [96, 160],
  c,
  [6209, 163],
  c,
  [23579, 188],
  c,
  [17122, 142],
  c,
  [24478, 415],
  c,
  [10194, 220],
  c,
  [6208, 58],
  c,
  [12208, 173],
  c,
  [11930, 102],
  c,
  [5246, 102],
  c,
  [20917, 214],
  c,
  [15985, 292],
  c,
  [12255, 119],
  c,
  [19900, 14],
  c,
  [1237, 165],
  c,
  [21390, 15],
  c,
  [5055, 16],
  c,
  [4932, 5],
  c,
  [18121, 9],
  c,
  [18137, 11],
  c,
  [6861, 11],
  c,
  [4702, 9],
  c,
  [3005, 33],
  c,
  [3032, 34],
  c,
  [953, 17],
  c,
  [969, 149],
  c,
  [1317, 111],
  c,
  [159, 102],
  c,
  [2054, 127],
  c,
  [11327, 26],
  c,
  [4700, 100],
  c,
  [3611, 45],
  c,
  [141, 137],
  c,
  [865, 44],
  c,
  [21847, 10],
  c,
  [211, 24],
  c,
  [78, 49],
  c,
  [8462, 167],
  c,
  [4732, 58],
  c,
  [20693, 125],
  c,
  [20942, 248],
  c,
  [14168, 205],
  c,
  [17726, 70],
  c,
  [13121, 13],
  c,
  [12, 6],
  c,
  [11027, 13],
  c,
  [1338, 10],
  c,
  [954, 80],
  c,
  [4168, 215],
  c,
  [21378, 226],
  c,
  [1153, 167],
  c,
  [30175, 329],
  c,
  [14759, 19],
  c,
  [2035, 11],
  c,
  [20968, 51],
  c,
  [20578, 537],
  c,
  [10122, 123],
  c,
  [135, 19]
]),
  state: u([
  s,
  [1, 4, 1],
  15,
  16,
  7,
  42,
  35,
  29,
  14,
  9,
  10,
  13,
  11,
  47,
  8,
  43,
  44,
  49,
  95,
  6,
  31,
  33,
  32,
  27,
  63,
  28,
  66,
  102,
  113,
  67,
  105,
  30,
  75,
  74,
  106,
  12,
  48,
  26,
  51,
  64,
  5,
  25,
  24,
  22,
  59,
  17,
  20,
  21,
  126,
  165,
  118,
  119,
  122,
  123,
  128,
  169,
  171,
  113,
  168,
  175,
  176,
  177,
  c,
  [60, 38],
  179,
  c,
  [60, 7],
  180,
  184,
  c,
  [48, 46],
  187,
  c,
  [47, 17],
  185,
  c,
  [47, 28],
  188,
  c,
  [94, 46],
  189,
  c,
  [47, 46],
  190,
  c,
  [47, 46],
  191,
  c,
  [47, 46],
  193,
  c,
  [47, 46],
  195,
  c,
  [47, 46],
  197,
  206,
  c,
  [48, 7],
  199,
  203,
  9,
  200,
  c,
  [51, 27],
  205,
  201,
  c,
  [51, 4],
  204,
  202,
  c,
  [51, 3],
  207,
  c,
  [98, 46],
  210,
  212,
  213,
  218,
  220,
  217,
  223,
  225,
  c,
  [54, 7],
  226,
  c,
  [55, 39],
  231,
  238,
  233,
  235,
  236,
  237,
  239,
  245,
  249,
  c,
  [110, 46],
  253,
  251,
  261,
  262,
  c,
  [20, 3],
  265,
  257,
  59,
  254,
  258,
  c,
  [549, 18],
  c,
  [59, 17],
  270,
  c,
  [59, 8],
  266,
  268,
  c,
  [61, 3],
  274,
  271,
  275,
  277,
  3,
  276,
  c,
  [758, 46],
  279,
  285,
  283,
  286,
  106,
  287,
  289,
  106,
  287,
  291,
  293,
  294,
  c,
  [171, 46],
  297,
  c,
  [47, 4],
  295,
  296,
  35,
  298,
  c,
  [50, 41],
  302,
  c,
  [97, 7],
  301,
  c,
  [48, 39],
  303,
  c,
  [48, 7],
  304,
  c,
  [48, 39],
  305,
  c,
  [901, 64],
  318,
  c,
  [47, 5],
  308,
  310,
  28,
  313,
  c,
  [49, 4],
  311,
  c,
  [49, 4],
  317,
  26,
  316,
  c,
  [49, 9],
  324,
  c,
  [96, 38],
  320,
  322,
  325,
  c,
  [50, 8],
  328,
  335,
  105,
  332,
  333,
  345,
  c,
  [31, 5],
  339,
  342,
  340,
  336,
  338,
  344,
  343,
  352,
  113,
  349,
  350,
  353,
  c,
  [1178, 47],
  354,
  c,
  [216, 46],
  355,
  c,
  [47, 46],
  356,
  c,
  [47, 46],
  357,
  c,
  [47, 46],
  358,
  c,
  [47, 46],
  359,
  c,
  [47, 7],
  360,
  c,
  [48, 39],
  361,
  c,
  [499, 55],
  363,
  c,
  [1068, 28],
  364,
  c,
  [48, 5],
  362,
  c,
  [48, 3],
  367,
  c,
  [95, 10],
  365,
  c,
  [96, 36],
  368,
  c,
  [143, 46],
  369,
  c,
  [47, 46],
  370,
  c,
  [929, 51],
  373,
  c,
  [929, 44],
  374,
  c,
  [97, 46],
  375,
  c,
  [47, 46],
  376,
  377,
  113,
  379,
  c,
  [50, 46],
  384,
  c,
  [47, 6],
  381,
  383,
  c,
  [49, 40],
  c,
  [1988, 7],
  386,
  c,
  [103, 46],
  387,
  c,
  [47, 7],
  390,
  c,
  [102, 46],
  c,
  [2090, 4],
  279,
  c,
  [12, 7],
  c,
  [7, 28],
  391,
  c,
  [142, 46],
  c,
  [54, 7],
  392,
  c,
  [54, 52],
  394,
  128,
  277,
  3,
  395,
  c,
  [1117, 46],
  396,
  c,
  [104, 46],
  397,
  223,
  c,
  [1687, 36],
  404,
  403,
  c,
  [1687, 11],
  180,
  c,
  [271, 14],
  413,
  c,
  [64, 3],
  411,
  c,
  [64, 5],
  408,
  409,
  410,
  415,
  c,
  [117, 37],
  420,
  423,
  c,
  [116, 7],
  422,
  c,
  [166, 29],
  424,
  c,
  [49, 9],
  426,
  c,
  [48, 7],
  425,
  c,
  [214, 31],
  427,
  c,
  [48, 7],
  429,
  220,
  430,
  433,
  238,
  435,
  c,
  [1969, 4],
  436,
  c,
  [58, 7],
  438,
  c,
  [58, 31],
  437,
  c,
  [58, 7],
  439,
  441,
  c,
  [215, 7],
  445,
  c,
  [2672, 48],
  446,
  c,
  [49, 19],
  c,
  [1665, 23],
  c,
  [51, 8],
  238,
  447,
  c,
  [163, 4],
  c,
  [57, 20],
  c,
  [106, 29],
  451,
  460,
  462,
  464,
  238,
  469,
  237,
  239,
  467,
  468,
  470,
  471,
  106,
  287,
  c,
  [2250, 8],
  c,
  [497, 39],
  245,
  c,
  [224, 7],
  474,
  3,
  473,
  c,
  [118, 46],
  478,
  475,
  253,
  481,
  483,
  c,
  [2254, 6],
  486,
  59,
  484,
  487,
  488,
  c,
  [119, 46],
  492,
  489,
  490,
  226,
  223,
  495,
  c,
  [2307, 44],
  496,
  c,
  [2307, 5],
  497,
  274,
  498,
  499,
  500,
  c,
  [179, 7],
  503,
  c,
  [297, 48],
  504,
  508,
  c,
  [48, 7],
  507,
  c,
  [166, 39],
  285,
  509,
  510,
  293,
  285,
  511,
  285,
  512,
  293,
  c,
  [2020, 9],
  514,
  c,
  [2020, 3],
  515,
  c,
  [753, 14],
  518,
  c,
  [1024, 53],
  c,
  [7, 13],
  519,
  c,
  [984, 3],
  522,
  c,
  [204, 46],
  523,
  c,
  [2271, 24],
  525,
  c,
  [2271, 24],
  528,
  c,
  [2271, 49],
  c,
  [99, 18],
  530,
  c,
  [218, 28],
  223,
  c,
  [1330, 4],
  534,
  532,
  535,
  c,
  [2376, 39],
  536,
  c,
  [105, 10],
  537,
  c,
  [323, 53],
  539,
  c,
  [54, 46],
  540,
  542,
  335,
  105,
  544,
  545,
  c,
  [52, 46],
  548,
  c,
  [505, 9],
  549,
  c,
  [505, 3],
  c,
  [13, 6],
  554,
  552,
  553,
  555,
  c,
  [12, 9],
  559,
  c,
  [12, 4],
  557,
  564,
  560,
  562,
  352,
  113,
  566,
  567,
  c,
  [521, 66],
  c,
  [7, 29],
  c,
  [1434, 37],
  568,
  c,
  [1434, 11],
  223,
  574,
  c,
  [50, 10],
  573,
  c,
  [147, 85],
  577,
  c,
  [1987, 7],
  579,
  c,
  [1987, 48],
  581,
  c,
  [300, 60],
  445,
  3,
  583,
  c,
  [813, 46],
  584,
  c,
  [110, 60],
  588,
  c,
  [61, 7],
  587,
  c,
  [62, 53],
  590,
  c,
  [123, 46],
  591,
  c,
  [47, 46],
  592,
  c,
  [47, 46],
  593,
  c,
  [47, 46],
  594,
  c,
  [3441, 64],
  c,
  [47, 18],
  595,
  c,
  [1071, 11],
  180,
  597,
  c,
  [96, 46],
  c,
  [2138, 10],
  598,
  c,
  [2138, 40],
  603,
  607,
  608,
  c,
  [100, 7],
  609,
  c,
  [446, 46],
  175,
  c,
  [2910, 5],
  611,
  c,
  [2909, 43],
  c,
  [49, 5],
  612,
  c,
  [49, 48],
  613,
  c,
  [49, 43],
  c,
  [256, 10],
  614,
  c,
  [256, 40],
  616,
  c,
  [254, 7],
  615,
  c,
  [254, 46],
  617,
  223,
  c,
  [9, 7],
  619,
  620,
  623,
  c,
  [470, 18],
  624,
  c,
  [66, 28],
  451,
  c,
  [58, 7],
  627,
  628,
  630,
  c,
  [2248, 49],
  636,
  c,
  [48, 7],
  634,
  c,
  [174, 39],
  238,
  638,
  c,
  [2351, 3],
  642,
  c,
  [53, 7],
  641,
  c,
  [53, 39],
  643,
  c,
  [629, 46],
  644,
  c,
  [47, 46],
  645,
  c,
  [47, 46],
  650,
  657,
  655,
  535,
  238,
  658,
  237,
  239,
  285,
  659,
  285,
  660,
  293,
  c,
  [314, 7],
  664,
  478,
  666,
  672,
  669,
  670,
  478,
  675,
  680,
  c,
  [1205, 53],
  685,
  492,
  688,
  490,
  c,
  [2391, 44],
  689,
  c,
  [59, 3],
  495,
  695,
  c,
  [61, 7],
  700,
  c,
  [1775, 9],
  701,
  c,
  [1775, 3],
  548,
  c,
  [674, 5],
  703,
  c,
  [674, 43],
  704,
  c,
  [72, 7],
  706,
  c,
  [129, 7],
  705,
  c,
  [56, 31],
  707,
  c,
  [2860, 9],
  709,
  c,
  [5581, 53],
  c,
  [2308, 24],
  714,
  c,
  [2307, 23],
  716,
  717,
  c,
  [49, 7],
  718,
  c,
  [209, 39],
  721,
  c,
  [48, 7],
  722,
  c,
  [3643, 50],
  c,
  [2310, 39],
  727,
  728,
  c,
  [60, 8],
  534,
  731,
  535,
  c,
  [1595, 14],
  732,
  c,
  [8, 7],
  c,
  [405, 9],
  734,
  c,
  [404, 3],
  738,
  c,
  [14, 9],
  739,
  c,
  [419, 3],
  746,
  c,
  [2183, 12],
  748,
  750,
  564,
  752,
  562,
  c,
  [52, 7],
  223,
  756,
  c,
  [574, 46],
  757,
  c,
  [1515, 82],
  758,
  c,
  [47, 10],
  c,
  [4456, 11],
  759,
  c,
  [327, 43],
  762,
  c,
  [4175, 53],
  766,
  c,
  [48, 40],
  767,
  c,
  [2266, 28],
  769,
  c,
  [2509, 73],
  772,
  c,
  [8, 7],
  774,
  128,
  776,
  180,
  c,
  [312, 36],
  780,
  c,
  [86, 17],
  c,
  [1529, 10],
  782,
  c,
  [1529, 40],
  c,
  [51, 10],
  783,
  c,
  [50, 39],
  784,
  c,
  [155, 7],
  785,
  c,
  [242, 39],
  786,
  788,
  789,
  c,
  [50, 7],
  790,
  c,
  [292, 46],
  c,
  [1110, 5],
  791,
  c,
  [4792, 44],
  c,
  [57, 7],
  794,
  c,
  [112, 7],
  793,
  c,
  [55, 39],
  795,
  c,
  [366, 18],
  796,
  c,
  [48, 28],
  169,
  797,
  c,
  [951, 3],
  799,
  c,
  [52, 7],
  800,
  c,
  [101, 39],
  805,
  c,
  [48, 7],
  803,
  c,
  [48, 39],
  807,
  c,
  [48, 7],
  806,
  c,
  [252, 46],
  809,
  c,
  [55, 7],
  808,
  c,
  [1819, 40],
  810,
  c,
  [1819, 3],
  238,
  811,
  c,
  [4176, 4],
  c,
  [742, 28],
  815,
  464,
  238,
  818,
  237,
  239,
  821,
  c,
  [748, 46],
  c,
  [4204, 4],
  824,
  825,
  c,
  [1160, 9],
  827,
  c,
  [1160, 3],
  829,
  832,
  835,
  672,
  839,
  670,
  840,
  478,
  841,
  c,
  [88, 7],
  492,
  844,
  846,
  849,
  685,
  c,
  [1671, 44],
  851,
  c,
  [1109, 38],
  c,
  [48, 9],
  852,
  c,
  [3296, 4],
  c,
  [1277, 7],
  853,
  c,
  [1277, 4],
  856,
  858,
  860,
  861,
  548,
  867,
  869,
  c,
  [950, 53],
  446,
  3,
  870,
  c,
  [4523, 40],
  871,
  c,
  [58, 14],
  873,
  c,
  [6291, 70],
  874,
  c,
  [1712, 23],
  c,
  [48, 24],
  875,
  c,
  [4068, 24],
  c,
  [3361, 9],
  877,
  c,
  [1872, 53],
  445,
  3,
  878,
  c,
  [56, 46],
  c,
  [3971, 47],
  c,
  [1812, 39],
  880,
  c,
  [4122, 10],
  c,
  [50, 39],
  881,
  c,
  [49, 9],
  c,
  [663, 9],
  883,
  c,
  [4004, 8],
  c,
  [12, 3],
  884,
  c,
  [1849, 3],
  c,
  [13, 9],
  887,
  c,
  [4042, 10],
  889,
  c,
  [4041, 10],
  892,
  c,
  [11, 10],
  897,
  c,
  [592, 4],
  746,
  564,
  901,
  750,
  c,
  [16, 7],
  903,
  c,
  [16, 4],
  c,
  [1466, 36],
  906,
  c,
  [1552, 24],
  907,
  180,
  c,
  [1794, 11],
  908,
  c,
  [666, 43],
  c,
  [1747, 7],
  909,
  c,
  [1795, 47],
  910,
  c,
  [3983, 48],
  912,
  c,
  [456, 46],
  913,
  c,
  [47, 46],
  915,
  c,
  [47, 7],
  914,
  c,
  [48, 39],
  917,
  c,
  [48, 7],
  916,
  c,
  [48, 39],
  918,
  c,
  [143, 46],
  919,
  c,
  [5810, 8],
  c,
  [3507, 49],
  c,
  [470, 14],
  169,
  922,
  c,
  [1584, 3],
  924,
  c,
  [13, 7],
  927,
  c,
  [132, 7],
  926,
  c,
  [2097, 60],
  928,
  929,
  c,
  [202, 46],
  930,
  464,
  931,
  464,
  932,
  c,
  [1267, 53],
  c,
  [3189, 4],
  c,
  [1480, 4],
  933,
  470,
  548,
  936,
  937,
  938,
  672,
  939,
  941,
  943,
  944,
  835,
  948,
  492,
  949,
  950,
  495,
  c,
  [756, 7],
  953,
  c,
  [4836, 11],
  954,
  c,
  [12, 4],
  958,
  959,
  860,
  861,
  960,
  285,
  963,
  964,
  c,
  [184, 21],
  716,
  c,
  [15, 14],
  970,
  c,
  [147, 7],
  972,
  c,
  [148, 39],
  534,
  973,
  535,
  c,
  [927, 7],
  554,
  978,
  c,
  [119, 10],
  979,
  c,
  [11, 10],
  980,
  c,
  [11, 10],
  981,
  c,
  [11, 10],
  982,
  c,
  [164, 11],
  983,
  c,
  [12, 4],
  564,
  985,
  564,
  986,
  c,
  [16, 7],
  988,
  c,
  [28, 11],
  989,
  c,
  [12, 4],
  990,
  180,
  991,
  c,
  [297, 46],
  993,
  c,
  [205, 6],
  995,
  c,
  [213, 7],
  997,
  c,
  [1857, 21],
  1000,
  128,
  1001,
  c,
  [86, 46],
  1003,
  c,
  [320, 21],
  285,
  1006,
  1009,
  672,
  1011,
  1012,
  1015,
  1016,
  1018,
  861,
  958,
  1023,
  1022,
  c,
  [182, 7],
  1024,
  c,
  [182, 4],
  c,
  [1432, 9],
  1026,
  c,
  [1432, 46],
  1034,
  c,
  [533, 53],
  1037,
  c,
  [54, 7],
  1036,
  c,
  [55, 39],
  1039,
  c,
  [48, 7],
  1038,
  c,
  [48, 39],
  1040,
  c,
  [48, 7],
  1041,
  c,
  [151, 45],
  1043,
  128,
  1047,
  861,
  1048,
  861,
  1050,
  c,
  [279, 7],
  1051,
  c,
  [279, 11],
  c,
  [7, 28],
  1053,
  c,
  [108, 7],
  1054,
  c,
  [259, 46],
  c,
  [102, 7],
  1060,
  c,
  [102, 4]
]),
  mode: u([
  2,
  s,
  [1, 66],
  2,
  1,
  c,
  [69, 10],
  c,
  [12, 3],
  2,
  c,
  [83, 36],
  s,
  [2, 5],
  c,
  [7, 7],
  s,
  [2, 12],
  c,
  [18, 18],
  s,
  [2, 18],
  c,
  [55, 19],
  c,
  [61, 9],
  c,
  [28, 25],
  s,
  [2, 71],
  c,
  [95, 90],
  c,
  [325, 11],
  c,
  [395, 59],
  c,
  [153, 84],
  c,
  [87, 4],
  s,
  [1, 669],
  c,
  [988, 138],
  c,
  [67, 27],
  c,
  [167, 14],
  c,
  [1319, 5],
  c,
  [47, 22],
  c,
  [135, 39],
  c,
  [39, 28],
  c,
  [1375, 8],
  c,
  [361, 81],
  c,
  [1502, 9],
  c,
  [106, 13],
  c,
  [1056, 4],
  c,
  [1064, 13],
  c,
  [129, 8],
  c,
  [134, 8],
  c,
  [162, 23],
  c,
  [41, 11],
  c,
  [51, 19],
  c,
  [4, 5],
  c,
  [197, 9],
  c,
  [9, 8],
  c,
  [1322, 16],
  c,
  [16, 8],
  c,
  [1186, 159],
  c,
  [441, 21],
  c,
  [698, 36],
  c,
  [35, 33],
  c,
  [252, 8],
  c,
  [1443, 491],
  c,
  [2281, 7],
  c,
  [29, 24],
  c,
  [2453, 9],
  c,
  [829, 17],
  s,
  [1, 838],
  c,
  [2105, 83],
  c,
  [66, 49],
  c,
  [1375, 350],
  c,
  [490, 12],
  c,
  [1967, 13],
  c,
  [2393, 21],
  c,
  [2299, 7],
  c,
  [459, 19],
  c,
  [2040, 15],
  c,
  [226, 163],
  c,
  [209, 10],
  c,
  [759, 26],
  c,
  [4029, 10],
  c,
  [2266, 25],
  c,
  [4048, 98],
  c,
  [89, 64],
  c,
  [841, 53],
  c,
  [84, 14],
  c,
  [538, 22],
  c,
  [277, 11],
  c,
  [350, 16],
  c,
  [538, 26],
  c,
  [89, 35],
  c,
  [366, 12],
  c,
  [89, 220],
  c,
  [960, 292],
  c,
  [1785, 128],
  c,
  [345, 15],
  c,
  [931, 38],
  c,
  [3547, 9],
  c,
  [4080, 126],
  c,
  [545, 15],
  c,
  [585, 38],
  c,
  [4310, 186],
  c,
  [1428, 20],
  c,
  [4536, 156],
  c,
  [4350, 67],
  c,
  [229, 85],
  c,
  [172, 58],
  c,
  [5778, 95],
  c,
  [118, 30],
  c,
  [1291, 300],
  c,
  [5009, 11],
  c,
  [8, 16],
  c,
  [1738, 8],
  c,
  [24, 11],
  c,
  [1064, 85],
  c,
  [432, 160],
  c,
  [140, 8],
  c,
  [513, 85],
  c,
  [5190, 10],
  c,
  [3399, 84],
  c,
  [28, 16],
  c,
  [919, 79],
  c,
  [352, 73],
  c,
  [1665, 138],
  c,
  [546, 58],
  c,
  [625, 9],
  c,
  [193, 22],
  c,
  [2887, 92],
  c,
  [7101, 120],
  c,
  [568, 65],
  c,
  [3466, 79],
  c,
  [3631, 86],
  c,
  [1210, 94],
  c,
  [201, 97],
  c,
  [904, 56],
  c,
  [2499, 113],
  c,
  [727, 45],
  c,
  [2523, 163],
  c,
  [6377, 47],
  c,
  [4945, 95],
  c,
  [160, 10],
  c,
  [8370, 43],
  c,
  [6113, 112],
  c,
  [149, 104],
  c,
  [3537, 43],
  c,
  [634, 100],
  c,
  [74, 18],
  c,
  [1618, 8],
  c,
  [738, 111],
  c,
  [4900, 90],
  c,
  [89, 203],
  c,
  [1500, 63],
  c,
  [267, 117],
  c,
  [50, 9],
  c,
  [356, 141],
  c,
  [4514, 83],
  c,
  [2320, 47],
  c,
  [47, 20],
  c,
  [2354, 74],
  c,
  [914, 182],
  c,
  [3446, 63],
  c,
  [89, 115],
  c,
  [6081, 80],
  c,
  [528, 73],
  c,
  [356, 177],
  c,
  [2611, 118],
  c,
  [10569, 40],
  c,
  [2227, 122],
  c,
  [3251, 165],
  c,
  [7336, 238],
  c,
  [429, 419],
  c,
  [6552, 105],
  c,
  [2038, 67],
  c,
  [6472, 50],
  c,
  [265, 146],
  c,
  [3965, 29],
  c,
  [776, 17],
  c,
  [4897, 112],
  c,
  [1051, 132],
  c,
  [8659, 304],
  c,
  [2352, 32],
  c,
  [11028, 12],
  c,
  [10714, 37],
  c,
  [11309, 28],
  c,
  [5149, 94],
  c,
  [3025, 70],
  c,
  [4442, 29],
  c,
  [10986, 51],
  c,
  [36, 32],
  c,
  [10557, 76],
  c,
  [344, 175],
  c,
  [5838, 168],
  c,
  [90, 102],
  c,
  [7153, 76],
  c,
  [5681, 142],
  c,
  [2201, 209],
  c,
  [3, 6],
  c,
  [12340, 8],
  c,
  [1697, 25],
  c,
  [317, 54],
  c,
  [1047, 78],
  c,
  [6336, 89],
  c,
  [5582, 17],
  c,
  [11672, 64],
  c,
  [77, 10],
  c,
  [4371, 91],
  c,
  [3045, 21],
  c,
  [742, 91],
  c,
  [3242, 234],
  c,
  [146, 45],
  c,
  [8044, 12],
  c,
  [806, 56],
  c,
  [1262, 11],
  c,
  [14762, 12],
  c,
  [264, 131],
  c,
  [592, 39],
  c,
  [1603, 43],
  c,
  [6619, 14],
  c,
  [606, 21],
  c,
  [1506, 66],
  c,
  [6560, 50],
  c,
  [6610, 91],
  c,
  [1179, 22],
  c,
  [14876, 96],
  c,
  [15208, 101],
  c,
  [205, 22],
  c,
  [1003, 13],
  c,
  [3881, 110],
  c,
  [4743, 312],
  c,
  [114, 87],
  c,
  [1566, 10],
  c,
  [971, 62],
  c,
  [222, 46],
  c,
  [109, 37],
  c,
  [7142, 178],
  c,
  [41, 12],
  c,
  [2843, 8],
  c,
  [21, 7],
  c,
  [7717, 9],
  c,
  [14797, 25],
  c,
  [2893, 8],
  c,
  [346, 13],
  c,
  [313, 28],
  c,
  [5273, 279],
  c,
  [16278, 46],
  c,
  [5003, 86],
  c,
  [11541, 156],
  c,
  [3329, 178],
  c,
  [10112, 117],
  c,
  [4677, 13],
  c,
  [14893, 14],
  c,
  [9631, 196],
  c,
  [15714, 37],
  c,
  [10343, 15],
  c,
  [2606, 25],
  c,
  [11739, 24],
  c,
  [3680, 78],
  c,
  [5388, 164],
  c,
  [1402, 141],
  c,
  [7640, 98],
  c,
  [16680, 52],
  c,
  [52, 60],
  c,
  [53, 35],
  c,
  [172, 11],
  c,
  [3513, 14],
  c,
  [648, 78],
  c,
  [1505, 31],
  c,
  [758, 60],
  c,
  [390, 8],
  c,
  [1580, 160],
  c,
  [2221, 9],
  c,
  [1310, 8],
  c,
  [3313, 89],
  c,
  [14767, 172],
  c,
  [6152, 75],
  c,
  [3173, 119],
  c,
  [2753, 105],
  c,
  [5488, 153],
  c,
  [165, 112],
  c,
  [117, 118],
  c,
  [2703, 228],
  c,
  [1414, 59],
  c,
  [58, 14],
  c,
  [4426, 10],
  c,
  [794, 16],
  c,
  [11055, 252],
  c,
  [3435, 131],
  c,
  [2619, 342],
  c,
  [19728, 297],
  c,
  [730, 28],
  c,
  [3321, 124],
  c,
  [21059, 39],
  c,
  [8664, 108],
  c,
  [3662, 75],
  c,
  [14821, 158],
  c,
  [12447, 246],
  c,
  [336, 22],
  c,
  [4094, 143],
  c,
  [205, 16],
  c,
  [2426, 43],
  c,
  [6923, 12],
  c,
  [3484, 11],
  c,
  [3498, 19],
  c,
  [3751, 37],
  c,
  [20382, 9],
  c,
  [294, 6],
  c,
  [14831, 18],
  c,
  [1568, 90],
  c,
  [6014, 40],
  c,
  [140, 90],
  c,
  [15868, 60],
  c,
  [13504, 107],
  c,
  [3806, 10],
  c,
  [7161, 88],
  c,
  [22156, 108],
  c,
  [18355, 56],
  c,
  [837, 30],
  c,
  [199, 76],
  c,
  [2599, 84],
  c,
  [1153, 102],
  c,
  [13792, 115],
  c,
  [5750, 182],
  c,
  [2816, 101],
  c,
  [5167, 46],
  c,
  [1549, 51],
  c,
  [7379, 20],
  c,
  [152, 12],
  c,
  [351, 28],
  c,
  [4077, 112],
  c,
  [1093, 91],
  c,
  [91, 96],
  c,
  [1122, 41],
  c,
  [3453, 387],
  c,
  [22637, 9],
  c,
  [22751, 12],
  c,
  [1989, 62],
  c,
  [15246, 204],
  c,
  [1543, 227],
  c,
  [14501, 73],
  c,
  [169, 38],
  s,
  [2, 5]
]),
  goto: u([
  1,
  36,
  82,
  83,
  84,
  87,
  100,
  65,
  101,
  s,
  [52, 4, 1],
  s,
  [37, 5, 1],
  88,
  80,
  81,
  85,
  86,
  73,
  50,
  77,
  45,
  46,
  18,
  110,
  94,
  s,
  [89, 5, 1],
  111,
  34,
  78,
  79,
  s,
  [68, 5, 1],
  103,
  112,
  116,
  104,
  114,
  76,
  115,
  107,
  108,
  109,
  62,
  96,
  19,
  23,
  61,
  60,
  97,
  98,
  99,
  56,
  57,
  58,
  2,
  117,
  6,
  138,
  140,
  136,
  142,
  146,
  155,
  156,
  162,
  163,
  6,
  130,
  s,
  [6, 3],
  120,
  121,
  124,
  125,
  127,
  147,
  149,
  134,
  s,
  [135, 5, 2],
  144,
  145,
  148,
  s,
  [150, 5, 1],
  s,
  [157, 5, 1],
  164,
  129,
  131,
  132,
  c,
  [83, 4],
  133,
  s,
  [7, 5],
  166,
  167,
  s,
  [8, 17],
  172,
  s,
  [8, 35],
  170,
  174,
  s,
  [8, 23],
  173,
  8,
  8,
  112,
  116,
  s,
  [8, 6],
  s,
  [429, 88],
  96,
  429,
  s,
  [431, 88],
  96,
  431,
  c,
  [394, 16],
  178,
  c,
  [395, 50],
  s,
  [251, 84],
  181,
  182,
  183,
  251,
  251,
  c,
  [550, 66],
  c,
  [66, 22],
  186,
  c,
  [66, 65],
  c,
  [132, 66],
  c,
  [66, 126],
  192,
  c,
  [67, 66],
  194,
  c,
  [67, 56],
  196,
  c,
  [200, 59],
  198,
  c,
  [37, 4],
  c,
  [271, 82],
  208,
  c,
  [67, 9],
  209,
  c,
  [68, 41],
  s,
  [209, 71],
  211,
  s,
  [209, 17],
  s,
  [198, 49],
  216,
  s,
  [198, 26],
  214,
  215,
  s,
  [198, 11],
  136,
  221,
  s,
  [136, 3],
  219,
  136,
  96,
  s,
  [381, 20],
  222,
  363,
  s,
  [381, 37],
  224,
  s,
  [381, 27],
  115,
  s,
  [381, 5],
  c,
  [347, 5],
  229,
  c,
  [347, 10],
  228,
  c,
  [347, 9],
  227,
  c,
  [347, 41],
  232,
  230,
  228,
  227,
  243,
  244,
  234,
  241,
  242,
  240,
  247,
  53,
  54,
  248,
  353,
  246,
  353,
  353,
  514,
  c,
  [87, 5],
  s,
  [514, 8],
  100,
  s,
  [514, 4],
  65,
  514,
  514,
  101,
  514,
  514,
  c,
  [103, 3],
  514,
  514,
  c,
  [105, 5],
  250,
  514,
  41,
  s,
  [514, 5],
  88,
  s,
  [514, 4],
  c,
  [115, 4],
  s,
  [514, 18],
  73,
  s,
  [514, 4],
  50,
  77,
  514,
  45,
  s,
  [514, 5],
  46,
  514,
  18,
  514,
  110,
  s,
  [514, 5],
  94,
  s,
  [514, 4],
  c,
  [151, 4],
  514,
  514,
  34,
  78,
  514,
  514,
  79,
  514,
  c,
  [156, 8],
  514,
  c,
  [157, 7],
  s,
  [514, 3],
  62,
  514,
  c,
  [161, 11],
  514,
  535,
  535,
  252,
  535,
  96,
  259,
  264,
  363,
  263,
  255,
  50,
  77,
  260,
  256,
  c,
  [36, 5],
  s,
  [96, 4, 1],
  c,
  [600, 16],
  267,
  c,
  [667, 47],
  269,
  c,
  [92, 3],
  273,
  272,
  96,
  96,
  c,
  [72, 16],
  278,
  c,
  [739, 50],
  281,
  280,
  174,
  282,
  s,
  [329, 11],
  232,
  s,
  [329, 9],
  284,
  228,
  s,
  [329, 34],
  227,
  s,
  [329, 31],
  363,
  288,
  115,
  96,
  363,
  290,
  115,
  96,
  232,
  363,
  228,
  227,
  292,
  c,
  [911, 71],
  155,
  156,
  c,
  [68, 13],
  299,
  300,
  c,
  [70, 4],
  c,
  [1990, 7],
  c,
  [77, 49],
  c,
  [641, 63],
  c,
  [68, 73],
  100,
  306,
  c,
  [1190, 65],
  307,
  65,
  314,
  c,
  [67, 8],
  309,
  c,
  [68, 7],
  315,
  c,
  [69, 15],
  312,
  c,
  [70, 33],
  326,
  c,
  [348, 3],
  319,
  c,
  [71, 8],
  321,
  c,
  [71, 7],
  323,
  c,
  [140, 43],
  221,
  327,
  352,
  331,
  352,
  352,
  329,
  330,
  352,
  334,
  104,
  114,
  348,
  341,
  347,
  337,
  c,
  [43, 10],
  96,
  346,
  112,
  116,
  351,
  4,
  c,
  [172, 6],
  4,
  65,
  4,
  101,
  4,
  c,
  [103, 8],
  4,
  c,
  [1835, 198],
  c,
  [66, 187],
  c,
  [706, 69],
  c,
  [266, 142],
  366,
  c,
  [465, 248],
  s,
  [88, 17],
  371,
  s,
  [88, 48],
  s,
  [90, 17],
  372,
  s,
  [90, 48],
  c,
  [1448, 82],
  c,
  [341, 127],
  174,
  112,
  116,
  378,
  c,
  [136, 82],
  382,
  c,
  [67, 7],
  380,
  385,
  c,
  [69, 43],
  435,
  c,
  [3790, 9],
  s,
  [435, 4],
  130,
  s,
  [435, 9],
  120,
  121,
  435,
  125,
  s,
  [435, 5],
  c,
  [3801, 15],
  435,
  435,
  c,
  [3801, 3],
  s,
  [435, 9],
  129,
  s,
  [435, 11],
  91,
  92,
  s,
  [435, 11],
  133,
  435,
  c,
  [224, 66],
  166,
  167,
  c,
  [1102, 8],
  389,
  c,
  [69, 8],
  388,
  c,
  [1103, 51],
  37,
  c,
  [226, 9],
  s,
  [37, 4],
  130,
  s,
  [37, 9],
  c,
  [4025, 7],
  37,
  37,
  c,
  [4027, 20],
  s,
  [37, 9],
  129,
  s,
  [37, 5],
  131,
  132,
  37,
  37,
  c,
  [108, 4],
  s,
  [37, 11],
  133,
  37,
  s,
  [40, 17],
  172,
  s,
  [40, 35],
  170,
  174,
  s,
  [40, 23],
  173,
  40,
  40,
  112,
  116,
  s,
  [40, 6],
  s,
  [110, 17],
  281,
  s,
  [110, 35],
  280,
  174,
  s,
  [110, 23],
  282,
  s,
  [110, 10],
  c,
  [266, 9],
  130,
  c,
  [4278, 35],
  s,
  [41, 3],
  136,
  142,
  s,
  [41, 9],
  130,
  s,
  [41, 9],
  120,
  121,
  41,
  125,
  s,
  [41, 5],
  c,
  [61, 3],
  41,
  c,
  [61, 4],
  s,
  [41, 6],
  157,
  s,
  [41, 4],
  164,
  s,
  [41, 9],
  129,
  s,
  [41, 11],
  91,
  92,
  s,
  [41, 11],
  133,
  41,
  s,
  [42, 3],
  136,
  142,
  s,
  [42, 9],
  130,
  s,
  [42, 9],
  120,
  121,
  42,
  125,
  s,
  [42, 5],
  134,
  135,
  42,
  42,
  c,
  [89, 4],
  s,
  [42, 6],
  157,
  s,
  [42, 4],
  164,
  s,
  [42, 9],
  129,
  s,
  [42, 11],
  91,
  92,
  s,
  [42, 11],
  133,
  42,
  s,
  [43, 3],
  136,
  142,
  s,
  [43, 9],
  130,
  s,
  [43, 9],
  120,
  121,
  43,
  125,
  s,
  [43, 5],
  134,
  135,
  43,
  43,
  c,
  [89, 4],
  s,
  [43, 6],
  157,
  s,
  [43, 4],
  164,
  s,
  [43, 9],
  129,
  s,
  [43, 11],
  91,
  92,
  s,
  [43, 11],
  133,
  43,
  s,
  [44, 3],
  136,
  142,
  s,
  [44, 9],
  130,
  s,
  [44, 9],
  120,
  121,
  44,
  125,
  s,
  [44, 5],
  134,
  135,
  44,
  44,
  c,
  [89, 4],
  s,
  [44, 6],
  157,
  s,
  [44, 4],
  164,
  s,
  [44, 9],
  129,
  s,
  [44, 11],
  91,
  92,
  s,
  [44, 11],
  133,
  44,
  c,
  [805, 66],
  46,
  c,
  [468, 9],
  s,
  [46, 4],
  130,
  s,
  [46, 9],
  120,
  121,
  46,
  125,
  s,
  [46, 5],
  c,
  [483, 15],
  46,
  46,
  c,
  [483, 3],
  s,
  [46, 9],
  129,
  s,
  [46, 11],
  91,
  92,
  s,
  [46, 11],
  133,
  46,
  c,
  [155, 66],
  c,
  [154, 9],
  232,
  130,
  393,
  228,
  c,
  [625, 27],
  227,
  c,
  [626, 8],
  c,
  [3199, 67],
  c,
  [182, 66],
  c,
  [36, 4],
  s,
  [398, 4, 1],
  s,
  [381, 9],
  402,
  c,
  [3747, 4],
  222,
  s,
  [363, 3],
  c,
  [3746, 30],
  c,
  [31, 14],
  c,
  [3733, 5],
  c,
  [3479, 68],
  405,
  145,
  145,
  146,
  146,
  434,
  434,
  s,
  [251, 43],
  172,
  172,
  c,
  [4815, 14],
  c,
  [391, 9],
  147,
  147,
  c,
  [1015, 28],
  147,
  c,
  [390, 8],
  c,
  [1061, 10],
  406,
  c,
  [47, 27],
  407,
  c,
  [437, 24],
  c,
  [228, 10],
  418,
  46,
  412,
  414,
  416,
  417,
  c,
  [373, 37],
  419,
  s,
  [210, 70],
  421,
  s,
  [210, 18],
  c,
  [3479, 79],
  428,
  c,
  [69, 57],
  s,
  [136, 20],
  c,
  [4377, 4],
  s,
  [136, 35],
  219,
  s,
  [136, 32],
  232,
  431,
  228,
  432,
  227,
  221,
  243,
  244,
  434,
  c,
  [4283, 3],
  c,
  [241, 68],
  s,
  [359, 20],
  221,
  s,
  [359, 37],
  440,
  s,
  [359, 32],
  s,
  [363, 85],
  115,
  s,
  [363, 5],
  22,
  c,
  [698, 9],
  s,
  [22, 4],
  130,
  s,
  [22, 9],
  120,
  121,
  22,
  125,
  s,
  [22, 5],
  c,
  [712, 15],
  22,
  22,
  c,
  [712, 3],
  s,
  [22, 9],
  129,
  s,
  [22, 11],
  91,
  92,
  s,
  [22, 11],
  133,
  22,
  443,
  442,
  c,
  [741, 16],
  444,
  c,
  [3926, 120],
  243,
  244,
  448,
  c,
  [484, 8],
  c,
  [1254, 61],
  450,
  123,
  449,
  123,
  452,
  s,
  [388, 7],
  453,
  s,
  [390, 7],
  454,
  s,
  [393, 8],
  455,
  456,
  458,
  457,
  s,
  [401, 3],
  459,
  s,
  [401, 6],
  276,
  461,
  276,
  276,
  465,
  463,
  242,
  240,
  326,
  243,
  244,
  466,
  c,
  [124, 3],
  363,
  472,
  115,
  c,
  [4648, 17],
  c,
  [128, 50],
  c,
  [4961, 4],
  515,
  c,
  [432, 9],
  s,
  [515, 4],
  130,
  s,
  [515, 9],
  120,
  121,
  515,
  125,
  s,
  [515, 5],
  c,
  [432, 15],
  515,
  515,
  c,
  [432, 3],
  s,
  [515, 9],
  129,
  s,
  [515, 11],
  91,
  92,
  s,
  [515, 11],
  133,
  515,
  c,
  [159, 66],
  477,
  479,
  476,
  480,
  96,
  s,
  [535, 4],
  96,
  482,
  123,
  c,
  [4975, 4],
  c,
  [4974, 3],
  485,
  c,
  [4974, 25],
  c,
  [95, 50],
  491,
  96,
  493,
  353,
  c,
  [5215, 4],
  232,
  228,
  227,
  s,
  [363, 58],
  224,
  c,
  [785, 33],
  s,
  [503, 10],
  494,
  s,
  [503, 78],
  c,
  [258, 63],
  c,
  [1752, 4],
  96,
  96,
  c,
  [164, 4],
  115,
  c,
  [1645, 10],
  501,
  c,
  [6986, 36],
  502,
  117,
  c,
  [3453, 67],
  505,
  506,
  c,
  [5677, 69],
  284,
  c,
  [445, 6],
  224,
  c,
  [365, 3],
  115,
  c,
  [13, 4],
  232,
  363,
  c,
  [5, 3],
  513,
  c,
  [4773, 16],
  221,
  s,
  [260, 3],
  136,
  142,
  s,
  [260, 9],
  130,
  s,
  [260, 9],
  120,
  121,
  260,
  125,
  s,
  [260, 5],
  c,
  [240, 3],
  260,
  c,
  [240, 4],
  s,
  [260, 6],
  157,
  s,
  [260, 4],
  164,
  s,
  [260, 9],
  129,
  s,
  [260, 11],
  91,
  92,
  s,
  [260, 11],
  133,
  260,
  s,
  [59, 31],
  516,
  s,
  [59, 57],
  s,
  [63, 32],
  517,
  s,
  [63, 56],
  65,
  c,
  [494, 9],
  s,
  [65, 4],
  130,
  s,
  [65, 9],
  c,
  [505, 7],
  65,
  65,
  c,
  [507, 20],
  s,
  [65, 9],
  129,
  s,
  [65, 5],
  131,
  132,
  65,
  65,
  c,
  [415, 4],
  s,
  [65, 11],
  133,
  65,
  c,
  [2732, 75],
  130,
  233,
  c,
  [647, 35],
  212,
  c,
  [47, 9],
  s,
  [212, 4],
  130,
  s,
  [212, 9],
  120,
  121,
  212,
  125,
  s,
  [212, 5],
  c,
  [61, 15],
  212,
  212,
  c,
  [61, 3],
  s,
  [212, 9],
  129,
  s,
  [212, 5],
  131,
  132,
  212,
  212,
  c,
  [77, 4],
  s,
  [212, 11],
  c,
  [88, 11],
  521,
  130,
  520,
  c,
  [2867, 104],
  524,
  s,
  [123, 3],
  c,
  [71, 7],
  c,
  [1692, 9],
  c,
  [1691, 52],
  s,
  [255, 9],
  281,
  281,
  c,
  [4, 4],
  c,
  [5, 3],
  s,
  [255, 39],
  526,
  s,
  [306, 11],
  527,
  s,
  [306, 43],
  c,
  [5730, 70],
  c,
  [572, 38],
  529,
  c,
  [67, 28],
  s,
  [381, 9],
  294,
  363,
  294,
  c,
  [5, 3],
  c,
  [3116, 3],
  294,
  c,
  [8, 3],
  c,
  [3118, 40],
  c,
  [3115, 5],
  s,
  [373, 9],
  295,
  295,
  c,
  [3, 3],
  295,
  s,
  [373, 35],
  c,
  [8264, 40],
  170,
  174,
  531,
  c,
  [8242, 8],
  c,
  [8240, 3],
  533,
  422,
  c,
  [493, 7],
  c,
  [312, 4],
  c,
  [243, 15],
  c,
  [310, 82],
  c,
  [882, 37],
  420,
  130,
  s,
  [420, 4],
  c,
  [749, 27],
  538,
  c,
  [3179, 34],
  c,
  [117, 40],
  s,
  [424, 5],
  326,
  s,
  [424, 4],
  541,
  s,
  [424, 60],
  221,
  c,
  [6286, 3],
  543,
  c,
  [142, 66],
  547,
  123,
  123,
  546,
  c,
  [1584, 3],
  c,
  [1583, 12],
  s,
  [483, 4],
  550,
  472,
  551,
  483,
  s,
  [485, 4],
  474,
  485,
  c,
  [29, 15],
  556,
  c,
  [16, 3],
  558,
  c,
  [17, 12],
  561,
  563,
  96,
  112,
  116,
  565,
  351,
  c,
  [138, 66],
  39,
  c,
  [398, 9],
  s,
  [39, 4],
  130,
  s,
  [39, 9],
  c,
  [406, 7],
  39,
  39,
  c,
  [408, 20],
  s,
  [39, 9],
  129,
  s,
  [39, 5],
  131,
  132,
  39,
  39,
  c,
  [108, 4],
  s,
  [39, 11],
  133,
  39,
  50,
  c,
  [89, 9],
  s,
  [50, 4],
  130,
  s,
  [50, 9],
  c,
  [89, 7],
  50,
  50,
  c,
  [89, 20],
  s,
  [50, 9],
  129,
  s,
  [50, 5],
  131,
  132,
  50,
  50,
  c,
  [89, 4],
  s,
  [50, 11],
  133,
  50,
  51,
  c,
  [89, 9],
  s,
  [51, 4],
  130,
  s,
  [51, 9],
  c,
  [89, 7],
  51,
  51,
  c,
  [89, 20],
  s,
  [51, 9],
  129,
  s,
  [51, 5],
  131,
  132,
  51,
  51,
  c,
  [89, 4],
  s,
  [51, 11],
  133,
  51,
  52,
  c,
  [89, 9],
  s,
  [52, 4],
  130,
  s,
  [52, 9],
  120,
  121,
  52,
  125,
  s,
  [52, 5],
  c,
  [89, 15],
  52,
  52,
  c,
  [89, 3],
  s,
  [52, 9],
  129,
  s,
  [52, 5],
  131,
  132,
  52,
  52,
  c,
  [89, 4],
  s,
  [52, 11],
  133,
  52,
  53,
  c,
  [89, 9],
  s,
  [53, 4],
  130,
  s,
  [53, 9],
  c,
  [178, 7],
  53,
  53,
  c,
  [178, 20],
  s,
  [53, 9],
  129,
  s,
  [53, 5],
  131,
  132,
  53,
  53,
  c,
  [89, 4],
  s,
  [53, 11],
  133,
  53,
  56,
  c,
  [89, 9],
  s,
  [56, 4],
  130,
  s,
  [56, 9],
  c,
  [89, 4],
  56,
  147,
  149,
  56,
  56,
  c,
  [89, 20],
  s,
  [56, 9],
  129,
  s,
  [56, 5],
  131,
  132,
  56,
  56,
  c,
  [89, 4],
  s,
  [56, 11],
  133,
  56,
  227,
  c,
  [89, 9],
  s,
  [227, 4],
  130,
  s,
  [227, 9],
  c,
  [178, 7],
  227,
  227,
  c,
  [1691, 21],
  s,
  [227, 8],
  129,
  s,
  [227, 5],
  131,
  132,
  227,
  227,
  c,
  [89, 4],
  s,
  [227, 11],
  133,
  227,
  c,
  [4377, 68],
  569,
  570,
  s,
  [381, 9],
  571,
  c,
  [1358, 3],
  c,
  [4513, 47],
  c,
  [1397, 5],
  s,
  [201, 15],
  572,
  s,
  [201, 73],
  c,
  [224, 16],
  575,
  c,
  [914, 50],
  207,
  c,
  [380, 9],
  s,
  [207, 4],
  130,
  s,
  [207, 9],
  c,
  [380, 7],
  207,
  207,
  c,
  [380, 20],
  s,
  [207, 9],
  129,
  s,
  [207, 5],
  131,
  132,
  207,
  207,
  c,
  [108, 4],
  s,
  [207, 11],
  133,
  207,
  203,
  c,
  [89, 9],
  s,
  [203, 4],
  130,
  s,
  [203, 9],
  120,
  121,
  203,
  125,
  s,
  [203, 5],
  c,
  [89, 15],
  203,
  203,
  c,
  [89, 3],
  s,
  [203, 9],
  129,
  s,
  [203, 11],
  91,
  92,
  s,
  [203, 11],
  133,
  203,
  205,
  c,
  [89, 9],
  s,
  [205, 4],
  130,
  s,
  [205, 9],
  120,
  121,
  205,
  125,
  s,
  [205, 5],
  c,
  [89, 15],
  205,
  205,
  c,
  [89, 3],
  s,
  [205, 9],
  129,
  s,
  [205, 11],
  91,
  92,
  s,
  [205, 11],
  133,
  205,
  386,
  c,
  [89, 9],
  s,
  [386, 4],
  130,
  s,
  [386, 9],
  c,
  [267, 7],
  386,
  386,
  c,
  [267, 20],
  s,
  [386, 9],
  129,
  s,
  [386, 5],
  131,
  132,
  386,
  386,
  c,
  [267, 4],
  s,
  [386, 11],
  133,
  386,
  s,
  [58, 31],
  516,
  s,
  [58, 57],
  204,
  c,
  [178, 9],
  s,
  [204, 4],
  130,
  s,
  [204, 9],
  120,
  121,
  204,
  125,
  s,
  [204, 5],
  c,
  [178, 15],
  204,
  204,
  c,
  [178, 3],
  s,
  [204, 9],
  129,
  s,
  [204, 11],
  91,
  92,
  s,
  [204, 11],
  133,
  204,
  206,
  c,
  [89, 9],
  s,
  [206, 4],
  130,
  s,
  [206, 9],
  120,
  121,
  206,
  125,
  s,
  [206, 5],
  c,
  [89, 15],
  206,
  206,
  c,
  [89, 3],
  s,
  [206, 9],
  129,
  s,
  [206, 11],
  91,
  92,
  s,
  [206, 11],
  133,
  c,
  [88, 10],
  c,
  [6170, 35],
  576,
  133,
  578,
  c,
  [2611, 10],
  c,
  [1653, 16],
  c,
  [6780, 44],
  c,
  [117, 9],
  120,
  130,
  s,
  [120, 4],
  c,
  [121, 26],
  120,
  580,
  c,
  [2051, 74],
  c,
  [234, 10],
  582,
  c,
  [3050, 35],
  374,
  c,
  [47, 9],
  s,
  [374, 4],
  130,
  s,
  [374, 9],
  c,
  [59, 7],
  374,
  374,
  c,
  [61, 20],
  s,
  [374, 9],
  129,
  s,
  [374, 5],
  131,
  132,
  374,
  374,
  c,
  [77, 4],
  s,
  [374, 11],
  133,
  374,
  c,
  [4690, 73],
  c,
  [268, 70],
  585,
  c,
  [268, 35],
  c,
  [46, 10],
  586,
  c,
  [46, 35],
  c,
  [3940, 68],
  c,
  [114, 10],
  589,
  c,
  [4126, 36],
  225,
  c,
  [48, 9],
  s,
  [225, 4],
  130,
  s,
  [225, 9],
  c,
  [59, 7],
  225,
  225,
  c,
  [61, 20],
  s,
  [225, 9],
  129,
  s,
  [225, 5],
  131,
  132,
  225,
  225,
  c,
  [77, 4],
  s,
  [225, 11],
  133,
  225,
  c,
  [8736, 335],
  c,
  [66, 61],
  s,
  [381, 9],
  596,
  c,
  [2038, 55],
  s,
  [251, 40],
  171,
  171,
  c,
  [6472, 14],
  c,
  [253, 92],
  c,
  [6443, 43],
  599,
  601,
  600,
  232,
  604,
  602,
  228,
  227,
  605,
  s,
  [55, 9],
  232,
  55,
  606,
  228,
  s,
  [55, 27],
  227,
  s,
  [55, 9],
  c,
  [915, 78],
  c,
  [913, 28],
  610,
  c,
  [914, 7],
  188,
  188,
  c,
  [11846, 3],
  c,
  [8639, 82],
  c,
  [77, 14],
  246,
  c,
  [77, 76],
  c,
  [8793, 84],
  c,
  [478, 43],
  c,
  [419, 68],
  217,
  c,
  [420, 9],
  s,
  [217, 4],
  130,
  s,
  [217, 9],
  120,
  121,
  217,
  125,
  s,
  [217, 5],
  c,
  [435, 15],
  217,
  217,
  c,
  [435, 3],
  s,
  [217, 9],
  129,
  s,
  [217, 5],
  131,
  132,
  217,
  217,
  c,
  [108, 4],
  s,
  [217, 11],
  133,
  217,
  s,
  [381, 11],
  232,
  c,
  [11201, 11],
  618,
  228,
  c,
  [11201, 35],
  227,
  c,
  [11201, 32],
  235,
  c,
  [182, 9],
  s,
  [235, 4],
  130,
  s,
  [235, 9],
  c,
  [615, 7],
  235,
  235,
  c,
  [617, 20],
  s,
  [235, 9],
  129,
  s,
  [235, 5],
  131,
  132,
  235,
  235,
  c,
  [182, 4],
  s,
  [235, 11],
  133,
  235,
  s,
  [236, 68],
  166,
  167,
  s,
  [236, 19],
  c,
  [6078, 3],
  s,
  [125, 11],
  232,
  s,
  [125, 9],
  621,
  228,
  s,
  [125, 34],
  622,
  c,
  [59, 12],
  s,
  [125, 20],
  c,
  [93, 3],
  c,
  [6630, 68],
  625,
  123,
  19,
  c,
  [344, 9],
  s,
  [19, 4],
  130,
  s,
  [19, 9],
  c,
  [344, 7],
  19,
  19,
  c,
  [344, 20],
  s,
  [19, 9],
  129,
  s,
  [19, 5],
  131,
  132,
  19,
  19,
  c,
  [112, 4],
  s,
  [19, 11],
  133,
  19,
  s,
  [20, 68],
  166,
  167,
  s,
  [20, 19],
  s,
  [354, 20],
  626,
  s,
  [354, 69],
  s,
  [360, 20],
  221,
  s,
  [360, 69],
  s,
  [361, 20],
  221,
  s,
  [361, 69],
  c,
  [518, 16],
  629,
  c,
  [519, 50],
  117,
  631,
  632,
  117,
  450,
  123,
  633,
  c,
  [2995, 6],
  c,
  [1117, 6],
  635,
  c,
  [1118, 57],
  637,
  243,
  244,
  s,
  [124, 3],
  c,
  [7177, 3],
  639,
  640,
  c,
  [10733, 216],
  c,
  [66, 50],
  646,
  647,
  649,
  648,
  123,
  123,
  651,
  301,
  301,
  652,
  s,
  [301, 3],
  653,
  654,
  458,
  457,
  656,
  422,
  123,
  243,
  244,
  c,
  [293, 3],
  c,
  [6681, 9],
  661,
  c,
  [1849, 10],
  6,
  662,
  c,
  [2764, 35],
  117,
  663,
  665,
  667,
  479,
  480,
  96,
  668,
  673,
  671,
  96,
  674,
  677,
  479,
  676,
  480,
  96,
  536,
  536,
  124,
  s,
  [536, 3],
  678,
  679,
  c,
  [173, 66],
  681,
  682,
  529,
  c,
  [141, 9],
  s,
  [529, 4],
  130,
  s,
  [529, 9],
  120,
  121,
  529,
  125,
  s,
  [529, 5],
  c,
  [154, 15],
  529,
  529,
  c,
  [154, 3],
  s,
  [529, 9],
  129,
  s,
  [529, 5],
  131,
  132,
  529,
  529,
  c,
  [110, 4],
  s,
  [529, 11],
  133,
  529,
  684,
  683,
  123,
  686,
  s,
  [549, 4],
  687,
  491,
  c,
  [7716, 9],
  124,
  c,
  [169, 8],
  124,
  c,
  [4581, 51],
  690,
  691,
  494,
  123,
  123,
  692,
  693,
  694,
  697,
  696,
  117,
  698,
  699,
  346,
  c,
  [182, 9],
  s,
  [346, 4],
  130,
  s,
  [346, 9],
  c,
  [334, 7],
  346,
  346,
  c,
  [336, 20],
  s,
  [346, 9],
  129,
  s,
  [346, 5],
  131,
  132,
  346,
  346,
  c,
  [122, 4],
  s,
  [346, 11],
  133,
  346,
  c,
  [8412, 4],
  440,
  359,
  c,
  [7098, 16],
  c,
  [5534, 3],
  702,
  c,
  [2081, 77],
  155,
  156,
  299,
  300,
  c,
  [55, 7],
  66,
  c,
  [203, 9],
  s,
  [66, 4],
  130,
  s,
  [66, 9],
  c,
  [203, 7],
  66,
  66,
  c,
  [203, 20],
  s,
  [66, 9],
  129,
  s,
  [66, 5],
  131,
  132,
  66,
  66,
  c,
  [119, 4],
  s,
  [66, 11],
  133,
  66,
  c,
  [177, 5],
  708,
  c,
  [915, 128],
  c,
  [748, 10],
  710,
  c,
  [3512, 36],
  711,
  712,
  713,
  c,
  [116, 6],
  124,
  65,
  314,
  c,
  [559, 17],
  c,
  [6788, 45],
  c,
  [6860, 3],
  715,
  c,
  [75, 5],
  291,
  229,
  291,
  65,
  101,
  291,
  c,
  [76, 8],
  719,
  291,
  c,
  [77, 7],
  720,
  c,
  [12686, 60],
  723,
  c,
  [2863, 60],
  420,
  130,
  724,
  c,
  [6373, 38],
  725,
  s,
  [8, 9],
  296,
  296,
  8,
  172,
  s,
  [296, 3],
  c,
  [14877, 36],
  c,
  [6619, 4],
  726,
  c,
  [6616, 9],
  424,
  541,
  c,
  [325, 9],
  424,
  c,
  [6620, 51],
  730,
  729,
  533,
  123,
  123,
  422,
  c,
  [186, 9],
  418,
  130,
  s,
  [418, 4],
  c,
  [4128, 44],
  421,
  130,
  s,
  [421, 4],
  c,
  [50, 35],
  326,
  c,
  [4727, 44],
  733,
  133,
  c,
  [930, 3],
  124,
  124,
  c,
  [931, 12],
  735,
  736,
  c,
  [933, 3],
  737,
  96,
  c,
  [24, 3],
  740,
  c,
  [23, 12],
  743,
  742,
  741,
  s,
  [468, 78],
  556,
  s,
  [468, 10],
  s,
  [472, 84],
  551,
  s,
  [472, 5],
  744,
  747,
  745,
  123,
  123,
  c,
  [6642, 15],
  743,
  742,
  s,
  [499, 5],
  751,
  749,
  123,
  123,
  563,
  96,
  753,
  c,
  [302, 44],
  754,
  133,
  s,
  [381, 9],
  755,
  c,
  [3881, 55],
  c,
  [4210, 214],
  c,
  [6028, 51],
  760,
  c,
  [377, 10],
  207,
  761,
  c,
  [4859, 40],
  c,
  [181, 61],
  764,
  765,
  763,
  c,
  [1856, 18],
  c,
  [1298, 8],
  124,
  c,
  [5476, 44],
  c,
  [5547, 4],
  c,
  [191, 9],
  121,
  130,
  s,
  [121, 3],
  c,
  [193, 27],
  121,
  c,
  [5099, 18],
  6,
  768,
  c,
  [241, 35],
  376,
  c,
  [48, 9],
  s,
  [376, 4],
  130,
  s,
  [376, 9],
  c,
  [59, 7],
  376,
  376,
  c,
  [61, 20],
  s,
  [376, 9],
  129,
  s,
  [376, 5],
  131,
  132,
  376,
  376,
  c,
  [77, 4],
  s,
  [376, 11],
  133,
  376,
  222,
  c,
  [89, 9],
  s,
  [222, 4],
  130,
  s,
  [222, 9],
  c,
  [89, 7],
  222,
  222,
  c,
  [89, 20],
  s,
  [222, 9],
  129,
  s,
  [222, 5],
  131,
  132,
  222,
  222,
  c,
  [89, 4],
  s,
  [222, 11],
  133,
  222,
  c,
  [350, 5],
  s,
  [264, 7],
  100,
  264,
  65,
  264,
  c,
  [428, 4],
  264,
  c,
  [359, 5],
  264,
  41,
  s,
  [264, 5],
  88,
  264,
  264,
  c,
  [365, 4],
  s,
  [264, 18],
  73,
  264,
  264,
  50,
  77,
  264,
  45,
  264,
  c,
  [385, 3],
  264,
  264,
  c,
  [387, 9],
  264,
  c,
  [388, 17],
  264,
  c,
  [389, 11],
  226,
  c,
  [199, 9],
  s,
  [226, 4],
  130,
  s,
  [226, 9],
  c,
  [199, 7],
  226,
  226,
  c,
  [199, 20],
  s,
  [226, 9],
  129,
  s,
  [226, 5],
  131,
  132,
  226,
  226,
  c,
  [110, 4],
  s,
  [226, 11],
  133,
  c,
  [88, 10],
  770,
  c,
  [12242, 36],
  c,
  [1088, 37],
  771,
  c,
  [46, 17],
  232,
  130,
  773,
  c,
  [8844, 37],
  c,
  [49, 11],
  775,
  c,
  [49, 37],
  s,
  [251, 41],
  777,
  778,
  779,
  c,
  [5003, 79],
  c,
  [172, 9],
  148,
  148,
  c,
  [269, 28],
  148,
  c,
  [171, 8],
  601,
  781,
  c,
  [4575, 74],
  c,
  [4644, 132],
  418,
  416,
  787,
  c,
  [3, 3],
  c,
  [5137, 78],
  185,
  185,
  c,
  [1308, 40],
  c,
  [2898, 72],
  s,
  [192, 4],
  517,
  192,
  192,
  s,
  [193, 4],
  517,
  193,
  193,
  s,
  [194, 4],
  517,
  194,
  194,
  601,
  792,
  215,
  c,
  [148, 9],
  s,
  [215, 4],
  130,
  s,
  [215, 9],
  120,
  121,
  215,
  125,
  s,
  [215, 5],
  c,
  [161, 15],
  215,
  215,
  c,
  [161, 3],
  s,
  [215, 9],
  129,
  s,
  [215, 5],
  131,
  132,
  215,
  215,
  c,
  [131, 4],
  s,
  [215, 11],
  133,
  215,
  c,
  [10296, 69],
  c,
  [4569, 68],
  s,
  [134, 11],
  232,
  s,
  [134, 5],
  172,
  s,
  [134, 3],
  798,
  228,
  s,
  [134, 30],
  170,
  174,
  134,
  134,
  227,
  s,
  [134, 20],
  173,
  134,
  134,
  112,
  116,
  s,
  [134, 6],
  c,
  [226, 68],
  801,
  117,
  802,
  c,
  [71, 11],
  804,
  c,
  [15630, 125],
  33,
  c,
  [523, 9],
  s,
  [33, 4],
  130,
  s,
  [33, 9],
  c,
  [682, 7],
  33,
  33,
  c,
  [684, 20],
  s,
  [33, 9],
  129,
  s,
  [33, 5],
  131,
  132,
  33,
  33,
  c,
  [108, 4],
  s,
  [33, 11],
  133,
  33,
  c,
  [157, 68],
  c,
  [4130, 5],
  c,
  [5, 5],
  27,
  c,
  [167, 9],
  s,
  [27, 4],
  130,
  s,
  [27, 9],
  120,
  121,
  27,
  125,
  s,
  [27, 5],
  c,
  [167, 15],
  27,
  27,
  c,
  [167, 3],
  s,
  [27, 9],
  129,
  s,
  [27, 11],
  91,
  92,
  s,
  [27, 11],
  133,
  c,
  [88, 10],
  389,
  389,
  130,
  s,
  [389, 5],
  c,
  [1575, 44],
  391,
  391,
  130,
  s,
  [391, 5],
  c,
  [52, 44],
  396,
  396,
  130,
  s,
  [396, 6],
  c,
  [53, 34],
  396,
  133,
  812,
  s,
  [397, 8],
  814,
  813,
  124,
  124,
  c,
  [11876, 4],
  816,
  817,
  299,
  243,
  299,
  244,
  s,
  [299, 3],
  820,
  242,
  819,
  c,
  [12006, 67],
  822,
  823,
  c,
  [11957, 3],
  424,
  541,
  c,
  [353, 3],
  826,
  c,
  [4062, 16],
  828,
  830,
  665,
  831,
  96,
  834,
  833,
  123,
  836,
  s,
  [562, 4],
  837,
  838,
  c,
  [4455, 3],
  665,
  c,
  [4463, 3],
  842,
  c,
  [14114, 45],
  843,
  124,
  491,
  96,
  845,
  s,
  [546, 4],
  847,
  96,
  848,
  96,
  684,
  123,
  850,
  c,
  [11543, 67],
  c,
  [67, 67],
  c,
  [234, 3],
  855,
  854,
  c,
  [235, 12],
  697,
  857,
  451,
  859,
  864,
  862,
  451,
  451,
  863,
  865,
  c,
  [3374, 3],
  866,
  232,
  364,
  868,
  228,
  227,
  s,
  [62, 32],
  517,
  s,
  [62, 56],
  c,
  [436, 66],
  240,
  c,
  [387, 9],
  s,
  [240, 4],
  130,
  s,
  [240, 9],
  c,
  [400, 7],
  240,
  240,
  c,
  [402, 20],
  s,
  [240, 9],
  129,
  s,
  [240, 5],
  131,
  132,
  240,
  240,
  c,
  [108, 4],
  s,
  [240, 11],
  133,
  240,
  s,
  [242, 68],
  166,
  167,
  s,
  [242, 19],
  c,
  [12762, 70],
  c,
  [247, 9],
  872,
  130,
  c,
  [4404, 36],
  c,
  [2753, 110],
  c,
  [11296, 68],
  c,
  [68, 68],
  876,
  712,
  713,
  c,
  [296, 9],
  282,
  282,
  130,
  s,
  [282, 3],
  c,
  [3471, 51],
  c,
  [8555, 51],
  c,
  [117, 9],
  285,
  285,
  130,
  s,
  [285, 3],
  c,
  [117, 102],
  879,
  c,
  [68, 8],
  425,
  c,
  [69, 8],
  425,
  c,
  [3839, 55],
  c,
  [11245, 68],
  c,
  [68, 63],
  882,
  c,
  [4314, 15],
  c,
  [15, 15],
  885,
  c,
  [1179, 3],
  886,
  c,
  [20, 15],
  888,
  c,
  [16, 3],
  891,
  890,
  c,
  [53, 15],
  894,
  893,
  c,
  [17, 12],
  895,
  896,
  c,
  [4628, 17],
  747,
  123,
  123,
  898,
  899,
  900,
  124,
  124,
  563,
  96,
  751,
  123,
  123,
  902,
  495,
  348,
  495,
  341,
  347,
  904,
  905,
  495,
  c,
  [34, 12],
  c,
  [1188, 66],
  168,
  c,
  [528, 9],
  s,
  [168, 4],
  130,
  s,
  [168, 9],
  c,
  [536, 7],
  168,
  168,
  c,
  [538, 20],
  s,
  [168, 9],
  129,
  s,
  [168, 5],
  131,
  132,
  168,
  168,
  c,
  [108, 4],
  s,
  [168, 11],
  133,
  168,
  169,
  c,
  [89, 9],
  s,
  [169, 4],
  130,
  s,
  [169, 9],
  c,
  [89, 7],
  169,
  169,
  c,
  [89, 20],
  s,
  [169, 9],
  129,
  s,
  [169, 5],
  131,
  132,
  169,
  169,
  c,
  [89, 4],
  s,
  [169, 11],
  133,
  169,
  c,
  [3435, 73],
  c,
  [4415, 51],
  c,
  [1876, 10],
  c,
  [4413, 59],
  c,
  [4340, 44],
  c,
  [67, 67],
  764,
  765,
  911,
  223,
  c,
  [184, 9],
  s,
  [223, 4],
  130,
  s,
  [223, 9],
  c,
  [196, 7],
  223,
  223,
  c,
  [198, 20],
  s,
  [223, 9],
  129,
  s,
  [223, 5],
  131,
  132,
  223,
  223,
  c,
  [111, 4],
  s,
  [223, 11],
  133,
  223,
  c,
  [17832, 205],
  c,
  [7167, 129],
  c,
  [730, 57],
  601,
  920,
  c,
  [665, 10],
  179,
  179,
  c,
  [3771, 112],
  c,
  [124, 10],
  182,
  182,
  c,
  [124, 35],
  187,
  187,
  516,
  921,
  220,
  c,
  [52, 9],
  s,
  [220, 4],
  130,
  s,
  [220, 9],
  120,
  121,
  220,
  125,
  s,
  [220, 5],
  c,
  [65, 15],
  220,
  220,
  c,
  [65, 3],
  s,
  [220, 9],
  129,
  s,
  [220, 5],
  131,
  132,
  220,
  220,
  c,
  [81, 4],
  s,
  [220, 11],
  133,
  220,
  s,
  [133, 11],
  232,
  s,
  [133, 5],
  172,
  s,
  [133, 3],
  923,
  228,
  s,
  [133, 30],
  170,
  174,
  133,
  133,
  227,
  s,
  [133, 20],
  173,
  133,
  133,
  112,
  116,
  c,
  [78, 7],
  228,
  227,
  342,
  c,
  [181, 9],
  s,
  [342, 4],
  130,
  s,
  [342, 9],
  120,
  121,
  342,
  125,
  s,
  [342, 5],
  c,
  [181, 15],
  342,
  342,
  c,
  [181, 3],
  s,
  [342, 9],
  129,
  s,
  [342, 11],
  91,
  92,
  s,
  [342, 11],
  133,
  342,
  925,
  c,
  [639, 68],
  29,
  c,
  [158, 9],
  s,
  [29, 4],
  130,
  s,
  [29, 9],
  c,
  [402, 7],
  29,
  29,
  c,
  [404, 20],
  s,
  [29, 9],
  129,
  s,
  [29, 5],
  131,
  132,
  29,
  29,
  c,
  [108, 4],
  s,
  [29, 11],
  133,
  29,
  34,
  c,
  [89, 9],
  s,
  [34, 4],
  130,
  s,
  [34, 9],
  c,
  [89, 7],
  34,
  34,
  c,
  [89, 20],
  s,
  [34, 9],
  129,
  s,
  [34, 5],
  131,
  132,
  34,
  34,
  c,
  [89, 4],
  s,
  [34, 11],
  133,
  34,
  26,
  c,
  [89, 9],
  s,
  [26, 4],
  130,
  s,
  [26, 9],
  120,
  121,
  26,
  125,
  s,
  [26, 5],
  c,
  [89, 15],
  26,
  26,
  c,
  [89, 3],
  s,
  [26, 9],
  129,
  s,
  [26, 11],
  91,
  92,
  s,
  [26, 11],
  133,
  26,
  450,
  c,
  [11220, 26],
  c,
  [727, 43],
  c,
  [3525, 4],
  c,
  [4, 4],
  c,
  [74, 66],
  s,
  [305, 5],
  458,
  457,
  c,
  [239, 9],
  303,
  303,
  130,
  s,
  [303, 3],
  c,
  [811, 35],
  243,
  244,
  425,
  c,
  [3569, 3],
  c,
  [3577, 3],
  c,
  [6, 3],
  c,
  [2134, 3],
  934,
  935,
  665,
  96,
  665,
  124,
  c,
  [3552, 3],
  940,
  s,
  [557, 4],
  942,
  s,
  [96, 3],
  834,
  123,
  945,
  946,
  947,
  96,
  491,
  96,
  96,
  951,
  c,
  [7773, 3],
  952,
  c,
  [2200, 30],
  955,
  957,
  956,
  123,
  123,
  451,
  c,
  [3390, 5],
  c,
  [14824, 3],
  961,
  453,
  962,
  453,
  453,
  232,
  364,
  c,
  [8148, 4],
  228,
  227,
  64,
  c,
  [155, 9],
  s,
  [64, 4],
  130,
  s,
  [64, 9],
  c,
  [163, 7],
  64,
  64,
  c,
  [165, 20],
  s,
  [64, 9],
  129,
  s,
  [64, 5],
  131,
  132,
  64,
  64,
  c,
  [181, 4],
  s,
  [64, 11],
  133,
  c,
  [88, 10],
  965,
  c,
  [3082, 37],
  966,
  c,
  [22107, 3],
  241,
  c,
  [52, 9],
  s,
  [241, 4],
  130,
  s,
  [241, 9],
  c,
  [63, 7],
  241,
  241,
  c,
  [65, 20],
  s,
  [241, 9],
  129,
  s,
  [241, 5],
  131,
  132,
  241,
  241,
  c,
  [81, 4],
  s,
  [241, 11],
  133,
  241,
  c,
  [7505, 3],
  967,
  c,
  [6157, 11],
  968,
  c,
  [5734, 45],
  6,
  969,
  c,
  [11304, 51],
  971,
  c,
  [967, 51],
  c,
  [7344, 4],
  974,
  975,
  c,
  [493, 3],
  976,
  977,
  s,
  [462, 78],
  556,
  s,
  [462, 10],
  c,
  [552, 30],
  s,
  [463, 78],
  556,
  s,
  [463, 10],
  c,
  [119, 30],
  c,
  [15, 30],
  743,
  742,
  s,
  [502, 5],
  984,
  563,
  96,
  563,
  96,
  987,
  743,
  742,
  s,
  [492, 5],
  c,
  [50, 30],
  c,
  [6034, 123],
  992,
  c,
  [6826, 4],
  994,
  c,
  [6212, 11],
  996,
  c,
  [6261, 48],
  998,
  c,
  [49, 37],
  159,
  c,
  [50, 9],
  s,
  [159, 4],
  130,
  s,
  [159, 9],
  120,
  121,
  159,
  125,
  s,
  [159, 5],
  c,
  [62, 15],
  159,
  c,
  [62, 4],
  s,
  [159, 9],
  129,
  s,
  [159, 5],
  131,
  132,
  159,
  159,
  c,
  [77, 4],
  s,
  [159, 11],
  133,
  159,
  160,
  c,
  [89, 9],
  s,
  [160, 4],
  130,
  s,
  [160, 9],
  120,
  121,
  160,
  125,
  s,
  [160, 5],
  c,
  [89, 15],
  s,
  [160, 3],
  161,
  164,
  s,
  [160, 9],
  129,
  s,
  [160, 5],
  131,
  132,
  160,
  160,
  c,
  [89, 4],
  s,
  [160, 11],
  133,
  c,
  [88, 10],
  232,
  130,
  999,
  c,
  [15381, 53],
  c,
  [397, 50],
  1002,
  c,
  [1248, 3],
  30,
  c,
  [120, 9],
  s,
  [30, 4],
  130,
  s,
  [30, 9],
  c,
  [130, 7],
  30,
  30,
  c,
  [132, 20],
  s,
  [30, 9],
  129,
  s,
  [30, 5],
  131,
  132,
  30,
  30,
  c,
  [112, 4],
  s,
  [30, 11],
  133,
  30,
  639,
  640,
  1004,
  c,
  [91, 9],
  398,
  398,
  130,
  s,
  [398, 6],
  c,
  [1066, 34],
  398,
  133,
  1005,
  c,
  [55, 9],
  300,
  300,
  130,
  s,
  [300, 3],
  c,
  [1118, 35],
  c,
  [1453, 5],
  1007,
  1008,
  665,
  1010,
  c,
  [1537, 3],
  96,
  1013,
  1014,
  665,
  665,
  743,
  742,
  1017,
  124,
  451,
  124,
  c,
  [1489, 5],
  1019,
  1020,
  957,
  123,
  123,
  1021,
  454,
  c,
  [8255, 4],
  c,
  [772, 12],
  1025,
  c,
  [102, 9],
  288,
  288,
  130,
  s,
  [288, 3],
  c,
  [4077, 102],
  1027,
  1028,
  1029,
  556,
  s,
  [466, 78],
  c,
  [79, 11],
  1030,
  556,
  s,
  [467, 78],
  c,
  [79, 11],
  743,
  742,
  s,
  [500, 5],
  743,
  742,
  1031,
  1032,
  743,
  742,
  s,
  [493, 5],
  743,
  742,
  1033,
  c,
  [641, 66],
  170,
  c,
  [389, 9],
  s,
  [170, 4],
  130,
  s,
  [170, 9],
  c,
  [397, 7],
  170,
  170,
  c,
  [399, 20],
  s,
  [170, 9],
  129,
  s,
  [170, 5],
  131,
  132,
  170,
  170,
  c,
  [108, 4],
  s,
  [170, 11],
  133,
  170,
  764,
  765,
  1035,
  c,
  [3324, 141],
  c,
  [7038, 72],
  232,
  130,
  1042,
  c,
  [1052, 37],
  1044,
  1045,
  1046,
  c,
  [2255, 6],
  c,
  [6, 6],
  1049,
  221,
  743,
  742,
  s,
  [449, 5],
  c,
  [773, 15],
  c,
  [1989, 11],
  1052,
  c,
  [769, 35],
  167,
  c,
  [48, 9],
  s,
  [167, 4],
  130,
  s,
  [167, 9],
  c,
  [59, 7],
  167,
  167,
  c,
  [61, 20],
  s,
  [167, 9],
  129,
  s,
  [167, 5],
  131,
  132,
  167,
  167,
  c,
  [77, 4],
  s,
  [167, 11],
  133,
  167,
  151,
  c,
  [89, 9],
  s,
  [151, 4],
  130,
  s,
  [151, 9],
  120,
  121,
  151,
  125,
  s,
  [151, 5],
  c,
  [89, 15],
  151,
  151,
  c,
  [89, 3],
  s,
  [151, 9],
  129,
  s,
  [151, 5],
  131,
  132,
  151,
  151,
  c,
  [89, 4],
  s,
  [151, 11],
  133,
  151,
  154,
  c,
  [89, 9],
  s,
  [154, 4],
  130,
  s,
  [154, 9],
  120,
  121,
  154,
  125,
  s,
  [154, 5],
  c,
  [89, 15],
  154,
  154,
  c,
  [89, 3],
  s,
  [154, 9],
  129,
  s,
  [154, 5],
  131,
  132,
  154,
  154,
  c,
  [89, 4],
  s,
  [154, 11],
  133,
  154,
  161,
  c,
  [89, 9],
  s,
  [161, 4],
  130,
  s,
  [161, 9],
  120,
  121,
  161,
  125,
  s,
  [161, 5],
  c,
  [89, 15],
  161,
  161,
  c,
  [89, 3],
  s,
  [161, 9],
  129,
  s,
  [161, 5],
  131,
  132,
  161,
  161,
  c,
  [89, 4],
  s,
  [161, 11],
  133,
  161,
  c,
  [559, 68],
  s,
  [1055, 5, 1],
  743,
  742,
  s,
  [450, 5],
  164,
  c,
  [169, 9],
  s,
  [164, 4],
  130,
  s,
  [164, 9],
  120,
  121,
  164,
  125,
  s,
  [164, 5],
  c,
  [169, 15],
  164,
  164,
  c,
  [169, 3],
  s,
  [164, 9],
  129,
  s,
  [164, 5],
  131,
  132,
  164,
  164,
  c,
  [120, 4],
  s,
  [164, 11],
  133,
  164,
  c,
  [2182, 17],
  s,
  [448, 5]
])
}),
defaultActions: bda({
  idx: u([
  3,
  s,
  [7, 11, 1],
  20,
  21,
  22,
  24,
  25,
  s,
  [27, 8, 1],
  42,
  48,
  62,
  63,
  64,
  s,
  [66, 7, 1],
  s,
  [79, 9, 1],
  s,
  [89, 4, 1],
  s,
  [96, 4, 1],
  s,
  [102, 4, 1],
  s,
  [108, 6, 1],
  118,
  120,
  121,
  126,
  s,
  [134, 13, 1],
  148,
  s,
  [150, 15, 1],
  168,
  169,
  171,
  175,
  176,
  181,
  182,
  183,
  212,
  214,
  215,
  216,
  220,
  226,
  231,
  235,
  236,
  237,
  245,
  254,
  257,
  258,
  261,
  262,
  s,
  [268, 4, 1],
  279,
  283,
  285,
  291,
  299,
  300,
  s,
  [301, 4, 3],
  319,
  322,
  s,
  [328, 4, 1],
  333,
  335,
  338,
  s,
  [343, 4, 1],
  350,
  352,
  353,
  360,
  371,
  372,
  376,
  377,
  378,
  380,
  383,
  390,
  394,
  409,
  415,
  420,
  422,
  425,
  430,
  433,
  434,
  438,
  442,
  444,
  455,
  457,
  461,
  462,
  466,
  468,
  469,
  478,
  490,
  498,
  501,
  502,
  504,
  s,
  [505, 4, 2],
  512,
  515,
  519,
  531,
  535,
  538,
  540,
  542,
  543,
  544,
  546,
  555,
  562,
  564,
  565,
  566,
  576,
  580,
  582,
  585,
  586,
  587,
  600,
  603,
  607,
  609,
  615,
  617,
  619,
  620,
  623,
  625,
  627,
  628,
  631,
  632,
  634,
  638,
  641,
  648,
  652,
  658,
  659,
  660,
  662,
  663,
  665,
  670,
  678,
  679,
  681,
  682,
  683,
  689,
  692,
  693,
  695,
  699,
  700,
  705,
  711,
  714,
  718,
  720,
  722,
  725,
  726,
  727,
  732,
  733,
  734,
  738,
  744,
  745,
  749,
  754,
  759,
  761,
  763,
  766,
  768,
  772,
  774,
  777,
  778,
  s,
  [779, 4, 2],
  786,
  788,
  790,
  793,
  795,
  797,
  800,
  801,
  803,
  s,
  [806, 5, 2],
  815,
  818,
  822,
  823,
  824,
  828,
  833,
  843,
  844,
  846,
  848,
  849,
  851,
  853,
  857,
  860,
  864,
  865,
  867,
  872,
  874,
  876,
  881,
  883,
  885,
  886,
  901,
  909,
  914,
  916,
  921,
  922,
  924,
  925,
  926,
  930,
  933,
  939,
  941,
  943,
  944,
  s,
  [949, 4, 1],
  954,
  955,
  956,
  s,
  [963, 7, 1],
  972,
  974,
  975,
  977,
  984,
  985,
  987,
  992,
  994,
  995,
  997,
  1000,
  s,
  [1002, 7, 1],
  s,
  [1010, 5, 1],
  1017,
  1018,
  1023,
  s,
  [1027, 7, 1],
  1035,
  1036,
  1038,
  1041,
  1043,
  1047,
  1049,
  1052,
  s,
  [1054, 5, 1]
]),
  goto: u([
  5,
  s,
  [9, 10, 1],
  427,
  432,
  433,
  434,
  437,
  438,
  s,
  [252, 8, 1],
  55,
  373,
  382,
  383,
  384,
  s,
  [306, 7, 1],
  263,
  s,
  [67, 8, 1],
  s,
  [228, 4, 1],
  392,
  505,
  506,
  507,
  313,
  314,
  322,
  323,
  350,
  351,
  246,
  247,
  315,
  316,
  38,
  48,
  49,
  54,
  s,
  [75, 13, 1],
  89,
  s,
  [91, 15, 1],
  385,
  106,
  111,
  428,
  430,
  378,
  379,
  380,
  199,
  248,
  249,
  250,
  138,
  341,
  35,
  368,
  372,
  387,
  36,
  527,
  531,
  533,
  552,
  553,
  508,
  512,
  513,
  456,
  107,
  330,
  345,
  338,
  88,
  90,
  232,
  213,
  269,
  272,
  406,
  412,
  362,
  347,
  348,
  349,
  325,
  328,
  479,
  469,
  470,
  471,
  473,
  318,
  321,
  3,
  57,
  60,
  61,
  108,
  112,
  402,
  113,
  116,
  377,
  224,
  177,
  189,
  211,
  216,
  234,
  128,
  137,
  366,
  21,
  139,
  140,
  395,
  394,
  268,
  277,
  404,
  409,
  416,
  538,
  543,
  458,
  264,
  265,
  109,
  261,
  344,
  331,
  332,
  334,
  357,
  238,
  297,
  423,
  419,
  425,
  358,
  324,
  326,
  364,
  474,
  491,
  496,
  317,
  319,
  403,
  122,
  436,
  45,
  47,
  221,
  174,
  181,
  184,
  186,
  214,
  218,
  237,
  126,
  129,
  367,
  356,
  355,
  142,
  144,
  31,
  369,
  25,
  267,
  302,
  417,
  333,
  336,
  516,
  517,
  526,
  554,
  537,
  528,
  532,
  534,
  541,
  509,
  504,
  457,
  439,
  262,
  354,
  239,
  270,
  273,
  283,
  293,
  286,
  292,
  407,
  413,
  426,
  327,
  480,
  484,
  476,
  497,
  486,
  320,
  200,
  208,
  114,
  117,
  375,
  155,
  156,
  195,
  196,
  197,
  173,
  178,
  180,
  190,
  191,
  183,
  219,
  127,
  132,
  343,
  141,
  23,
  32,
  24,
  370,
  400,
  399,
  278,
  298,
  304,
  405,
  410,
  518,
  539,
  530,
  544,
  547,
  550,
  551,
  510,
  459,
  441,
  444,
  452,
  266,
  339,
  243,
  274,
  271,
  415,
  481,
  365,
  477,
  489,
  118,
  157,
  158,
  176,
  130,
  135,
  143,
  28,
  279,
  411,
  555,
  558,
  560,
  561,
  545,
  548,
  542,
  511,
  461,
  440,
  442,
  335,
  340,
  244,
  245,
  275,
  284,
  287,
  290,
  408,
  482,
  475,
  498,
  488,
  487,
  202,
  115,
  149,
  152,
  163,
  175,
  131,
  371,
  280,
  337,
  520,
  521,
  523,
  556,
  559,
  540,
  519,
  460,
  445,
  455,
  414,
  478,
  464,
  465,
  501,
  490,
  494,
  119,
  150,
  153,
  162,
  166,
  446,
  443,
  289,
  165,
  525,
  522,
  524,
  447
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack
    var lstack = new Array(128);        // location stack
    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks
    var yyloc;

    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 1061 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };


    // shallow clone objects, straight copy of simple `src` values
    // e.g. `lexer.yytext` MAY be a complex value object,
    // rather than a simple string/value.
    function shallow_copy(src) {
        if (typeof src === 'object') {
            var dst = {};
            for (var k in src) {
                if (Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
            return dst;
        }
        return src;
    }
    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }
    function copy_yylloc(loc) {
        var rv = shallow_copy(loc);
        if (rv && rv.range) {
            rv.range = rv.range.slice(0);
        }
        return rv;
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }




        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };

    // merge yylloc info into a new yylloc instance.
    //
    // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
    //
    // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
    // case these override the corresponding first/last indexes.
    //
    // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
    // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
    // yylloc info.
    //
    // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
    this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(first_index, last_index, first_yylloc, last_yylloc, dont_look_back) {
        var i1 = first_index | 0,
            i2 = last_index | 0;
        var l1 = first_yylloc,
            l2 = last_yylloc;
        var rv;

        // rules:
        // - first/last yylloc entries override first/last indexes

        if (!l1) {
            if (first_index != null) {
                for (var i = i1; i <= i2; i++) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
        }

        if (!l2) {
            if (last_index != null) {
                for (var i = i2; i >= i1; i--) {
                    l2 = lstack[i];
                    if (l2) {
                        break;
                    }
                }
            }
        }

        // - detect if an epsilon rule is being processed and act accordingly:
        if (!l1 && first_index == null) {
            // epsilon rule span merger. With optional look-ahead in l2.
            if (!dont_look_back) {
                for (var i = (i1 || sp) - 1; i >= 0; i--) {
                    l1 = lstack[i];
                    if (l1) {
                        break;
                    }
                }
            }
            if (!l1) {
                if (!l2) {
                    // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                    // without look-ahead and no preceding terms and/or `dont_look_back` set:
                    // in that case we ca do nothing but return NULL/UNDEFINED:
                    return undefined;
                } else {
                    // shallow-copy L2: after all, we MAY be looking
                    // at unconventional yylloc info objects...
                    rv = shallow_copy(l2);
                    if (rv.range) {
                        // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                        rv.range = rv.range.slice(0);
                    }
                    return rv;
                }
            } else {
                // shallow-copy L1, then adjust first col/row 1 column past the end.
                rv = shallow_copy(l1);
                rv.first_line = rv.last_line;
                rv.first_column = rv.last_column;
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                    rv.range[0] = rv.range[1];
                }

                if (l2) {
                    // shallow-mixin L2, then adjust last col/row accordingly.
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }
                return rv;
            }
        }

        if (!l1) {
            l1 = l2;
            l2 = null;
        }
        if (!l1) {
            return undefined;
        }

        // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
        // at unconventional yylloc info objects...
        rv = shallow_copy(l1);

        // first_line: ...,
        // first_column: ...,
        // last_line: ...,
        // last_column: ...,
        if (rv.range) {
            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
            rv.range = rv.range.slice(0);
        }

        if (l2) {
            shallow_copy_noclobber(rv, l2);
            rv.last_line = l2.last_line;
            rv.last_column = l2.last_column;
            if (rv.range && l2.range) {
                rv.range[1] = l2.range[1];
            }
        }

        return rv;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: copy_yylloc(lexer.yylloc),
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;




    lexer.setInput(input, sharedState_yy);

    // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
    // this initial `setInput()` call: hence we can now check and decide
    // whether we'll go with the standard, slower, lex() API or the
    // `fast_lex()` one:
    if (typeof lexer.canIUse === 'function') {
        var lexerInfo = lexer.canIUse();
        if (lexerInfo.fastLex && typeof fastLex === 'function') {
            lex = fastLex;
        }
    } 

    yyloc = lexer.yylloc;
    lstack[sp] = yyloc;
    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;





    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState_yy);
    }
    if (sharedState_yy.pre_parse) {
        sharedState_yy.pre_parse.call(this, sharedState_yy);
    }

    newState = sstack[sp - 1];
    for (;;) {
        // retrieve state number from top of stack
        state = newState;               // sstack[sp - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = 2;
            newState = this.defaultActions[state];
        } else {
            // The single `==` condition below covers both these `===` comparisons in a single
            // operation:
            //
            //     if (symbol === null || typeof symbol === 'undefined') ...
            if (!symbol) {
                symbol = lex();
            }
            // read action for current state and first input
            t = (table[state] && table[state][symbol]) || NO_ACTION;
            newState = t[1];
            action = t[0];











            // handle parse error
            if (!action) {
                var errStr;
                var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                var expected = this.collect_expected_token_set(state);

                // Report error
                if (typeof lexer.yylineno === 'number') {
                    errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                } else {
                    errStr = 'Parse error: ';
                }
                if (typeof lexer.showPosition === 'function') {
                    errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                }
                if (expected.length) {
                    errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                } else {
                    errStr += 'Unexpected ' + errSymbolDescr;
                }
                // we cannot recover from the error!
                p = this.constructParseErrorInfo(errStr, null, expected, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }


        }










        switch (action) {
        // catch misc. parse failures:
        default:
            // this shouldn't happen, unless resolve defaults are off
            if (action instanceof Array) {
                p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }
            // Another case of better safe than sorry: in case state transitions come out of another error recovery process
            // or a buggy LUT (LookUp Table):
            p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') {
                retval = r;
            }
            break;

        // shift:
        case 1:
            stack[sp] = symbol;
            vstack[sp] = lexer.yytext;
            lstack[sp] = copy_yylloc(lexer.yylloc);
            sstack[sp] = newState; // push state

            ++sp;
            symbol = 0;




            // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:



            yyloc = lexer.yylloc;
            continue;

        // reduce:
        case 2:



            this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
            yyrulelen = this_production[1];










            r = this.performAction.call(yyval, yyloc, newState, sp - 1, vstack, lstack);

            if (typeof r !== 'undefined') {
                retval = r;
                break;
            }

            // pop off stack
            sp -= yyrulelen;

            // don't overwrite the `symbol` variable: use a local var to speed things up:
            var ntsymbol = this_production[0];    // push nonterminal (reduce)
            stack[sp] = ntsymbol;
            vstack[sp] = yyval.$;
            lstack[sp] = yyval._$;
            // goto new state = table[STATE][NONTERMINAL]
            newState = table[sstack[sp - 1]][ntsymbol];
            sstack[sp] = newState;
            ++sp;









            continue;

        // accept:
        case 3:
            if (sp !== -2) {
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                sp--;
                if (typeof vstack[sp] !== 'undefined') {
                    retval = vstack[sp];
                }
            }
            break;
        }

        // break out of loop: we accept or fail with error
        break;
    }
    
    // ... AND FINALLY ...

    retval = this.cleanupAfterParse(retval, true, true);


    

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;



function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = Elysion;
  exports.Parser = Elysion.Parser;
  exports.parse = function () {
    return Elysion.parse.apply(Elysion, arguments);
  };
  
}
